[{"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\index.js":"1","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\App.js":"2","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Login.js":"4","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Navbar.js":"5","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Logout.js":"6","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Welcome.js":"7","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Applications.js":"8","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Signup.js":"9","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Home.js":"10","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Course.js":"11","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\CreateJobs.js":"12","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Profile.js":"13","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\isAuth.js":"14","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\MessagePopup.js":"15","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\MyJobs.js":"16","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\JobApplications.js":"17","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\Profile.js":"18","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js":"19","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\apiList.js":"20","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\PasswordInput.js":"21","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\FileUploadInput.js":"22","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\EmailInput.js":"23","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Navigation.js":"24"},{"size":517,"mtime":1727192343270,"results":"25","hashOfConfig":"26"},{"size":3800,"mtime":1737730421208,"results":"27","hashOfConfig":"26"},{"size":375,"mtime":1727192343270,"results":"28","hashOfConfig":"26"},{"size":3999,"mtime":1727192343266,"results":"29","hashOfConfig":"26"},{"size":5276,"mtime":1737730186257,"results":"30","hashOfConfig":"26"},{"size":509,"mtime":1727192343266,"results":"31","hashOfConfig":"26"},{"size":30209,"mtime":1727192343267,"results":"32","hashOfConfig":"26"},{"size":7972,"mtime":1737217771198,"results":"33","hashOfConfig":"26"},{"size":16226,"mtime":1727192343267,"results":"34","hashOfConfig":"26"},{"size":23558,"mtime":1727192343263,"results":"35","hashOfConfig":"26"},{"size":5457,"mtime":1737218197163,"results":"36","hashOfConfig":"26"},{"size":10729,"mtime":1727192343267,"results":"37","hashOfConfig":"26"},{"size":22958,"mtime":1737441118659,"results":"38","hashOfConfig":"26"},{"size":174,"mtime":1727192343270,"results":"39","hashOfConfig":"26"},{"size":523,"mtime":1727192343270,"results":"40","hashOfConfig":"26"},{"size":27789,"mtime":1727192343267,"results":"41","hashOfConfig":"26"},{"size":24390,"mtime":1737217804315,"results":"42","hashOfConfig":"26"},{"size":6635,"mtime":1737698215291,"results":"43","hashOfConfig":"26"},{"size":25797,"mtime":1727192343267,"results":"44","hashOfConfig":"26"},{"size":675,"mtime":1727192343270,"results":"45","hashOfConfig":"26"},{"size":1724,"mtime":1727192343270,"results":"46","hashOfConfig":"26"},{"size":4607,"mtime":1727192343270,"results":"47","hashOfConfig":"26"},{"size":1210,"mtime":1727192343270,"results":"48","hashOfConfig":"26"},{"size":5161,"mtime":1737730771158,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1bh0h66",{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"52"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"52"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"52"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"111","messages":"112","errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\index.js",[],["113","114"],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\App.js",["115"],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Login.js",["116","117","118"],"import { useContext, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  styled,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\nimport { blue } from \"@material-ui/core/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  h2: {\r\n    color: \"blue\",\r\n  },\r\n  inputBox: {\r\n    width: \"300px\",\r\n    height: \"50px\"\r\n  },\r\n  submitButton: {\r\n    width: \"100px\",\r\n  },\r\n  Pallete:{\r\n    primary: {\r\n      main: \"#fefefe\"\r\n    }\r\n  }\r\n}));\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [loginDetails, setLoginDetails] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setLoginDetails({\r\n      ...loginDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\r\n      return inputErrorHandler[obj].error;\r\n    });\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.login, loginDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Paper class=\"loginSection\" elevation={4} rounded-md className={classes.body}>\r\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography class=\"loginHeading\" variant=\"h2\" component=\"h2\">\r\n            Login\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <EmailInput class=\"userinput\"\r\n            label=\"Email\"\r\n            value={loginDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <PasswordInput class=\"userinput\"\r\n            label=\"Password\"\r\n            value={loginDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Button class=\"userbutton\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={() => handleLogin()}\r\n            className={classes.submitButton}\r\n          >\r\n            Login\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n     \r\n      \r\n    </Paper>\r\n   \r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Navbar.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Logout.js",["119"],"import { useEffect, useContext } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nconst Logout = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"type\");\r\n    setPopup({\r\n      open: true,\r\n      severity: \"success\",\r\n      message: \"Logged out successfully\",\r\n    });\r\n  }, []);\r\n  return <Redirect to=\"/login\" />;\r\n};\r\n\r\nexport default Logout;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Welcome.js",["120","121","122"],"import { Grid, Typography } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Welcome = (props) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ minHeight: \"93vh\" }}\r\n    >\r\n      <div className=\"py-2 bg-gray-100 text-gray-900 min-h-screen\">\r\n        <main>\r\n          <div id=\"hero\" className=\"px-10 py-20 my-5 lg:flex items-center\">\r\n            <div className=\" sm:px-10 md:px-10 md:flex flex-col lg:block lg:w-1/2 lg:max-w-3xl lg:mr-8 lg:px-20\">\r\n              <div className=\"md:w-1/2 md:mr-10 lg:w-full lg:mr-0\">\r\n                <h1 className=\"text-3xl xl:text-5xl font-black md:leading-none xl:leading-tight\">\r\n                  {props.type === \"recruiter\"\r\n                    ? \"Hire a Talent Near You\"\r\n                    : \"Find high paying jobs with Worko\"}\r\n                </h1>\r\n                <p className=\"py-5 mt-4 xl:mt-2\">\r\n                  World Class Talent, just for you on contract, full-time or\r\n                  part-time, whatever you need.\r\n                </p>\r\n              </div>\r\n              <div className=\"flex-1\">\r\n                <div>\r\n                  <Link\r\n                    style={{ width: \"150%\" }}\r\n                    to=\"home\"\r\n                    className=\"homeBtn transition-all duration-300 bg-#4f89f1 w-40 border border-transparent rounded font-semibold tracking-wide text-sm px-5 py-4 focus:outline-none focus:shadow-outline bg-indigo-500 text-gray-100 hover:bg-indigo-600 hover:text-gray-200\"\r\n                  >\r\n                    {/* <button> */}\r\n                    {props.type === \"recruiter\" ? \"Find Talent\" : \"Find Job\"}\r\n                    {/* </button> */}\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"mt-6 w-full flex-1 lg:mt-0\">\r\n              <div />\r\n              <img\r\n                className\r\n                src=\"https://images.unsplash.com/photo-1524749292158-7540c2494485?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=85\"\r\n                alt=\"main\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"p-5 sm:px-10 md:px-20\" id=\"companies\">\r\n            <div className=\"max-w-screen-xl mx-auto\">\r\n              <img\r\n                className=\"mx-auto\"\r\n                src=\"https://storage.googleapis.com/devitary-image-host.appspot.com/15846471026680582071-Strip-Payment-Logos.png\"\r\n                alt=\"main\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"px-5 sm:px-10 md:px-20 lg:px-10 xl:px-20 py-8 bg-indigo-100\"\r\n            id=\"features\"\r\n          >\r\n            <div className=\"py-10 max-w-screen-xl mx-auto\">\r\n              <h3 className=\"leading-none font-black text-3xl\">Features</h3>\r\n              <div className=\"flex flex-col justify-center flex-wrap lg:flex-row lg:items-stretch lg:flex-no-wrap lg:justify-between\">\r\n                <div className=\"w-full max-w-sm mt-6 lg:mt-8 bg-gray-100 rounded-2xl shadow-md p-12 lg:p-8 lg:mx-0 xl:p-12\">\r\n                  <div className=\"p-4 inline-block bg-indigo-200 rounded-lg\">\r\n                    <svg\r\n                      className=\"text-indigo-500 w-8\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <circle cx={12} cy={12} r={10} />\r\n                      <path d=\"M8 14s1.5 2 4 2 4-2 4-2\" />\r\n                      <line x1={9} y1={9} x2=\"9.01\" y2={9} />\r\n                      <line x1={15} y1={9} x2=\"15.01\" y2={9} />\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"mt-4 font-extrabold text-2xl tracking-wide\">\r\n                    Amazing People\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    We guarantee that every designer you ever work with will be\r\n                    an awesome member for your team. We conduct personal\r\n                    interview with every designer to ensure that we only get the\r\n                    best.\r\n                  </div>\r\n                </div>\r\n                <div className=\"w-full max-w-sm mt-8 bg-gray-100 rounded-2xl shadow-md p-12 lg:p-8 lg:mx-4 xl:p-12\">\r\n                  <div className=\"p-4 inline-block bg-green-200 rounded-lg\">\r\n                    <svg\r\n                      className=\"text-green-500 w-8\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <line x1={12} y1={1} x2={12} y2={23} />\r\n                      <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"mt-4 font-extrabold text-2xl tracking-wide\">\r\n                    Best Rates\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    Be assured that you will always get the best rates. We\r\n                    continously monitor global freelance wage trends to ensure\r\n                    that no one is under or overpaid.\r\n                  </div>\r\n                </div>\r\n                <div className=\"w-full max-w-sm mt-8 bg-gray-100 rounded-2xl shadow-md p-12 lg:p-8 lg:mx-4 xl:p-12\">\r\n                  <div className=\"p-4 inline-block bg-red-200 rounded-lg\">\r\n                    <svg\r\n                      className=\"text-red-500 w-8\"\r\n                      xmlns=\"http://www.w3.org/2000/svg\"\r\n                      viewBox=\"0 0 24 24\"\r\n                      fill=\"none\"\r\n                      stroke=\"currentColor\"\r\n                      strokeWidth={2}\r\n                      strokeLinecap=\"round\"\r\n                      strokeLinejoin=\"round\"\r\n                    >\r\n                      <path\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\r\n                      />\r\n                      <line\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        x1={12}\r\n                        y1={9}\r\n                        x2={12}\r\n                        y2={13}\r\n                      />\r\n                      <line\r\n                        xmlns=\"http://www.w3.org/2000/svg\"\r\n                        x1={12}\r\n                        y1={17}\r\n                        x2=\"12.01\"\r\n                        y2={17}\r\n                      />\r\n                    </svg>\r\n                  </div>\r\n                  <div className=\"mt-4 font-extrabold text-2xl tracking-wide\">\r\n                    Abuse Protection\r\n                  </div>\r\n                  <div className=\"text-sm text-gray-600\">\r\n                    Money is held by us in escrow subject to project completion.\r\n                    If there is any dispute, a customer service representative\r\n                    will manually review the case and take appropriate action.\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"px-5 sm:px-10 md:px-20 lg:px-10 xl:px-20 py-8 bg-gray-100\"\r\n            id=\"cards\"\r\n          >\r\n            {/* Popular Designer Section */}\r\n            <div className=\"max-w-screen-xl mx-auto\">\r\n              <h3 className=\"leading-none font-black text-3xl\">\r\n                Popular Designers\r\n              </h3>\r\n              <div className=\"lg:flex justify-between lg:mt-8\">\r\n                {/* Hired Card*/}\r\n                <div className=\" flex-col  items-center\">\r\n                  <div className=\"flex-1 flex w-full max-w-sm pt-5 lg:pt-0\">\r\n                    <div className=\"w-full p-2 sm:p-10 lg:px-8 xl:px-12 shadow-md rounded bg-gray-100 relative\">\r\n                      <div className=\"my-5 flex items-center\">\r\n                        <div\r\n                          className=\"w-16 h-16 bg-cover rounded-full border-2 border-gray-700\"\r\n                          alt=\"\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://res.cloudinary.com/difvkvxuy/image/upload/v1697566818/Latest%20Portfolio%20Images/photo_2023-10-17_23-49-54_rd8ord.jpg\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"ml-5\">\r\n                          <div className=\"font-bold text-gray-800\">\r\n                            Junaid Ahmed Shaikh\r\n                          </div>\r\n                          <div className=\"text-xs text-gray-500\">\r\n                            Hired 3 Hours ago\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-lg font-bold  leading-tight\">\r\n                        Frontend Dev\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"flex justify-between mt-3 text-xs font-bold\">\r\n                          <div className=\"flex items-start\">\r\n                            <svg\r\n                              className=\"text-gray-600 w-4\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              strokeWidth={2}\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                            >\r\n                              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" />\r\n                              <circle cx={12} cy={10} r={3} />\r\n                            </svg>\r\n                            <span className=\"ml-1 text-gray-600\">\r\n                              New York City\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex items-start ml-4\">\r\n                            <svg\r\n                              className=\"text-gray-600 w-4\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              strokeWidth={2}\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                            >\r\n                              <rect\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                x={2}\r\n                                y={7}\r\n                                width={20}\r\n                                height={14}\r\n                                rx={2}\r\n                                ry={2}\r\n                              />\r\n                              <path\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"\r\n                              />\r\n                            </svg>\r\n                            <span className=\"ml-1 text-gray-600\">\r\n                              Google (3 Years)\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-center flex flex-nowrap  text-xs\">\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            Full Time\r\n                          </span>\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            Remote\r\n                          </span>\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            $30/Hr\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Hired Card*/}\r\n                <div className=\" flex-col  items-center\">\r\n                  <div className=\"flex-1 flex w-full max-w-sm pt-5 lg:pt-0\">\r\n                    <div className=\"w-full p-2 sm:p-10 lg:px-8 xl:px-12 shadow-md rounded bg-gray-100 relative\">\r\n                      <div className=\"my-5 flex items-center\">\r\n                        <div\r\n                          className=\"w-16 h-16 bg-cover rounded-full border-2 border-gray-700\"\r\n                          alt=\"\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://i.pinimg.com/136x136/fb/73/38/fb733864f9b1dd8f77629a71d7bccd04.jpg\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"ml-5\">\r\n                          <div className=\"font-bold text-gray-800\">\r\n                            Akansha Kumar\r\n                          </div>\r\n                          <div className=\"text-xs text-gray-500\">\r\n                            Hired 3 Hours ago\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-lg font-bold  leading-tight\">\r\n                        SDE 1\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"flex justify-between mt-3 text-xs font-bold\">\r\n                          <div className=\"flex items-start\">\r\n                            <svg\r\n                              className=\"text-gray-600 w-4\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              strokeWidth={2}\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                            >\r\n                              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" />\r\n                              <circle cx={12} cy={10} r={3} />\r\n                            </svg>\r\n                            <span className=\"ml-1 text-gray-600\">India</span>\r\n                          </div>\r\n                          <div className=\"flex items-start ml-4\">\r\n                            <svg\r\n                              className=\"text-gray-600 w-4\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              strokeWidth={2}\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                            >\r\n                              <rect\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                x={2}\r\n                                y={7}\r\n                                width={20}\r\n                                height={14}\r\n                                rx={2}\r\n                                ry={2}\r\n                              />\r\n                              <path\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"\r\n                              />\r\n                            </svg>\r\n                            <span className=\"ml-1 text-gray-600\">\r\n                              Google (1 Years)\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-center flex flex-nowrap  text-xs\">\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            Full Time\r\n                          </span>\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            Remote\r\n                          </span>\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            $80/Hr\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                {/* Hired Card*/}\r\n                <div className=\" flex-col  items-center\">\r\n                  <div className=\"flex-1 flex w-full max-w-sm pt-5 lg:pt-0\">\r\n                    <div className=\"w-full p-2 sm:p-10 lg:px-8 xl:px-12 shadow-md rounded bg-gray-100 relative\">\r\n                      <div className=\"my-5 flex items-center\">\r\n                        <div\r\n                          className=\"w-16 h-16 bg-cover rounded-full border-2 border-gray-700\"\r\n                          alt=\"\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://i.pinimg.com/736x/9d/7a/ef/9d7aefbc7d3f2a883f2fceae82964e8a.jpg\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"ml-5\">\r\n                          <div className=\"font-bold text-gray-800\">Avi</div>\r\n                          <div className=\"text-xs text-gray-500\">\r\n                            Hired 9 Hours ago\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-lg font-bold  leading-tight\">\r\n                        Flutter Developer\r\n                      </div>\r\n                      <div>\r\n                        <div className=\"flex justify-between mt-3 text-xs font-bold\">\r\n                          <div className=\"flex items-start\">\r\n                            <svg\r\n                              className=\"text-gray-600 w-4\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              strokeWidth={2}\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                            >\r\n                              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" />\r\n                              <circle cx={12} cy={10} r={3} />\r\n                            </svg>\r\n                            <span className=\"ml-1 text-gray-600\">\r\n                              India | Mumbai\r\n                            </span>\r\n                          </div>\r\n                          <div className=\"flex items-start ml-4\">\r\n                            <svg\r\n                              className=\"text-gray-600 w-4\"\r\n                              xmlns=\"http://www.w3.org/2000/svg\"\r\n                              viewBox=\"0 0 24 24\"\r\n                              fill=\"none\"\r\n                              stroke=\"currentColor\"\r\n                              strokeWidth={2}\r\n                              strokeLinecap=\"round\"\r\n                              strokeLinejoin=\"round\"\r\n                            >\r\n                              <rect\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                x={2}\r\n                                y={7}\r\n                                width={20}\r\n                                height={14}\r\n                                rx={2}\r\n                                ry={2}\r\n                              />\r\n                              <path\r\n                                xmlns=\"http://www.w3.org/2000/svg\"\r\n                                d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"\r\n                              />\r\n                            </svg>\r\n                            <span className=\"ml-1 text-gray-600\">\r\n                              Google (3 Years)\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-center flex flex-nowrap  text-xs\">\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            Full Time\r\n                          </span>\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            Remote\r\n                          </span>\r\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\r\n                            $30/Hr\r\n                          </span>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div\r\n            className=\"px-5 sm:px-10 md:px-20 lg:px-10 xl:px-20 py-8 bg-indigo-100\"\r\n            id=\"blog-posts\"\r\n          >\r\n            {/* Popular Post Section */}\r\n            <div className=\"max-w-screen-xl mx-auto\">\r\n              <div className=\"xl:flex\">\r\n                <div>\r\n                  <h3 className=\"leading-none font-black text-3xl\">\r\n                    Popular Posts\r\n                  </h3>\r\n                  <div className=\"flex flex-col items-center lg:flex-row lg:items-stretch lg:justify-around\">\r\n                    <a\r\n                      href=\"https://owaiskhan.me\"\r\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8 xl:mr-8\"\r\n                    >\r\n                      <div className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg bg-gray-100 relative\">\r\n                        <div\r\n                          className=\"w-full h-48 bg-cover rounded-t-lg\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://images.unsplash.com/3/doctype-hi-res.jpg?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=768&q=80\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"p-6\">\r\n                          <div className=\"text-lg font-bold\">\r\n                            Tips for creating an amazing design system\r\n                          </div>\r\n                          <div className=\"mt-2 text-gray-900 text-sm\">\r\n                            Learn how to create a new design system that is\r\n                            beautiful and efficient for creating your UI\r\n                            components.\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </a>\r\n                    <a\r\n                      href=\"https://timerse.com\"\r\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8 xl:mr-8\"\r\n                    >\r\n                      <div className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg bg-gray-100 relative\">\r\n                        <div\r\n                          className=\"w-full h-48 bg-cover rounded-t-lg\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://images.unsplash.com/photo-1572044162444-ad60f128bdea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=768&q=80\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"p-6\">\r\n                          <div className=\"text-lg font-bold\">\r\n                            Using a drawing tablet to create beautiful icons\r\n                          </div>\r\n                          <div className=\"mt-2 text-gray-900 text-sm\">\r\n                            Good Icons are hard to come by. This article guides\r\n                            you on how to create beautiful sketched icons using\r\n                            a drawing pad.\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n                <div className=\"mt-12 xl:mt-0 xl:ml-8\">\r\n                  <h3 className=\"leading-none font-black text-3xl\">\r\n                    Recent Posts\r\n                  </h3>\r\n                  <div className=\"flex flex-col items-center lg:flex-row lg:items-stretch lg:justify-around xl:flex-col\">\r\n                    <a\r\n                      href=\"https://owaiskhan.me\"\r\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8\"\r\n                    >\r\n                      <div\r\n                        className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg\r\n                    bg-gray-100 relative xl:flex xl:flex-row-reverse xl:items-center xl:px-6 xl:py-8\"\r\n                      >\r\n                        <div\r\n                          className=\"w-full h-48 bg-cover rounded-t-lg xl:w-32 xl:h-20 xl:rounded-lg xl:ml-2\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://images.unsplash.com/photo-1452830978618-d6feae7d0ffa?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=512&q=80\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"p-6 xl:p-0\">\r\n                          <div className=\"text-lg font-bold\">\r\n                            How to work effectively with freelancers\r\n                          </div>\r\n                          <div className=\"mt-2 text-gray-900 text-sm xl:hidden\">\r\n                            Hiring a freelancer for your new project can be\r\n                            challenging if you've never done before. Learn some\r\n                            tips that will allow you to have a better experience\r\n                            working with freelancers\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </a>\r\n                    <a\r\n                      href=\"https://owaiskhan.me\"\r\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8\"\r\n                    >\r\n                      <div\r\n                        className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg\r\n                    bg-gray-100 relative xl:flex xl:flex-row-reverse xl:items-center xl:px-6 xl:py-8\"\r\n                      >\r\n                        <div\r\n                          className=\"w-full h-48 bg-cover rounded-t-lg xl:w-32 xl:h-20 xl:rounded-lg xl:ml-2\"\r\n                          style={{\r\n                            backgroundImage:\r\n                              'url(\"https://images.unsplash.com/photo-1581287053822-fd7bf4f4bfec?ixlib=rb-1.2.1&auto=format&fit=crop&w=512&q=80\")',\r\n                          }}\r\n                        />\r\n                        <div className=\"p-6 xl:p-0\">\r\n                          <div className=\"text-lg font-bold\">\r\n                            How to create smooth React Native animations\r\n                          </div>\r\n                          <div className=\"mt-2 text-gray-900 text-sm xl:hidden\">\r\n                            Animations play a vital role in user experience.\r\n                            This article describes how you can create butter\r\n                            smooth 60 FPS animations easily.\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </main>\r\n        <footer className=\"px-5 sm:px-10 md:px-20 py-8\">\r\n          <div className=\"flex flex-col items-center lg:flex-row-reverse justify-between\">\r\n            <div className>\r\n              <a\r\n                className=\"mx-4 text-sm font-bold text-indigo-600 hover:text-indigo-800\"\r\n                href=\"#\"\r\n              >\r\n                Home\r\n              </a>\r\n              <a\r\n                className=\"mx-4 text-sm font-bold text-indigo-600 hover:text-indigo-800\"\r\n                href=\"#\"\r\n              >\r\n                About Us\r\n              </a>\r\n              <a\r\n                className=\"mx-4 text-sm font-bold text-indigo-600 hover:text-indigo-800\"\r\n                href=\"#\"\r\n              >\r\n                Careers\r\n              </a>\r\n            </div>\r\n\r\n            <div className=\"mt-4 text-xs font-bold text-gray-500\">\r\n              © 2023 Online Job Portal\r\n            </div>\r\n          </div>\r\n        </footer>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const ErrorPage = (props) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Error 404</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Welcome;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Applications.js",["123"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  // IconButton,\r\n  // InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  // TextField,\r\n  Typography,\r\n  Modal,\r\n  // Slider,\r\n  // FormControlLabel,\r\n  // FormGroup,\r\n  // MenuItem,\r\n  // Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px auto\",\r\n    boxSizing: \"border-box\",\r\n    width: \"80%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application } = props;\r\n  console.log(\"🚀 ~ ApplicationTile ~ application:\", application);\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [rating, setRating] = useState(application.job.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const joinedOn = new Date(application.dateOfJoining);\r\n\r\n  const fetchRating = () => {\r\n    axios\r\n      .get(`${apiList.rating}?id=${application.job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setRating(response.data.rating);\r\n        console.log(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        { rating: rating, jobId: application.job._id },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        fetchRating();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  // const colorSet = {\r\n  //   applied: \"#3454D1\",\r\n  //   shortlisted: \"#DC851F\",\r\n  //   accepted: \"#09BC8A\",\r\n  //   rejected: \"#D1345B\",\r\n  //   deleted: \"#B49A67\",\r\n  //   cancelled: \"#FF8484\",\r\n  //   finished: \"#4EA5D9\",\r\n  // };\r\n\r\n  return (\r\n    <Paper\r\n      class=\"border-2 rounded-md px-5 py-5 w-6/12\"\r\n      className={classes.jobTileOuter}\r\n    >\r\n      <Grid class=\"job-card-container\" className=\"flex flex-col\">\r\n        <Grid direction=\"column\">\r\n          <Grid item>\r\n            <Typography class=\"cardTitle\">{application.job.title} </Typography>\r\n            <Typography class=\"cardSubTitle\"> Company Name </Typography>\r\n          </Grid>\r\n          <Grid class=\"cardSubTitle\">\r\n            <span item>Posted By: {application.recruiter.name}</span>\r\n            <span item>Role : {application.job.jobType}</span>\r\n            <span item>\r\n              Salary : &#8377; {application.job.salary} per month\r\n            </span>\r\n          </Grid>\r\n\r\n          <Grid class=\"cardSubTitle\">\r\n            <span>\r\n              Duration :{\" \"}\r\n              {application.job.duration !== 0\r\n                ? `${application.job.duration} month`\r\n                : `Flexible`}{\" \"}\r\n            </span>\r\n            <span> Applied On: {appliedOn.toLocaleDateString()}</span>\r\n          </Grid>\r\n          <Grid item>\r\n            {application.job.skillsets.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>Joined On: {joinedOn.toLocaleDateString()}</Grid>\r\n          ) : null}\r\n        </Grid>\r\n        <Grid item container direction=\"column\" class=\"w-full\" xs={3}>\r\n          <Grid item class=\"flex my-4 py-2 w-2/12\">\r\n            <Grid item class=\"primaryButton  my-4\">\r\n              Status: {application.status.toUpperCase()}\r\n            </Grid>\r\n          </Grid>\r\n          {application.status === \"accepted\" ||\r\n          application.status === \"finished\" ? (\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.statusBlock}\r\n                onClick={() => {\r\n                  fetchRating();\r\n                  setOpen(true);\r\n                }}\r\n              >\r\n                Rate Job\r\n              </Button>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            class=\"primaryButton\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst Applications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.applications, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n    >\r\n      {/* <Grid item> */}\r\n      <Typography variant=\"h2\">Applications</Typography>\r\n      {/* </Grid> */}\r\n      <Grid\r\n        container\r\n        item\r\n        xs\r\n        direction=\"column\"\r\n        style={{ width: \"80%\" }}\r\n        alignItems=\"stretch\"\r\n        justify=\"center\"\r\n      >\r\n        {applications.length > 0 ? (\r\n          applications.map((obj) => (\r\n            <Grid item>\r\n              <ApplicationTile application={obj} />\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n            No Applications Found\r\n          </Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Applications;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Signup.js",["124","125","126","127","128","129","130","131"],"import { useState, useContext } from \"react\";\r\nimport {\r\n  Grid,\r\n  TextField,\r\n  Button,\r\n  Typography,\r\n  makeStyles,\r\n  Paper,\r\n  MenuItem,\r\n  Input,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\nimport PhoneInput from \"react-phone-input-2\";\r\nimport \"react-phone-input-2/lib/material.css\";\r\n\r\nimport PasswordInput from \"../lib/PasswordInput\";\r\nimport EmailInput from \"../lib/EmailInput\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport isAuth from \"../lib/isAuth\";\r\n\r\n// Radio Button\r\n// import Radio from '@mui/material/Radio';\r\n// import RadioGroup from '@mui/material/RadioGroup';\r\n// // import FormControlLabel from '@mui/material/FormControlLabel';\r\n// // import FormControl from '@mui/material/FormControl';\r\n// // import FormLabel from '@mui/material/FormLabel';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    padding: \"60px 60px\",\r\n  },\r\n  inputBox: {\r\n    width: \"400px\",\r\n  },\r\n  submitButton: {\r\n    width: \"400px\",\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {/* {education.map((obj, key) => (\r\n                <Grid\r\n                    item\r\n                    container\r\n                    className={classes.inputBox}\r\n                    key={key}\r\n                    style={{ paddingLeft: 0, paddingRight: 0 }}\r\n                >\r\n                    <Grid item xs={6}>\r\n                        <TextField\r\n                            label={`Institution Name #${key + 1}`}\r\n                            value={education[key].institutionName}\r\n                            onChange={(event) => {\r\n                                const newEdu = [...education];\r\n                                newEdu[key].institutionName =\r\n                                    event.target.value;\r\n                                setEducation(newEdu);\r\n                            }}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <TextField\r\n                            label=\"Start Year\"\r\n                            value={obj.startYear}\r\n                            variant=\"outlined\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                const newEdu = [...education];\r\n                                newEdu[key].startYear = event.target.value;\r\n                                setEducation(newEdu);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <TextField\r\n                            label=\"End Year\"\r\n                            value={obj.endYear}\r\n                            variant=\"outlined\"\r\n                            type=\"number\"\r\n                            onChange={(event) => {\r\n                                const newEdu = [...education];\r\n                                newEdu[key].endYear = event.target.value;\r\n                                setEducation(newEdu);\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            ))} */}\r\n      {/* <Grid item>\r\n                <Button class=\"userButton\"\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    onClick={() =>\r\n                        setEducation([\r\n                            ...education,\r\n                            {\r\n                                institutionName: \"\",\r\n                                startYear: \"\",\r\n                                endYear: \"\",\r\n                            },\r\n                        ])\r\n                    }\r\n                    className={classes.inputBox}\r\n                >\r\n                    Add another institution details\r\n                </Button>\r\n            </Grid> */}\r\n    </>\r\n  );\r\n};\r\n\r\nconst Login = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [loggedin, setLoggedin] = useState(isAuth());\r\n\r\n  const [signupDetails, setSignupDetails] = useState({\r\n    type: \"applicant\",\r\n    email: \"\",\r\n    password: \"\",\r\n    name: \"\",\r\n    education: [],\r\n    skills: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n    bio: \"\",\r\n    contactNumber: \"\",\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const [inputErrorHandler, setInputErrorHandler] = useState({\r\n    email: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    password: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n    name: {\r\n      untouched: true,\r\n      required: true,\r\n      error: false,\r\n      message: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setSignupDetails({\r\n      ...signupDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleInputError = (key, status, message) => {\r\n    setInputErrorHandler({\r\n      ...inputErrorHandler,\r\n      [key]: {\r\n        required: true,\r\n        untouched: false,\r\n        error: status,\r\n        message: message,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleLogin = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleLoginRecruiter = () => {\r\n    const tmpErrorHandler = {};\r\n    Object.keys(inputErrorHandler).forEach((obj) => {\r\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\r\n        tmpErrorHandler[obj] = {\r\n          required: true,\r\n          untouched: false,\r\n          error: true,\r\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\r\n        };\r\n      } else {\r\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\r\n      }\r\n    });\r\n\r\n    let updatedDetails = {\r\n      ...signupDetails,\r\n    };\r\n    if (phone !== \"\") {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: `+${phone}`,\r\n      };\r\n    } else {\r\n      updatedDetails = {\r\n        ...signupDetails,\r\n        contactNumber: \"\",\r\n      };\r\n    }\r\n\r\n    setSignupDetails(updatedDetails);\r\n\r\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\r\n      return tmpErrorHandler[obj].error;\r\n    });\r\n\r\n    console.log(updatedDetails);\r\n\r\n    if (verified) {\r\n      axios\r\n        .post(apiList.signup, updatedDetails)\r\n        .then((response) => {\r\n          localStorage.setItem(\"token\", response.data.token);\r\n          localStorage.setItem(\"type\", response.data.type);\r\n          setLoggedin(isAuth());\r\n          setPopup({\r\n            open: true,\r\n            severity: \"success\",\r\n            message: \"Logged in successfully\",\r\n          });\r\n          console.log(response);\r\n        })\r\n        .catch((err) => {\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: err.response.data.message,\r\n          });\r\n          console.log(err.response);\r\n        });\r\n    } else {\r\n      setInputErrorHandler(tmpErrorHandler);\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"Incorrect Input\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return loggedin ? (\r\n    <Redirect to=\"/\" />\r\n  ) : (\r\n    <Paper elevation={3} className={classes.body}>\r\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography class=\"loginHeading\"  variant=\"h3\" component=\"h2\">\r\n            Signup\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            select\r\n            label=\"Category\"\r\n            variant=\"outlined\"\r\n            className={classes.inputBox}\r\n            value={signupDetails.type}\r\n            onChange={(event) => {\r\n              handleInput(\"type\", event.target.value);\r\n            }}\r\n          >\r\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\r\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\r\n          </TextField>\r\n\r\n          \r\n\r\n        </Grid>\r\n        <Grid item>\r\n          <TextField\r\n            label=\"Name\"\r\n            value={signupDetails.name}\r\n            onChange={(event) => handleInput(\"name\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.name.error}\r\n            helperText={inputErrorHandler.name.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"name\", true, \"Name is required\");\r\n              } else {\r\n                handleInputError(\"name\", false, \"\");\r\n              }\r\n            }}\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <EmailInput\r\n            class=\"userinput\"\r\n            label=\"Email\"\r\n            value={signupDetails.email}\r\n            onChange={(event) => handleInput(\"email\", event.target.value)}\r\n            inputErrorHandler={inputErrorHandler}\r\n            handleInputError={handleInputError}\r\n            className={classes.inputBox}\r\n            required={true}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <PasswordInput\r\n            class=\"userinput\"\r\n            label=\"Password\"\r\n            value={signupDetails.password}\r\n            onChange={(event) => handleInput(\"password\", event.target.value)}\r\n            className={classes.inputBox}\r\n            error={inputErrorHandler.password.error}\r\n            helperText={inputErrorHandler.password.message}\r\n            onBlur={(event) => {\r\n              if (event.target.value === \"\") {\r\n                handleInputError(\"password\", true, \"Password is required\");\r\n              } else {\r\n                handleInputError(\"password\", false, \"\");\r\n              }\r\n            }}\r\n          />\r\n        </Grid>\r\n        {signupDetails.type === \"applicant\" ? (\r\n          <>\r\n            <MultifieldInput\r\n              education={education}\r\n              setEducation={setEducation}\r\n            />\r\n            <Grid item>\r\n              <ChipInput\r\n                className={classes.inputBox}\r\n                label=\"Skills\"\r\n                variant=\"outlined\"\r\n                helperText=\"Press enter to add skills\"\r\n                onChange={(chips) =>\r\n                  setSignupDetails({\r\n                    ...signupDetails,\r\n                    skills: chips,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n            {/* <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Resume (.pdf)\"\r\n                icon={<DescriptionIcon />}\r\n                // value={files.resume}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     resume: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadResume}\r\n                handleInput={handleInput}\r\n                identifier={\"resume\"}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <FileUploadInput\r\n                className={classes.inputBox}\r\n                label=\"Profile Photo (.jpg/.png)\"\r\n                icon={<FaceIcon />}\r\n                // value={files.profileImage}\r\n                // onChange={(event) =>\r\n                //   setFiles({\r\n                //     ...files,\r\n                //     profileImage: event.target.files[0],\r\n                //   })\r\n                // }\r\n                uploadTo={apiList.uploadProfileImage}\r\n                handleInput={handleInput}\r\n                identifier={\"profile\"}\r\n              />\r\n            </Grid> */}\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid item style={{ width: \"100%\" }}>\r\n              <TextField\r\n                label=\"Bio (upto 250 words)\"\r\n                multiline\r\n                rows={8}\r\n                style={{ width: \"100%\" }}\r\n                variant=\"outlined\"\r\n                value={signupDetails.bio}\r\n                onChange={(event) => {\r\n                  if (\r\n                    event.target.value.split(\" \").filter(function (n) {\r\n                      return n != \"\";\r\n                    }).length <= 250\r\n                  ) {\r\n                    handleInput(\"bio\", event.target.value);\r\n                  }\r\n                }}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <PhoneInput\r\n                class=\"userinput\"\r\n                country={\"in\"}\r\n                value={phone}\r\n                onChange={(phone) => setPhone(phone)}\r\n              />\r\n            </Grid>\r\n          </>\r\n        )}\r\n\r\n        <Grid item>\r\n          <Button\r\n            class=\"userbutton\"\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => {\r\n              signupDetails.type === \"applicant\"\r\n                ? handleLogin()\r\n                : handleLoginRecruiter();\r\n            }}\r\n            className={classes.submitButton}\r\n          >\r\n            Signup\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n// {/* <Grid item>\r\n//           <PasswordInput\r\n//             label=\"Re-enter Password\"\r\n//             value={signupDetails.tmpPassword}\r\n//             onChange={(event) => handleInput(\"tmpPassword\", event.target.value)}\r\n//             className={classes.inputBox}\r\n//             labelWidth={140}\r\n//             helperText={inputErrorHandler.tmpPassword.message}\r\n//             error={inputErrorHandler.tmpPassword.error}\r\n//             onBlur={(event) => {\r\n//               if (event.target.value !== signupDetails.password) {\r\n//                 handleInputError(\r\n//                   \"tmpPassword\",\r\n//                   true,\r\n//                   \"Passwords are not same.\"\r\n//                 );\r\n//               }\r\n//             }}\r\n//           />\r\n//         </Grid> */}\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Home.js",["132","133","134","135","136","137","138","139","140","141","142"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { userType } from \"../lib/isAuth\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  const { job } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [sop, setSop] = useState(\"\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n    setSop(\"\");\r\n  };\r\n\r\n  const handleApply = () => {\r\n    console.log(job._id);\r\n    console.log(sop);\r\n    console.log(\"Working\");\r\n    axios\r\n      .post(\r\n        `${apiList.jobs}/${job._id}/applications`,\r\n        {\r\n          sop: sop,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const deadline = new Date(job.deadline).toLocaleDateString();\r\n  const cAddress = \"Mumbai, Maharashtra, India\";\r\n  const cName = \"Company Name\";\r\n  const cEducation = \" Bachelor's degree in Computer Science\";\r\n  console.log(\"🚀 ~ JobTile ~ job:\", job);\r\n  // const\r\n  return (\r\n    <Paper className={classes.jobTileOuter} class=\" shadow my-2 py-5 px-5\">\r\n      <Grid container class=\"flex flex-col\">\r\n        <Grid container item xs={9} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Grid item>\r\n              <Typography class=\"font-medium text-xl my-2 text-black\">\r\n                {job.title}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item class=\"cardSubTitle mb-2 flex flex-col\">\r\n              {/* <span class=\"\">{cName}</span> */}\r\n              <span>Posted By : {job.recruiter.name}</span>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid></Grid>\r\n\r\n          <Grid class=\"cardSubTitle w-screen my-2\">\r\n            <span>\r\n              {\" \"}\r\n              <i class=\"fa-solid fa-briefcase\"></i> {job.jobType}{\" \"}\r\n            </span>\r\n            <span>\r\n              <i class=\"fa-solid fa-indian-rupee-sign\"></i> {job.salary} PA\r\n            </span>{\" \"}\r\n            <span>\r\n              <i class=\"fa-solid fa-location-dot \"> </i> {cAddress}{\" \"}\r\n            </span>\r\n          </Grid>\r\n          <Grid item class=\"cardSubTitle\">\r\n            {\" \"}\r\n            <span>\r\n              {\" \"}\r\n              <i class=\"fa-solid fa-user-graduate\"></i> {job.jobType}{\" \"}\r\n            </span>\r\n          </Grid>\r\n        </Grid>\r\n        {/* Button of Card  */}\r\n        <Grid item className=\"flex align-middle justify-evenly \">\r\n          {/* Typography Section */}\r\n          <Grid item class=\"cardSubTitle flex w-full my-5 justify-start\">\r\n            {job?.skillsets.map((skill) => {\r\n              return <span style={{ marginRight: \"10px\" }}> {skill}</span>;\r\n            })}\r\n            {/* // <span> {\"None None None\"}</span> */}\r\n          </Grid>\r\n          {/* Button Section */}\r\n          <Grid item class=\"flex p-4\">\r\n            <Button\r\n              class=\"middle none center mr-3 rounded-lg bg-gradient-to-tr bg-blue-500 py-3 px-6 font-sans text-xs font-bold uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 active:opacity-[0.85] disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none\"\r\n              data-ripple-light=\"true\"\r\n              variant=\"outlined\"\r\n              // class=\"primaryButton\"\r\n              // className={classes.button}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n              disabled={userType() === \"recruiter\"}\r\n            >\r\n              Apply\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              class=\"middle none center mr-3 rounded-lg border borderblue-500 py-3 px-6 font-sans text-xs font-bold uppercase text-blue-500 transition-all hover:opacity-75 focus:ring focus:ring-pink-200 active:opacity-[0.85] disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none\"\r\n              data-ripple-dark=\"true\"\r\n            >\r\n              {\" \"}\r\n              View{\" \"}\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"50%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <TextField\r\n            label=\"Write SOP (upto 250 words)\"\r\n            multiline\r\n            rows={8}\r\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\r\n            variant=\"outlined\"\r\n            value={sop}\r\n            onChange={(event) => {\r\n              if (\r\n                event.target.value.split(\" \").filter(function (n) {\r\n                  return n != \"\";\r\n                }).length <= 250\r\n              ) {\r\n                setSop(event.target.value);\r\n              }\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => handleApply()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst Home = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(\r\n          response.data.filter((obj) => {\r\n            const today = new Date();\r\n            const deadline = new Date(obj.deadline);\r\n            return deadline > today;\r\n          })\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        class=\"mainGridContainer\"\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <TextField\r\n            label=\"Search Jobs\"\r\n            value={searchOptions.query}\r\n            onChange={(event) =>\r\n              setSearchOptions({\r\n                ...searchOptions,\r\n                query: event.target.value,\r\n              })\r\n            }\r\n            onKeyPress={(ev) => {\r\n              if (ev.key === \"Enter\") {\r\n                getData();\r\n              }\r\n            }}\r\n            InputProps={{\r\n              endAdornment: (\r\n                <InputAdornment>\r\n                  <IconButton onClick={() => getData()}>\r\n                    <SearchIcon />\r\n                  </IconButton>\r\n                </InputAdornment>\r\n              ),\r\n            }}\r\n            style={{ width: \"100vw\" }}\r\n            variant=\"outlined\"\r\n          />\r\n        </Grid>\r\n        <Grid item className=\"flex justify-between  w-full items-center mx-8\">\r\n          <Typography>Results</Typography>\r\n\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container item class=\"boxOfContent\">\r\n          {jobs.length > 0 ? (\r\n            jobs.map((job) => {\r\n              return <JobTile job={job} />;\r\n            })\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No jobs found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n        <Grid item>\r\n          <Pagination count={10} color=\"primary\" />\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Course.js",["143","144"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { CircularProgress, Box } from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport apiList from \"../lib/apiList\";\r\nimport { SetPopupContext } from \"../App\";\r\nimport { FaStar, FaStarHalfAlt } from \"react-icons/fa\";\r\n\r\nconst staticCourses = [\r\n  {\r\n    desc: \"In this course, you will learn three key website programming and design languages: HTML, CSS, and JavaScript...\",\r\n    difficulty: \"Intermediate\",\r\n    name: \"Responsive Website Basics: Code with HTML, CSS, and JavaScript\",\r\n    rating: \"4.5\",\r\n    url: \"https://www.coursera.org/learn/website-coding\",\r\n  },\r\n  {\r\n    desc: \"Learn foundational programming concepts and how to solve problems like a programmer...\",\r\n    difficulty: \"Beginner\",\r\n    name: \"Programming Foundations with JavaScript, HTML, and CSS\",\r\n    rating: \"4.5\",\r\n    url: \"https://www.coursera.org/learn/duke-programming-web\",\r\n  },\r\n  // Additional static course data...\r\n];\r\n\r\nconst Course = () => {\r\n  const [courses, setCourses] = useState(() => staticCourses);\r\n  const [loading, setLoading] = useState(true);\r\n  const [images, setImages] = useState({});\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [profileDetails, setProfileDetails] = useState({});\r\n\r\n  const fetchProfileData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => setProfileDetails(response.data))\r\n      .catch((err) => console.error(\"Error fetching profile data:\", err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchProfileData();\r\n  }, []);\r\n\r\n  const fetchCourseSuggestions = () => {\r\n    if (!profileDetails?.skills) return;\r\n\r\n    setLoading(true);\r\n    axios\r\n      .post(apiList.coursesuggestions, { user_skills: profileDetails.skills })\r\n      .then((response) => setCourses(response.data?.recommendations || []))\r\n      .catch((err) => {\r\n        console.error(\"Error fetching course suggestions:\", err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error fetching course suggestions.\",\r\n        });\r\n      })\r\n      .finally(() => setLoading(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchCourseSuggestions();\r\n  }, [profileDetails]);\r\n\r\n  const fetchImages = () => {\r\n    const promises = courses.map(() =>\r\n      axios\r\n        .get(\"https://source.unsplash.com/random/400x300/?programming\")\r\n        .then((response) => response.request.responseURL)\r\n        .catch(() => \"\")\r\n    );\r\n\r\n    Promise.all(promises).then((imageUrls) => setImages(imageUrls));\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchImages();\r\n  }, [courses]);\r\n\r\n  const truncate = (input) =>\r\n    input?.length > 300 ? `${input.substring(0, 400)}...` : input;\r\n\r\n  const renderRating = (rating) => {\r\n    const fullStars = Math.floor(rating);\r\n    const hasHalfStar = rating % 1 !== 0;\r\n\r\n    return (\r\n      <>\r\n        {[...Array(fullStars)].map((_, index) => (\r\n          <span key={index} className=\"px-1 text-xs text-gray-700\">\r\n            <FaStar />\r\n          </span>\r\n        ))}\r\n        {hasHalfStar && (\r\n          <span className=\"px-1 text-xs text-gray-700\">\r\n            <FaStarHalfAlt />\r\n          </span>\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Box\r\n          sx={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            height: \"100vh\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </Box>\r\n      ) : (\r\n        courses.map((course, idx) => (\r\n          <div\r\n            key={idx}\r\n            className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-4xl m-8 mt-10\"\r\n          >\r\n            <div className=\"md:flex\">\r\n              <div className=\"md:flex-shrink-0\">\r\n                {images[idx] ? (\r\n                  <img\r\n                    className=\"h-full w-full object-cover md:w-48\"\r\n                    src={images[idx]}\r\n                    alt=\"Course\"\r\n                  />\r\n                ) : (\r\n                  <div className=\"h-full w-full flex justify-center items-center bg-gray-200\">\r\n                    <CircularProgress />\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <div className=\"p-8 w-full\">\r\n                <div className=\"uppercase tracking-wide text-xs text-indigo-500 font-semibold\">\r\n                  {course.difficulty}\r\n                </div>\r\n                <h2 className=\"block mt-1 text-lg leading-tight font-medium text-black\">\r\n                  {course.name}\r\n                </h2>\r\n                <p className=\"mt-2 text-gray-500\">{truncate(course.desc)}</p>\r\n                <div className=\"inline-flex mt-4 bg-gray-200 rounded-full w-max p-1\">\r\n                  {renderRating(parseFloat(course.rating))}\r\n                </div>\r\n                <div className=\"mt-6\">\r\n                  <a\r\n                    href={course.url}\r\n                    className=\"text-indigo-500 hover:text-indigo-600 font-semibold text-sm\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    Explore Course\r\n                  </a>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Course;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\CreateJobs.js",["145","146"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  MenuItem,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n}));\r\n\r\nconst CreateJobs = (props ) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  \r\n  const [jobDetails, setJobDetails] = useState({\r\n    title: \"\",\r\n    maxApplicants: 100,\r\n    maxPositions: 30,\r\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n      .toISOString()\r\n      .substr(0, 16),\r\n    skillsets: [],\r\n    jobType: \"Full Time\",\r\n    duration: 0,\r\n    salary: 0,\r\n    roll: \"\",\r\n    address: \"\",\r\n    companyName: \"\",\r\n    jobDescription: {\r\n      description: \"\",\r\n      requirements: [],\r\n      technicalKnowledge: \"\",\r\n    },\r\n  });\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(jobDetails);\r\n    axios\r\n      .post(apiList.jobs, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        setJobDetails({\r\n          title: \"\",\r\n          maxApplicants: 100,\r\n          maxPositions: 30,\r\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\r\n            .toISOString()\r\n            .substr(0, 16),\r\n          skillsets: [],\r\n          jobType: \"Full Time\",\r\n          duration: 0,\r\n          salary: 0,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        class=\"createJobsGrid\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\r\n      >\r\n        <Grid item>\r\n          {/* <Typography variant=\"h2\">Add Job</Typography> */}\r\n          <Typography class=\"mainHeading\"> Unlock Opportunities: Post Jobs Today!</Typography>\r\n        </Grid>\r\n        <Grid item container xs direction=\"column\" justify=\"center\">\r\n          <Grid item>\r\n            <Paper\r\n              style={{\r\n                padding: \"20px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}\r\n              >\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Title\"\r\n                    value={jobDetails.title}\r\n                    onChange={(event) =>\r\n                      handleInput(\"title\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.skillsets}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: [...jobDetails.skillsets, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let skillsets = jobDetails.skillsets;\r\n                      skillsets.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        skillsets: skillsets,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Salary\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.salary}\r\n                    onChange={(event) => {\r\n                      handleInput(\"salary\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 0 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n\r\n                {/* Company Details */}\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Company Name\"\r\n                    value={jobDetails.companyName}\r\n                    onChange={(event) =>\r\n                      handleInput(\"companyName\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  /> </Grid>\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Address\"\r\n                    value={jobDetails.address}\r\n                    onChange={(event) =>\r\n                      handleInput(\"address\", event.target.value)\r\n                    }\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    placeholder=\"City, State, Country\"\r\n                  />\r\n                </Grid>\r\n                \r\n                <Grid item>\r\n                  <ChipInput\r\n                    className={classes.inputBox}\r\n                    label=\"Requirements\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press enter to add skills\"\r\n                    value={jobDetails.requirements}\r\n                    onAdd={(chip) =>\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        requirements: [...jobDetails.requirements, chip],\r\n                      })\r\n                    }\r\n                    onDelete={(chip, index) => {\r\n                      let requirements = jobDetails.requirements;\r\n                      requirements.splice(index, 1);\r\n                      setJobDetails({\r\n                        ...jobDetails,\r\n                        requirements: requirements,\r\n                      });\r\n                    }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextField\r\n                    label=\"Application Deadline\"\r\n                    type=\"datetime-local\"\r\n                    value={jobDetails.deadline}\r\n                    onChange={(event) => {\r\n                      handleInput(\"deadline\", event.target.value);\r\n                    }}\r\n                    InputLabelProps={{\r\n                      shrink: true,\r\n                    }}\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n\r\n\r\n\r\n                <Grid item style={{display: \"flex\", flexDirection: \"row\"}}>\r\n                  {/* Job Type Input */}\r\n                  <TextField \r\n                    select\r\n                    label=\"Job Type\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.jobType}\r\n                    onChange={(event) => {\r\n                      handleInput(\"jobType\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\r\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\r\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\r\n                  </TextField>\r\n                  {/* Job Duration */}\r\n                  <TextField style={{marginLeft: \".5rem\"}}\r\n                    select\r\n                    label=\"Duration\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.duration}\r\n                    onChange={(event) => {\r\n                      handleInput(\"duration\", event.target.value);\r\n                    }}\r\n                    fullWidth\r\n                  >\r\n                    <MenuItem value={0}>Flexible</MenuItem>\r\n                    <MenuItem value={1}>1 Month</MenuItem>\r\n                    <MenuItem value={2}>2 Months</MenuItem>\r\n                    <MenuItem value={3}>3 Months</MenuItem>\r\n                    <MenuItem value={4}>4 Months</MenuItem>\r\n                    <MenuItem value={5}>5 Months</MenuItem>\r\n                    <MenuItem value={6}>6 Months</MenuItem>\r\n                  </TextField>\r\n                </Grid>\r\n               \r\n                \r\n                \r\n               \r\n                <Grid item style={{display: \"flex\", flexDirection: \"row\"}}>\r\n                  <TextField \r\n                    label=\"Positions Available\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxPositions}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxPositions\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                <TextField style={{marginLeft: \".5rem\"}}\r\n                    label=\"Maximum Number Of Applicants\"\r\n                    type=\"number\"\r\n                    variant=\"outlined\"\r\n                    value={jobDetails.maxApplicants}\r\n                    onChange={(event) => {\r\n                      handleInput(\"maxApplicants\", event.target.value);\r\n                    }}\r\n                    InputProps={{ inputProps: { min: 1 } }}\r\n                    fullWidth\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                class=\"primaryButton\"\r\n                onClick={() => handleUpdate()}\r\n              >\r\n               Post a Job\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CreateJobs;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Profile.js",["147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Modal,\r\n  Paper,\r\n  makeStyles,\r\n  TextField,\r\n  List,\r\n  Chip,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport FileUploadInput from \"../lib/FileUploadInput\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport FaceIcon from \"@material-ui/icons/Face\";\r\n\r\nimport { SetPopupContext } from \"../App\";\r\n\r\nimport apiList from \"../lib/apiList\";\r\nimport { GridOff } from \"@material-ui/icons\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    // padding: \"30px\",\r\n  },\r\n  box1: {\r\n    background: \"Red\",\r\n  },\r\n}));\r\n\r\nconst MultifieldInput = (props) => {\r\n  const classes = useStyles();\r\n  const { education, setEducation } = props;\r\n\r\n  return (\r\n    <>\r\n      {education.map((obj, key) => (\r\n        <Grid item container className={classes.inputBox} key={key}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              label={`Institution Name #${key + 1}`}\r\n              value={education[key].institutionName}\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].institutionName = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n              variant=\"outlined\"\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"Start Year\"\r\n              value={obj.startYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].startYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              label=\"End Year\"\r\n              value={obj.endYear}\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              onChange={(event) => {\r\n                const newEdu = [...education];\r\n                newEdu[key].endYear = event.target.value;\r\n                setEducation(newEdu);\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      ))}\r\n      <Grid item style={{ alignSelf: \"center\" }}>\r\n        <Button\r\n          variant=\"contained\"\r\n          className=\"primaryButton\"\r\n          onClick={() =>\r\n            setEducation([\r\n              ...education,\r\n              {\r\n                institutionName: \"\",\r\n                startYear: \"\",\r\n                endYear: \"\",\r\n              },\r\n            ])\r\n          }\r\n          className={classes.inputBox}\r\n        >\r\n          Add\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Profile = (props) => {\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [userData, setUserData] = useState();\r\n  const [open, setOpen] = useState(false);\r\n  const [experience, setExperience] = useState();\r\n\r\n  const [resumeAnalysis, setResumeAnalysis] = useState([]);\r\n\r\n  const bestFitListing = resumeAnalysis?.reduce((prevJob, currentJob) => {\r\n    return currentJob.fit_score > prevJob.fit_score ? currentJob : prevJob;\r\n  }, resumeAnalysis?.[0]);\r\n\r\n  console.log(\"🚀 ~ Profile ~ filteredListings:\", bestFitListing);\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    surename: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    education: [],\r\n    experience: [],\r\n    skills: [],\r\n    socialMedia: [],\r\n    resume: \"\",\r\n    profile: \"\",\r\n  });\r\n\r\n  const getResumeAnalysis = () => {\r\n    axios\r\n      .post(apiList.resumeparse, {\r\n        resume_url: profileDetails.resume,\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setResumeAnalysis(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (profileDetails.resume) {\r\n      getResumeAnalysis();\r\n    }\r\n  }, [profileDetails]);\r\n\r\n  const [education, setEducation] = useState([\r\n    {\r\n      institutionName: \"\",\r\n      startYear: \"\",\r\n      endYear: \"\",\r\n    },\r\n  ]);\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        if (response.data.education.length > 0) {\r\n          setEducation(\r\n            response.data.education.map((edu) => ({\r\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\r\n              startYear: edu.startYear ? edu.startYear : \"\",\r\n              endYear: edu.endYear ? edu.endYear : \"\",\r\n            }))\r\n          );\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        // setPopup({\r\n        //   open: true,\r\n        //   severity: \"error\",\r\n        //   message: \"Error\",\r\n        // });\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const editDetails = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    console.log(education);\r\n\r\n    let updatedDetails = {\r\n      ...profileDetails,\r\n      education: education\r\n        .filter((obj) => obj.institutionName.trim() !== \"\")\r\n        .map((obj) => {\r\n          if (obj[\"endYear\"] === \"\") {\r\n            delete obj[\"endYear\"];\r\n          }\r\n          return obj;\r\n        }),\r\n    };\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        // setPopup({\r\n        //     open: true,\r\n        //     severity: \"error\",\r\n        //     message: err.response.data.message,\r\n        // });\r\n        console.log(err.response);\r\n      });\r\n    setOpen(false);\r\n  };\r\n  const companyName = \"Open to Work\";\r\n  const startDate = \"11/11/2022\";\r\n  const endDate = \"30/12/2023\";\r\n  const jobTitle = \"Frontend Developer\";\r\n  const department = \"Designer Department\";\r\n  let firstName = \"Junaid\";\r\n  let lastName = \"Shaikh\";\r\n  let emailAddress = \"avinash@gmail.com\";\r\n  let phoneNo = 8850094860;\r\n  let profileLink =\r\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Google_%22G%22_logo.svg/1024px-Google_%22G%22_logo.svg.png\";\r\n\r\n  // Projects Details\r\n  const projectDetails = {\r\n    projectName: \"Worko\",\r\n    projectClientName: \"Google\",\r\n    projectStartDate: \"Dec 2023\",\r\n    projectEndDate: \"Present\",\r\n    projectDescription:\r\n      \"Welcome to the Todoster Web Application! This simple and user-friendly application helps you manage your tasks and stay organized. This README will provide you with all the information you need to get started, including features and more\",\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid container className=\"w-9/12 my-5\">\r\n        <Grid>\r\n          <Paper item elevation={0} style={{ background: \"transparent\" }}>\r\n            <Grid className=\"flex justify-between bg-transparent\">\r\n              <Grid item className=\"flex flex-cols py-10\">\r\n                <div className=\"w-40 flex justify-items-center mr-5\">\r\n                  <img\r\n                    className=\"w-40 h-40 p-1 rounded-full ring-2 ring-gray-300 dark:ring-gray-500 object-cover\"\r\n                    src={profileDetails.profile}\r\n                    alt=\"Bordered avatar\"\r\n                  />\r\n                </div>\r\n                <div className=\"flex flex-col mt-5\">\r\n                  <h1 className=\"cardTitle\">{profileDetails.name}</h1>\r\n                  <h3 className=\"cardSubTitle\">{companyName}</h3>\r\n                  <div>\r\n                    <a href=\"\" className=\"text-black\">\r\n                      <i className=\"fa-solid fa-globe m-1\"></i>\r\n                    </a>\r\n                    <a href=\"\" className=\"text-blue-600\">\r\n                      <i className=\"fa-brands fa-linkedin m-1\"></i>\r\n                    </a>\r\n                    <a href=\"\" className=\"text-black\">\r\n                      <i className=\"fa-brands fa-x-twitter m-1\"></i>\r\n                    </a>\r\n                    <a href=\"\" className=\"text-red-400\">\r\n                      <i className=\"fa-brands fa-instagram m-1\"></i>\r\n                    </a>\r\n                  </div>\r\n                </div>\r\n              </Grid>\r\n              <Grid item className=\"grid content-center\">\r\n                <Button className=\"primaryButton h-10\" onClick={editDetails}>\r\n                  {\" \"}\r\n                  Edit Profile\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid className=\"w-full bg-white py-5 px-10 rounded-lg\">\r\n              {/* About Card */}\r\n              <Grid className=\"profileCards\">\r\n                <Grid item className=\"profileCardsHeader\">\r\n                  <Typography className=\"profileCardsHeading\">\r\n                    About Me\r\n                  </Typography>\r\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\r\n                    {/* <i className=\"fa-solid fa-pen\"></i> */}\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid xs className=\"profileCardsFooter\">\r\n                  {\" \"}\r\n                  {profileDetails.aboutme}\r\n                </Grid>\r\n              </Grid>\r\n              {/* Personal Card */}\r\n              <Grid className=\"profileCards\">\r\n                <Grid item className=\"profileCardsHeader\">\r\n                  <Typography className=\"profileCardsHeading\">\r\n                    {\" \"}\r\n                    Personal Information{\" \"}\r\n                  </Typography>\r\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\r\n                    {\" \"}\r\n                    {/* <i className=\"fa-solid fa-pen\"></i>{\" \"} */}\r\n                  </Grid>\r\n                </Grid>\r\n                <div className=\"flex my-5 \">\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    {\" \"}\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Full Name\r\n                    </Typography>{\" \"}\r\n                    <Typography className=\"profileCardsFooter\">\r\n                      {profileDetails.name}\r\n                    </Typography>\r\n                  </Grid>\r\n                  {/* <Grid xs className=\"flex flex-col mr-10\">\r\n                    {\" \"}\r\n                    <Typography className=\"profileCardsFooter\">\r\n                      Last Name\r\n                    </Typography>{\" \"}\r\n                    <Typography className=\"profileCardsFooter\">\r\n                      Payne\r\n                    </Typography>\r\n                  </Grid> */}\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    {\" \"}\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Email Address\r\n                    </Typography>{\" \"}\r\n                    <Typography className=\"profileCardsFooter\">\r\n                      {profileDetails.email}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    {\" \"}\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Phone\r\n                    </Typography>{\" \"}\r\n                    <Typography className=\"profileCardsFooter\">\r\n                      {profileDetails.phone}\r\n                    </Typography>\r\n                  </Grid>\r\n                </div>\r\n              </Grid>\r\n              {/* Skills Card */}\r\n              <Grid className=\"profileCards\">\r\n                <Grid item className=\"profileCardsHeader\">\r\n                  <Typography className=\"profileCardsHeading\">\r\n                    Skills\r\n                  </Typography>\r\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\r\n                    {/* <i className=\"fa-solid fa-pen\"></i> */}\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item className=\"flex\">\r\n                  {profileDetails.skills.map((skillList) => (\r\n                    <span className=\" profileCardsSkills\"> {skillList} </span>\r\n                  ))}\r\n                </Grid>\r\n              </Grid>\r\n              {/* Eduction Card */}\r\n              <Grid className=\"profileCards\">\r\n                {/* Header of the card */}\r\n                <Grid item className=\"profileCardsHeader\">\r\n                  <Typography className=\"profileCardsHeading\">\r\n                    Education\r\n                  </Typography>\r\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\r\n                    <i className=\"fa-solid fa-pen\"></i>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* Main body of the card */}\r\n                <Grid className=\"flex justify-between\">\r\n                  {education.map((college) => {\r\n                    return (\r\n                      <>\r\n                        <div className=\"profileCardsSubHeading\">\r\n                          <span>{college.institutionName}</span>\r\n                          {/* <span> Information Technology</span> */}\r\n                        </div>\r\n                        <div className=\"flex justify-end\">\r\n                          <span>{college.startYear}</span>\r\n                          <span> - </span>\r\n                          <span>{college.endYear}</span>\r\n                        </div>\r\n                      </>\r\n                    );\r\n                  })}\r\n                </Grid>\r\n              </Grid>\r\n              {/* Project Card */}\r\n              <Grid item className=\"profileCards\">\r\n                {/* Header of the card */}\r\n                <Grid item sm className=\"profileCardsHeader\">\r\n                  <Typography className=\"profileCardsHeading\">\r\n                    Improvements\r\n                  </Typography>\r\n                </Grid>\r\n                <>\r\n                  <Grid className=\"text-xl mb-2\">\r\n                    You are best fitted for{\" \"}\r\n                    <span className=\"font-bold\">\r\n                      {bestFitListing?.job_name}\r\n                    </span>{\" \"}\r\n                    roles\r\n                  </Grid>\r\n                  <Grid item sm className=\"profileCardsSubHeading \">\r\n                    <span className=\"ml-3\">\r\n                      {bestFitListing?.recommendations}\r\n                    </span>\r\n                  </Grid>\r\n                </>\r\n                {/* Main body of the card */}\r\n              </Grid>\r\n              <Grid item className=\"profileCards\">\r\n                <Grid\r\n                  item\r\n                  sm\r\n                  className=\"profileCardsSubHeading\"\r\n                  style={{ margin: \"0px\", fontSize: \"17px\" }}\r\n                >\r\n                  <span>{projectDetails.projectName}</span>\r\n                </Grid>\r\n                <Grid item sm className=\"profileCardsSubHeading\">\r\n                  <span>{projectDetails.projectClientName}</span>\r\n                </Grid>\r\n                <Grid item sm className=\"profileCardsSubPara\">\r\n                  <span>{projectDetails.projectStartDate}</span>\r\n                  {\" to \"}\r\n                  <span>{projectDetails.projectEndDate}</span>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  sm\r\n                  className=\"profileCardsSubHeading\"\r\n                  style={{ marginTop: \"5px\" }}\r\n                >\r\n                  <span>{projectDetails.projectDescription}</span>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          alignItems=\"center\"\r\n          style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n        >\r\n          <Grid item>\r\n            <Typography variant=\"h2\">Profile</Typography>\r\n          </Grid>\r\n          <Grid item xs>\r\n            <Paper\r\n              style={{\r\n                padding: \"20px\",\r\n                outline: \"none\",\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"stretch\"\r\n                spacing={3}\r\n              >\r\n                <Grid item className=\"flex \">\r\n                  <TextField\r\n                    label=\"Name\"\r\n                    value={profileDetails.name}\r\n                    onChange={(event) =>\r\n                      handleInput(\"name\", event.target.value)\r\n                    }\r\n                    className={classes.inputBox}\r\n                    variant=\"outlined\"\r\n                  />\r\n\r\n                  <TextField\r\n                    label=\"Surename\"\r\n                    // className=\"\"\r\n                    value={profileDetails.sname}\r\n                    onChange={(event) =>\r\n                      handleInput(\"Surename\", event.target.value)\r\n                    }\r\n                    className={(classes.inputBox, \"mx-10\")}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item className=\"flex \">\r\n                  <TextField\r\n                    label=\"email\"\r\n                    value={profileDetails.email}\r\n                    onChange={(event) =>\r\n                      handleInput(\"email\", event.target.value)\r\n                    }\r\n                    className={classes.inputBox}\r\n                    variant=\"outlined\"\r\n                  />\r\n                  {/* <div></div> */}\r\n                  <TextField\r\n                    label=\"phone\"\r\n                    // className=\"\"\r\n                    value={profileDetails.phone}\r\n                    onChange={(event) =>\r\n                      handleInput(\"phone\", event.target.value)\r\n                    }\r\n                    className={(classes.inputBox, \"mx-10\")}\r\n                    variant=\"outlined\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <TextField\r\n                    className={classes.inputBox}\r\n                    label=\"About Yourself\"\r\n                    placeholder=\"Write a brief description about yourself...\"\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    rows={4}\r\n                    fullWidth\r\n                    value={profileDetails.about}\r\n                    onChange={(e) =>\r\n                      setProfileDetails((prevState) => ({\r\n                        ...prevState,\r\n                        about: e.target.value,\r\n                      }))\r\n                    }\r\n                  />\r\n                </Grid>\r\n\r\n                <MultifieldInput\r\n                  education={education}\r\n                  setEducation={setEducation}\r\n                />\r\n\r\n                {/* <MultifieldInput\r\n                  experience={experience}\r\n                  setExperience={setExperience}\r\n                /> */}\r\n                <Grid item>\r\n                  <TextField\r\n                    className={classes.inputBox}\r\n                    label=\"Skills\"\r\n                    variant=\"outlined\"\r\n                    helperText=\"Press Enter to add skills\"\r\n                    fullWidth\r\n                    onKeyDown={(e) => {\r\n                      if (e.key === \"Enter\" && e.target.value.trim() !== \"\") {\r\n                        e.preventDefault(); // Prevent form submission\r\n                        setProfileDetails((prevState) => ({\r\n                          ...prevState,\r\n                          skills: [...prevState.skills, e.target.value.trim()],\r\n                        }));\r\n                        e.target.value = \"\"; // Clear input field\r\n                      }\r\n                    }}\r\n                  />\r\n\r\n                  <div\r\n                    style={{\r\n                      marginTop: \"8px\",\r\n                      display: \"flex\",\r\n                      flexWrap: \"wrap\",\r\n                      gap: \"8px\",\r\n                      outline: \"none\",\r\n                    }}\r\n                  >\r\n                    {profileDetails.skills.map((skill, index) => (\r\n                      <Chip\r\n                        key={index}\r\n                        label={skill}\r\n                        onDelete={() => {\r\n                          setProfileDetails((prevState) => ({\r\n                            ...prevState,\r\n                            skills: prevState.skills.filter(\r\n                              (_, i) => i !== index\r\n                            ),\r\n                          }));\r\n                        }}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </Grid>\r\n\r\n                <Grid className=\"flex\">\r\n                  <FileUploadInput\r\n                    className={classes.inputBox}\r\n                    label=\"Resume (.pdf)\"\r\n                    icon={<DescriptionIcon />}\r\n                    uploadTo={apiList.uploadResume}\r\n                    handleInput={handleInput}\r\n                    identifier={\"resume\"}\r\n                    profileDetails={profileDetails}\r\n                  />\r\n                  <FileUploadInput\r\n                    className={classes.inputBox}\r\n                    label=\"Profile Photo (.jpg/.png)\"\r\n                    icon={<FaceIcon />}\r\n                    uploadTo={apiList.uploadProfileImage}\r\n                    handleInput={handleInput}\r\n                    identifier={\"profile\"}\r\n                    profileDetails={profileDetails}\r\n                  />\r\n                </Grid>\r\n                {/* <Grid item></Grid> */}\r\n              </Grid>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\r\n                onClick={() => handleUpdate()}\r\n              >\r\n                Update Details\r\n              </Button>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\isAuth.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\MessagePopup.js",["169"],"import { Snackbar, Slide } from \"@material-ui/core\";\r\nimport { Alert } from \"@material-ui/lab\";\r\n\r\nconst MessagePopup = (props) => {\r\n  const handleClose = (event, reason) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    props.setOpen(false);\r\n  };\r\n  return (\r\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\r\n      <Alert onClose={handleClose} severity={props.severity}>\r\n        {props.message}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n\r\nexport default MessagePopup;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\MyJobs.js",["170","171","172","173","174","175","176","177"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Box,\r\n} from \"@material-ui/core\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport Pagination from \"@material-ui/lab/Pagination\";\r\nimport axios from \"axios\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  button: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n}));\r\n\r\nconst JobTile = (props) => {\r\n  const classes = useStyles();\r\n  let history = useHistory();\r\n  const { job, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [openUpdate, setOpenUpdate] = useState(false);\r\n  const [jobDetails, setJobDetails] = useState(job);\r\n\r\n  console.log(jobDetails);\r\n\r\n  const handleInput = (key, value) => {\r\n    setJobDetails({\r\n      ...jobDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  const handleClick = (location) => {\r\n    history.push(location);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseUpdate = () => {\r\n    setOpenUpdate(false);\r\n  };\r\n\r\n  const handleDelete = () => {\r\n    console.log(job._id);\r\n    axios\r\n      .delete(`${apiList.jobs}/${job._id}`, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleClose();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleClose();\r\n      });\r\n  };\r\n\r\n  const handleJobUpdate = () => {\r\n    axios\r\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n        handleCloseUpdate();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        handleCloseUpdate();\r\n      });\r\n  };\r\n\r\n  const postedOn = new Date(job.dateOfPosting);\r\n  // console.log(\"Workiiiiiing\");\r\n  // console.log(jobTileOuter);\r\n  // const cname = handleJobUpdate;\r\n\r\n  console.log(\"Company Name \" + job.companyName);\r\n  return (\r\n    <Paper\r\n      class=\"w-6/12 shadow-md my-2 py-5 px-3 rounded-md\"\r\n      className={classes.jobTileOuter}\r\n    >\r\n      <Grid>\r\n        <Grid>\r\n          <Grid item>\r\n            <Typography class=\"font-medium text-xl text-black\">\r\n              {job.title}\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid class=\"cardSubTitle\">\r\n            <span class=\"\">\r\n              {\" \"}\r\n              <i class=\"fa-solid fa-location-dot \"> </i> {job.address}{\" \"}\r\n            </span>\r\n            <span class=\"\">\r\n              <i class=\"fa-solid fa-building\"></i> {job.companyName}\r\n            </span>\r\n          </Grid>\r\n\r\n          {/* <Grid item>\r\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\r\n          </Grid> */}\r\n\r\n          <Grid class=\"cardSubTitle\">\r\n            <span>\r\n              {\" \"}\r\n              <i class=\"fa-solid fa-child\"></i> {job.jobType}{\" \"}\r\n            </span>\r\n            <span>\r\n              {\" \"}\r\n              <i class=\"fa-solid fa-indian-rupee-sign\"></i> {job.salary} per\r\n              month{\" \"}\r\n            </span>\r\n            <span item>\r\n              <i class=\"fa-solid fa-timeline\"></i>{\" \"}\r\n              {job.duration !== 0 ? `${job.duration} month` : `Flexible`}{\" \"}\r\n              <i class=\"fa-solid fa-timer\"></i>\r\n            </span>\r\n          </Grid>\r\n\r\n          <Grid class=\"cardSubTitle my-5\">\r\n            <span> Number of Applicants: {job.maxApplicants} </span> {\"       \"}\r\n            <span item>\r\n              {\" \"}\r\n              Remaining Number of Positions:{\" \"}\r\n              {job.maxPositions - job.acceptedCandidates}{\" \"}\r\n            </span>\r\n          </Grid>\r\n          <Grid class=\"cardSubTitle\" item>\r\n            Date Of Posting: {postedOn.toLocaleDateString()}\r\n          </Grid>\r\n\r\n          <Grid item xs class=\"flex my-5\">\r\n            <Grid class=\"flex justify-items-start w-6/12\">\r\n              <Button\r\n                class=\"w-auto\"\r\n                className={classes.statusBlock}\r\n                onClick={() => handleClick(`/job/applications/${job._id}`)}\r\n              >\r\n                View Applications\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs class=\"flex w-6/12 justify-evenly\">\r\n              <Button\r\n                class=\"\"\r\n                className={classes.statusBlock}\r\n                onClick={() => {\r\n                  setOpenUpdate(true);\r\n                }}\r\n              >\r\n                Edit\r\n              </Button>\r\n              <Button\r\n                class=\"\"\r\n                className={classes.statusBlock}\r\n                onClick={() => {\r\n                  setOpen(true);\r\n                }}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleDelete()}\r\n              >\r\n                Delete\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleClose()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openUpdate}\r\n        onClose={handleCloseUpdate}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Update Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            spacing={3}\r\n            style={{ margin: \"10px\" }}\r\n          >\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Application Deadline\"\r\n                type=\"datetime-local\"\r\n                value={jobDetails.deadline.substr(0, 16)}\r\n                onChange={(event) => {\r\n                  handleInput(\"deadline\", event.target.value);\r\n                }}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                variant=\"outlined\"\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Maximum Number Of Applicants\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxApplicants}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxApplicants\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <TextField\r\n                label=\"Positions Available\"\r\n                type=\"number\"\r\n                variant=\"outlined\"\r\n                value={jobDetails.maxPositions}\r\n                onChange={(event) => {\r\n                  handleInput(\"maxPositions\", event.target.value);\r\n                }}\r\n                InputProps={{ inputProps: { min: 1 } }}\r\n                fullWidth\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleJobUpdate()}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseUpdate()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Job Type\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"fullTime\"\r\n                      checked={searchOptions.jobType.fullTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Full Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"partTime\"\r\n                      checked={searchOptions.jobType.partTime}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Part Time\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"wfh\"\r\n                      checked={searchOptions.jobType.wfh}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          jobType: {\r\n                            ...searchOptions.jobType,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Work From Home\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Salary\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <Slider\r\n                valueLabelDisplay=\"auto\"\r\n                valueLabelFormat={(value) => {\r\n                  return value * (100000 / 100);\r\n                }}\r\n                marks={[\r\n                  { value: 0, label: \"0\" },\r\n                  { value: 100, label: \"100000\" },\r\n                ]}\r\n                value={searchOptions.salary}\r\n                onChange={(event, value) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    salary: value,\r\n                  })\r\n                }\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Duration\r\n            </Grid>\r\n            <Grid item xs={9}>\r\n              <TextField\r\n                select\r\n                label=\"Duration\"\r\n                variant=\"outlined\"\r\n                fullWidth\r\n                value={searchOptions.duration}\r\n                onChange={(event) =>\r\n                  setSearchOptions({\r\n                    ...searchOptions,\r\n                    duration: event.target.value,\r\n                  })\r\n                }\r\n              >\r\n                <MenuItem value=\"0\">All</MenuItem>\r\n                <MenuItem value=\"1\">1</MenuItem>\r\n                <MenuItem value=\"2\">2</MenuItem>\r\n                <MenuItem value=\"3\">3</MenuItem>\r\n                <MenuItem value=\"4\">4</MenuItem>\r\n                <MenuItem value=\"5\">5</MenuItem>\r\n                <MenuItem value=\"6\">6</MenuItem>\r\n                <MenuItem value=\"7\">7</MenuItem>\r\n              </TextField>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"salary\"\r\n                    checked={searchOptions.sort.salary.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"salary\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"salary\">\r\n                    <Typography>Salary</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.salary.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          salary: {\r\n                            ...searchOptions.sort.salary,\r\n                            desc: !searchOptions.sort.salary.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.salary.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"duration\"\r\n                    checked={searchOptions.sort.duration.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"duration\">\r\n                    <Typography>Duration </Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.duration.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          duration: {\r\n                            ...searchOptions.sort.duration,\r\n                            desc: !searchOptions.sort.duration.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.duration.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort.rating.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.rating.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          rating: {\r\n                            ...searchOptions.sort.rating,\r\n                            desc: !searchOptions.sort.rating.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.rating.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst MyJobs = (props) => {\r\n  const [jobs, setJobs] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    query: \"\",\r\n    jobType: {\r\n      fullTime: false,\r\n      partTime: false,\r\n      wfh: false,\r\n    },\r\n    salary: [0, 100],\r\n    duration: \"0\",\r\n    sort: {\r\n      salary: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      duration: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      rating: {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  const setPopup = useContext(SetPopupContext);\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [`myjobs=1`];\r\n    if (searchOptions.query !== \"\") {\r\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\r\n    }\r\n    if (searchOptions.jobType.fullTime) {\r\n      searchParams = [...searchParams, `jobType=Full%20Time`];\r\n    }\r\n    if (searchOptions.jobType.partTime) {\r\n      searchParams = [...searchParams, `jobType=Part%20Time`];\r\n    }\r\n    if (searchOptions.jobType.wfh) {\r\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\r\n    }\r\n    if (searchOptions.salary[0] != 0) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.salary[1] != 100) {\r\n      searchParams = [\r\n        ...searchParams,\r\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\r\n      ];\r\n    }\r\n    if (searchOptions.duration != \"0\") {\r\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = apiList.jobs;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setJobs(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        class=\"mainGridContainer\"\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          {/* <Grid item xs>\r\n\r\n          </Grid> */}\r\n          <Grid item xs>\r\n            <TextField\r\n              label=\"Search Jobs\"\r\n              value={searchOptions.query}\r\n              onChange={(event) =>\r\n                setSearchOptions({\r\n                  ...searchOptions,\r\n                  query: event.target.value,\r\n                })\r\n              }\r\n              onKeyPress={(ev) => {\r\n                if (ev.key === \"Enter\") {\r\n                  getData();\r\n                }\r\n              }}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment>\r\n                    <IconButton onClick={() => getData()}>\r\n                      <SearchIcon />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n              style={{ width: \"100vw\" }}\r\n              variant=\"outlined\"\r\n            />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            // style={{\r\n            //   display: \"flex\",\r\n            //   justifyContent: \"space-between\",\r\n            //   width: \"100%\",\r\n            //   alignItems: \"center\",\r\n            //   margin: \"2rem 0\",\r\n            // }}\r\n            className=\"flex justify-between  w-full items-center mx-8\"\r\n          >\r\n            <Typography>Manage Postings </Typography>\r\n            <IconButton class=\"p-1\" onClick={() => setFilterOpen(true)}>\r\n              <Typography>Filter</Typography>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Box class=\"boxOfContent\">\r\n          <Grid direction=\"column\" alignItems=\"stretch\" justify=\"center\">\r\n            {jobs.length > 0 ? (\r\n              jobs.map((job) => {\r\n                return <JobTile job={job} getData={getData} class=\"Hello\" />;\r\n              })\r\n            ) : (\r\n              <Typography\r\n                variant=\"h5\"\r\n                style={{ textAlign: \"center\", justifyContent: \"center\" }}\r\n              >\r\n                No jobs found\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n        </Box>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MyJobs;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\JobApplications.js",["178","179","180"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  // InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  // TextField,\r\n  Typography,\r\n  Modal,\r\n  // Slider,\r\n  FormControlLabel,\r\n  // FormGroup,\r\n  // MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfApplication\"\r\n                    checked={searchOptions.sort.dateOfApplication.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfApplication\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfApplication\">\r\n                    <Typography>Date of Application</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfApplication.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfApplication: {\r\n                            ...searchOptions.sort.dateOfApplication,\r\n                            desc: !searchOptions.sort.dateOfApplication.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfApplication.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={4}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              class=\"applyBtn\"\r\n              // style={{ }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n  const [resumeAnalysis, setResumeAnalysis] = useState(null);\r\n  const getResumeAnalysis = () => {\r\n    axios\r\n      .post(apiList.resumeparse, {\r\n        resume_url: application?.jobApplicant?.resume,\r\n      })\r\n      .then((response) => {\r\n        const bestFitListing = response?.data?.reduce((prevJob, currentJob) => {\r\n          return currentJob.fit_score > prevJob.fit_score\r\n            ? currentJob\r\n            : prevJob;\r\n        }, response?.data[0]);\r\n        setResumeAnalysis(bestFitListing);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (application?.jobApplicant?.resume) {\r\n      getResumeAnalysis();\r\n    }\r\n  }, []);\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${server}${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      axios(address, {\r\n        method: \"GET\",\r\n        responseType: \"blob\",\r\n      })\r\n        .then((response) => {\r\n          const file = new Blob([response.data], {\r\n            type: \"application/pdf\",\r\n          });\r\n          const fileURL = URL.createObjectURL(file);\r\n          window.open(fileURL);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error\",\r\n          });\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n      userId: application.jobApplicant.userId,\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n      });\r\n  };\r\n\r\n  const buttonSet = {\r\n    applied: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"shortlisted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"shortlisted\")}\r\n          >\r\n            Shortlist\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    shortlisted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"accepted\")}\r\n          >\r\n            Accept\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Button\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n            onClick={() => updateStatus(\"rejected\")}\r\n          >\r\n            Reject\r\n          </Button>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    rejected: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"rejected\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Rejected\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    accepted: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"accepted\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Accepted\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    cancelled: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"cancelled\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Cancelled\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n    finished: (\r\n      <>\r\n        <Grid item xs>\r\n          <Paper\r\n            className={classes.statusBlock}\r\n            style={{\r\n              background: colorSet[\"finished\"],\r\n              color: \"#ffffff\",\r\n            }}\r\n          >\r\n            Finished\r\n          </Paper>\r\n        </Grid>\r\n      </>\r\n    ),\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            Education:{\" \"}\r\n            {application.jobApplicant.education\r\n              .map((edu) => {\r\n                return `${edu.institutionName} (${edu.startYear}-${\r\n                  edu.endYear ? edu.endYear : \"Ongoing\"\r\n                })`;\r\n              })\r\n              .join(\", \")}\r\n          </Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            Job fit score:{\" \"}\r\n            <span className=\"font-semibold\">{resumeAnalysis?.fit_score}</span>\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              // onClick={() => getResume()}\r\n            >\r\n              <a\r\n                style={{\r\n                  textDecoration: \"none\",\r\n                  color: \"white\",\r\n                }}\r\n                className={classes.statusBlock}\r\n                href={application.jobApplicant.resume}\r\n                download\r\n              >\r\n                Download Resume\r\n              </a>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs>\r\n            {buttonSet[application.status]}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            // onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst JobApplications = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const { jobId } = useParams();\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    status: {\r\n      all: false,\r\n      applied: false,\r\n      shortlisted: false,\r\n    },\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfApplication: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n\r\n    if (searchOptions.status.rejected) {\r\n      searchParams = [...searchParams, `status=rejected`];\r\n    }\r\n    if (searchOptions.status.applied) {\r\n      searchParams = [...searchParams, `status=applied`];\r\n    }\r\n    if (searchOptions.status.shortlisted) {\r\n      searchParams = [...searchParams, `status=shortlisted`];\r\n    }\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}?jobId=${jobId}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}&${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        item\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Applications </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <IconButton onClick={() => setFilterOpen(true)}>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          item\r\n          xs\r\n          direction=\"column\"\r\n          style={{ width: \"100%\" }}\r\n          alignItems=\"stretch\"\r\n          justify=\"center\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JobApplications;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\Profile.js",["181","182","183","184","185","186","187","188","189","190","191"],"import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  makeStyles,\r\n  Modal,\r\n  TextField,\r\n  Chip,\r\n  MultifieldInput,\r\n  FileUploadInput,\r\n  // DescriptionIcon,\r\n} from \"@material-ui/core\";\r\nimport axios from \"axios\";\r\nimport { SetPopupContext } from \"../../App\";\r\nimport apiList from \"../../lib/apiList\";\r\nimport { CiFaceSmile } from \"react-icons/ci\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n}));\r\n\r\nconst Profile = (props) => {\r\n  const [open, setOpen] = useState(false);\r\n  const classes = useStyles();\r\n  const setPopup = useContext(SetPopupContext);\r\n\r\n  const [profileDetails, setProfileDetails] = useState({\r\n    name: \"\",\r\n    surname: \"\",\r\n    email: \"\",\r\n    phone: \"\",\r\n    aboutMe: \"\",\r\n    experience: \"\",\r\n    contactNumber: \"\",\r\n    bio: \"\",\r\n    companyName: \"\",\r\n    socialMedia: [],\r\n  });\r\n\r\n  const [phone, setPhone] = useState(\"\");\r\n  console.log(\"🚀 ~ Profile ~ profileDetails:\", profileDetails);\r\n\r\n  const handleInput = (key, value) => {\r\n    setProfileDetails({\r\n      ...profileDetails,\r\n      [key]: value,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    axios\r\n      .get(apiList.user, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setProfileDetails(response.data);\r\n        setPhone(response.data.contactNumber);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: \"Error fetching profile details\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    const updatedDetails = {\r\n      ...profileDetails,\r\n      contactNumber: phone ? `+${phone}` : \"\",\r\n    };\r\n\r\n    axios\r\n      .put(apiList.user, updatedDetails, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  const editDetails = () => {\r\n    setOpen(true);\r\n  };\r\n  return (\r\n    <>\r\n      <Grid container className=\"mainGridContainer\">\r\n        <Grid style={{ width: \"100%\", padding: \"10px 100px\" }}>\r\n          <Paper className=\"w-full\">\r\n            <Grid className=\"flex flex-cols bg-slate-400 py-10\">\r\n              <div className=\"w-20 flex justify-items-center mr-5 ml-10\">\r\n                <img\r\n                  className=\"w-12/12 h-6/12 rounded-full\"\r\n                  src={profileDetails.profileLink || \"\"}\r\n                  alt=\"Profile\"\r\n                />\r\n              </div>\r\n              <div className=\"flex flex-col\">\r\n                <h1 className=\"cardTitle\">\r\n                  {profileDetails.name} {profileDetails.surname}\r\n                </h1>\r\n                <h3 className=\"cardSubTitle\">Recruiter</h3>\r\n              </div>\r\n            </Grid>\r\n            <Grid item className=\"grid content-center\">\r\n              <div className=\"grid justify-end items-start\">\r\n                <Button class=\"primaryButton h-10\" onClick={editDetails}>\r\n                  {\" \"}\r\n                  Edit Profile\r\n                </Button>\r\n              </div>\r\n            </Grid>\r\n            <Grid className=\"w-full bg-white py-5 px-10 rounded-lg\">\r\n              <Grid className=\"personalSection\">\r\n                <Typography>Personal Information</Typography>\r\n                <div className=\"flex my-5\">\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Full Name\r\n                    </Typography>\r\n                    <Typography className=\"profileSectionUserDetail\">\r\n                      {profileDetails.name} {profileDetails.surname}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Email Address\r\n                    </Typography>\r\n                    <Typography className=\"profileSectionUserDetail\">\r\n                      {profileDetails.email}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Phone\r\n                    </Typography>\r\n                    <Typography className=\"profileSectionUserDetail\">\r\n                      {profileDetails.contactNumber}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      About Me\r\n                    </Typography>\r\n                    <Typography className=\"profileSectionUserDetail\">\r\n                      {profileDetails.aboutMe}\r\n                    </Typography>\r\n                  </Grid>\r\n                </div>\r\n              </Grid>\r\n              <Grid className=\"personalSection\">\r\n                <Typography>Employment Details</Typography>\r\n                <div className=\"flex my-5\">\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Experience\r\n                    </Typography>\r\n                    <Typography className=\"profileSectionUserDetail\">\r\n                      {profileDetails.experience}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid xs className=\"flex flex-col mr-10\">\r\n                    <Typography className=\"profileSectionHeaderList\">\r\n                      Company Name\r\n                    </Typography>\r\n                    <Typography className=\"profileSectionUserDetail\">\r\n                      {profileDetails.companyName}\r\n                    </Typography>\r\n                  </Grid>\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Model  */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\recruiter\\AcceptedApplicants.js",["192","193","194","195","196","197","198","199","200","201"],"import { useState, useEffect, useContext } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Grid,\r\n  IconButton,\r\n  InputAdornment,\r\n  makeStyles,\r\n  Paper,\r\n  TextField,\r\n  Typography,\r\n  Modal,\r\n  Slider,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  MenuItem,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@material-ui/core\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport Rating from \"@material-ui/lab/Rating\";\r\nimport axios from \"axios\";\r\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\nimport { SetPopupContext } from \"../../App\";\r\n\r\nimport apiList, { server } from \"../../lib/apiList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  body: {\r\n    height: \"inherit\",\r\n  },\r\n  statusBlock: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    textTransform: \"uppercase\",\r\n  },\r\n  jobTileOuter: {\r\n    padding: \"30px\",\r\n    margin: \"20px 0\",\r\n    boxSizing: \"border-box\",\r\n    width: \"100%\",\r\n  },\r\n  popupDialog: {\r\n    height: \"100%\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  avatar: {\r\n    width: theme.spacing(17),\r\n    height: theme.spacing(17),\r\n  },\r\n}));\r\n\r\nconst FilterPopup = (props) => {\r\n  const classes = useStyles();\r\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\r\n  return (\r\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n      <Paper\r\n        style={{\r\n          padding: \"50px\",\r\n          outline: \"none\",\r\n          minWidth: \"50%\",\r\n        }}\r\n      >\r\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\r\n          {/* <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Application Status\r\n            </Grid>\r\n            <Grid\r\n              container\r\n              item\r\n              xs={9}\r\n              justify=\"space-around\"\r\n              // alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"rejected\"\r\n                      checked={searchOptions.status.rejected}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Rejected\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"applied\"\r\n                      checked={searchOptions.status.applied}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Applied\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      name=\"shortlisted\"\r\n                      checked={searchOptions.status.shortlisted}\r\n                      onChange={(event) => {\r\n                        setSearchOptions({\r\n                          ...searchOptions,\r\n                          status: {\r\n                            ...searchOptions.status,\r\n                            [event.target.name]: event.target.checked,\r\n                          },\r\n                        });\r\n                      }}\r\n                    />\r\n                  }\r\n                  label=\"Shortlisted\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid> */}\r\n          <Grid container item alignItems=\"center\">\r\n            <Grid item xs={3}>\r\n              Sort\r\n            </Grid>\r\n            <Grid item container direction=\"row\" xs={9}>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"name\"\r\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"name\">\r\n                    <Typography>Name</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.name\": {\r\n                            ...searchOptions.sort[\"jobApplicant.name\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"jobTitle\"\r\n                    checked={searchOptions.sort[\"job.title\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"jobTitle\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"jobTitle\">\r\n                    <Typography>Job Title</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"job.title\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"job.title\": {\r\n                            ...searchOptions.sort[\"job.title\"],\r\n                            desc: !searchOptions.sort[\"job.title\"].desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"job.title\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"dateOfJoining\"\r\n                    checked={searchOptions.sort.dateOfJoining.status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"dateOfJoining\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"dateOfJoining\">\r\n                    <Typography>Date of Joining</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort.dateOfJoining.status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          dateOfJoining: {\r\n                            ...searchOptions.sort.dateOfJoining,\r\n                            desc: !searchOptions.sort.dateOfJoining.desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort.dateOfJoining.desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                item\r\n                container\r\n                xs={6}\r\n                justify=\"space-around\"\r\n                alignItems=\"center\"\r\n                style={{\r\n                  border: \"1px solid #D1D1D1\",\r\n                  borderRadius: \"5px\",\r\n                }}\r\n              >\r\n                <Grid item>\r\n                  <Checkbox\r\n                    name=\"rating\"\r\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onChange={(event) =>\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\r\n                            status: event.target.checked,\r\n                          },\r\n                        },\r\n                      })\r\n                    }\r\n                    id=\"rating\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <label for=\"rating\">\r\n                    <Typography>Rating</Typography>\r\n                  </label>\r\n                </Grid>\r\n                <Grid item>\r\n                  <IconButton\r\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\r\n                    onClick={() => {\r\n                      setSearchOptions({\r\n                        ...searchOptions,\r\n                        sort: {\r\n                          ...searchOptions.sort,\r\n                          \"jobApplicant.rating\": {\r\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\r\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\r\n                              .desc,\r\n                          },\r\n                        },\r\n                      });\r\n                    }}\r\n                  >\r\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\r\n                      <ArrowDownwardIcon />\r\n                    ) : (\r\n                      <ArrowUpwardIcon />\r\n                    )}\r\n                  </IconButton>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              style={{ padding: \"10px 50px\" }}\r\n              onClick={() => getData()}\r\n            >\r\n              Apply\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ApplicationTile = (props) => {\r\n  const classes = useStyles();\r\n  const { application, getData } = props;\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [open, setOpen] = useState(false);\r\n  const [openEndJob, setOpenEndJob] = useState(false);\r\n  const [rating, setRating] = useState(application.jobApplicant.rating);\r\n\r\n  const appliedOn = new Date(application.dateOfApplication);\r\n\r\n  const changeRating = () => {\r\n    axios\r\n      .put(\r\n        apiList.rating,\r\n        {\r\n          rating: rating,\r\n          applicantId: application.jobApplicant.userId,\r\n        },\r\n        {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n        }\r\n      )\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: \"Rating updated successfully\",\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      })\r\n      .catch((err) => {\r\n        // console.log(err.response);\r\n        console.log(err);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        // fetchRating();\r\n        getData();\r\n        setOpen(false);\r\n      });\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleCloseEndJob = () => {\r\n    setOpenEndJob(false);\r\n  };\r\n\r\n  const colorSet = {\r\n    applied: \"#3454D1\",\r\n    shortlisted: \"#DC851F\",\r\n    accepted: \"#09BC8A\",\r\n    rejected: \"#D1345B\",\r\n    deleted: \"#B49A67\",\r\n    cancelled: \"#FF8484\",\r\n    finished: \"#4EA5D9\",\r\n  };\r\n\r\n  const getResume = () => {\r\n    if (\r\n      application.jobApplicant.resume &&\r\n      application.jobApplicant.resume !== \"\"\r\n    ) {\r\n      const address = `${server}${application.jobApplicant.resume}`;\r\n      console.log(address);\r\n      axios(address, {\r\n        method: \"GET\",\r\n        responseType: \"blob\",\r\n      })\r\n        .then((response) => {\r\n          const file = new Blob([response.data], {\r\n            type: \"application/pdf\",\r\n          });\r\n          const fileURL = URL.createObjectURL(file);\r\n          window.open(fileURL);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          setPopup({\r\n            open: true,\r\n            severity: \"error\",\r\n            message: \"Error\",\r\n          });\r\n        });\r\n    } else {\r\n      setPopup({\r\n        open: true,\r\n        severity: \"error\",\r\n        message: \"No resume found\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const updateStatus = (status) => {\r\n    const address = `${apiList.applications}/${application._id}`;\r\n    const statusData = {\r\n      status: status,\r\n      dateOfJoining: new Date().toISOString(),\r\n    };\r\n    axios\r\n      .put(address, statusData, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"success\",\r\n          message: response.data.message,\r\n        });\r\n        handleCloseEndJob();\r\n        getData();\r\n      })\r\n      .catch((err) => {\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n        console.log(err.response);\r\n        handleCloseEndJob();\r\n      });\r\n  };\r\n  console.log(application.jobApplicant, \"aasdfassfassf\");\r\n\r\n  return (\r\n    <Paper className={classes.jobTileOuter} elevation={3}>\r\n      <Grid container>\r\n        <Grid\r\n          item\r\n          xs={2}\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Avatar\r\n            src={`${application.jobApplicant.profile}`}\r\n            className={classes.avatar}\r\n          />\r\n        </Grid>\r\n        <Grid container item xs={7} spacing={1} direction=\"column\">\r\n          <Grid item>\r\n            <Typography variant=\"h5\">\r\n              {application.jobApplicant.name}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Rating\r\n              value={\r\n                application.jobApplicant.rating !== -1\r\n                  ? application.jobApplicant.rating\r\n                  : null\r\n              }\r\n              readOnly\r\n            />\r\n          </Grid>\r\n          <Grid item>Job Title: {application.job.title}</Grid>\r\n          <Grid item>Role: {application.job.jobType}</Grid>\r\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\r\n          <Grid item>\r\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\r\n          </Grid>\r\n          <Grid item>\r\n            {application.jobApplicant.skills.map((skill) => (\r\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container direction=\"column\" xs={3}>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.statusBlock}\r\n              color=\"primary\"\r\n              // onClick={() => getResume()}\r\n            >\r\n              <a\r\n                style={{\r\n                  textDecoration: \"none\",\r\n                  color: \"white\",\r\n                }}\r\n                className={classes.statusBlock}\r\n                href={application.jobApplicant.resume}\r\n                download\r\n              >\r\n                Download Resume\r\n              </a>\r\n            </Button>\r\n          </Grid>\r\n          <Grid item container xs>\r\n            {/* {buttonSet[application.status]} */}\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              style={{\r\n                background: \"#09BC8A\",\r\n              }}\r\n              onClick={() => {\r\n                setOpenEndJob(true);\r\n              }}\r\n            >\r\n              End Job\r\n            </Button>\r\n          </Grid>\r\n          <Grid item>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              className={classes.statusBlock}\r\n              onClick={() => {\r\n                setOpen(true);\r\n              }}\r\n            >\r\n              Rate Applicant\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Rating\r\n            name=\"simple-controlled\"\r\n            style={{ marginBottom: \"30px\" }}\r\n            value={rating === -1 ? null : rating}\r\n            onChange={(event, newValue) => {\r\n              setRating(newValue);\r\n            }}\r\n          />\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            style={{ padding: \"10px 50px\" }}\r\n            onClick={() => changeRating()}\r\n          >\r\n            Submit\r\n          </Button>\r\n        </Paper>\r\n      </Modal>\r\n      <Modal\r\n        open={openEndJob}\r\n        onClose={handleCloseEndJob}\r\n        className={classes.popupDialog}\r\n      >\r\n        <Paper\r\n          style={{\r\n            padding: \"20px\",\r\n            outline: \"none\",\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            minWidth: \"30%\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\r\n            Are you sure?\r\n          </Typography>\r\n          <Grid container justify=\"center\" spacing={5}>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => {\r\n                  updateStatus(\"finished\");\r\n                }}\r\n              >\r\n                Yes\r\n              </Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                style={{ padding: \"10px 50px\" }}\r\n                onClick={() => handleCloseEndJob()}\r\n              >\r\n                Cancel\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n      </Modal>\r\n    </Paper>\r\n  );\r\n};\r\n\r\nconst AcceptedApplicants = (props) => {\r\n  const setPopup = useContext(SetPopupContext);\r\n  const [applications, setApplications] = useState([]);\r\n  const [filterOpen, setFilterOpen] = useState(false);\r\n  const [searchOptions, setSearchOptions] = useState({\r\n    sort: {\r\n      \"jobApplicant.name\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      \"job.title\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n      dateOfJoining: {\r\n        status: true,\r\n        desc: true,\r\n      },\r\n      \"jobApplicant.rating\": {\r\n        status: false,\r\n        desc: false,\r\n      },\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  const getData = () => {\r\n    let searchParams = [];\r\n    searchParams = [...searchParams, `status=accepted`];\r\n\r\n    let asc = [],\r\n      desc = [];\r\n\r\n    Object.keys(searchOptions.sort).forEach((obj) => {\r\n      const item = searchOptions.sort[obj];\r\n      if (item.status) {\r\n        if (item.desc) {\r\n          desc = [...desc, `desc=${obj}`];\r\n        } else {\r\n          asc = [...asc, `asc=${obj}`];\r\n        }\r\n      }\r\n    });\r\n\r\n    searchParams = [...searchParams, ...asc, ...desc];\r\n    const queryString = searchParams.join(\"&\");\r\n    console.log(queryString);\r\n    let address = `${apiList.applicants}`;\r\n    if (queryString !== \"\") {\r\n      address = `${address}?${queryString}`;\r\n    }\r\n\r\n    console.log(address);\r\n\r\n    axios\r\n      .get(address, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n        },\r\n      })\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        setApplications(response.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.response);\r\n        // console.log(err.response.data);\r\n        setApplications([]);\r\n        setPopup({\r\n          open: true,\r\n          severity: \"error\",\r\n          message: err.response.data.message,\r\n        });\r\n      });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid item style={{width: \"93vw\"}}>\r\n        <Grid\r\n          style={{\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            width: \"100%\",\r\n            alignItems: \"center\",\r\n            margin: \"2rem 0\",\r\n          }}\r\n        >\r\n          <Grid item>\r\n            <Typography >All Applicants</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton onClick={() => setFilterOpen(true)}>\r\n              <FilterListIcon />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          class=\"boxOfContent\"\r\n        >\r\n          {applications.length > 0 ? (\r\n            applications.map((obj) => (\r\n              <Grid item>\r\n                {/* {console.log(obj)} */}\r\n                <ApplicationTile application={obj} getData={getData} />\r\n              </Grid>\r\n            ))\r\n          ) : (\r\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\r\n              No Applications Found\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <FilterPopup\r\n        open={filterOpen}\r\n        searchOptions={searchOptions}\r\n        setSearchOptions={setSearchOptions}\r\n        handleClose={() => setFilterOpen(false)}\r\n        getData={() => {\r\n          getData();\r\n          setFilterOpen(false);\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AcceptedApplicants;\r\n","C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\apiList.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\PasswordInput.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\FileUploadInput.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\lib\\EmailInput.js",[],"C:\\Users\\junai\\All Program\\Projects\\Worko\\frontend\\src\\component\\Navigation.js",["202"],{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","severity":1,"message":"208","line":6,"column":8,"nodeType":"209","messageId":"210","endLine":6,"endColumn":14},{"ruleId":"207","severity":1,"message":"211","line":4,"column":3,"nodeType":"209","messageId":"210","endLine":4,"endColumn":12},{"ruleId":"207","severity":1,"message":"212","line":9,"column":3,"nodeType":"209","messageId":"210","endLine":9,"endColumn":9},{"ruleId":"207","severity":1,"message":"213","line":20,"column":10,"nodeType":"209","messageId":"210","endLine":20,"endColumn":14},{"ruleId":"214","severity":1,"message":"215","line":16,"column":6,"nodeType":"216","endLine":16,"endColumn":8,"suggestions":"217"},{"ruleId":"218","severity":1,"message":"219","line":574,"column":15,"nodeType":"220","endLine":577,"endColumn":16},{"ruleId":"218","severity":1,"message":"219","line":580,"column":15,"nodeType":"220","endLine":583,"endColumn":16},{"ruleId":"218","severity":1,"message":"219","line":586,"column":15,"nodeType":"220","endLine":589,"endColumn":16},{"ruleId":"214","severity":1,"message":"221","line":236,"column":6,"nodeType":"216","endLine":236,"endColumn":8,"suggestions":"222"},{"ruleId":"207","severity":1,"message":"223","line":10,"column":3,"nodeType":"209","messageId":"210","endLine":10,"endColumn":8},{"ruleId":"207","severity":1,"message":"224","line":15,"column":8,"nodeType":"209","messageId":"210","endLine":15,"endColumn":23},{"ruleId":"207","severity":1,"message":"225","line":16,"column":8,"nodeType":"209","messageId":"210","endLine":16,"endColumn":16},{"ruleId":"207","severity":1,"message":"226","line":22,"column":8,"nodeType":"209","messageId":"210","endLine":22,"endColumn":23},{"ruleId":"207","severity":1,"message":"227","line":48,"column":9,"nodeType":"209","messageId":"210","endLine":48,"endColumn":16},{"ruleId":"207","severity":1,"message":"228","line":49,"column":11,"nodeType":"209","messageId":"210","endLine":49,"endColumn":20},{"ruleId":"207","severity":1,"message":"229","line":49,"column":22,"nodeType":"209","messageId":"210","endLine":49,"endColumn":34},{"ruleId":"230","severity":1,"message":"231","line":475,"column":32,"nodeType":"232","messageId":"233","endLine":475,"endColumn":34},{"ruleId":"207","severity":1,"message":"234","line":4,"column":3,"nodeType":"209","messageId":"210","endLine":4,"endColumn":7},{"ruleId":"207","severity":1,"message":"235","line":15,"column":3,"nodeType":"209","messageId":"210","endLine":15,"endColumn":12},{"ruleId":"207","severity":1,"message":"236","line":19,"column":8,"nodeType":"209","messageId":"210","endLine":19,"endColumn":14},{"ruleId":"207","severity":1,"message":"237","line":102,"column":9,"nodeType":"209","messageId":"210","endLine":102,"endColumn":17},{"ruleId":"207","severity":1,"message":"238","line":104,"column":9,"nodeType":"209","messageId":"210","endLine":104,"endColumn":14},{"ruleId":"207","severity":1,"message":"239","line":105,"column":9,"nodeType":"209","messageId":"210","endLine":105,"endColumn":19},{"ruleId":"230","severity":1,"message":"231","line":203,"column":28,"nodeType":"232","messageId":"233","endLine":203,"endColumn":30},{"ruleId":"214","severity":1,"message":"221","line":586,"column":6,"nodeType":"216","endLine":586,"endColumn":8,"suggestions":"240"},{"ruleId":"230","severity":1,"message":"231","line":602,"column":33,"nodeType":"232","messageId":"233","endLine":602,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":608,"column":33,"nodeType":"232","messageId":"233","endLine":608,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":614,"column":32,"nodeType":"232","messageId":"233","endLine":614,"endColumn":34},{"ruleId":"214","severity":1,"message":"241","line":68,"column":6,"nodeType":"216","endLine":68,"endColumn":22,"suggestions":"242"},{"ruleId":"214","severity":1,"message":"243","line":83,"column":6,"nodeType":"216","endLine":83,"endColumn":15,"suggestions":"244"},{"ruleId":"207","severity":1,"message":"245","line":1,"column":22,"nodeType":"209","messageId":"210","endLine":1,"endColumn":31},{"ruleId":"207","severity":1,"message":"246","line":6,"column":3,"nodeType":"209","messageId":"210","endLine":6,"endColumn":8},{"ruleId":"207","severity":1,"message":"247","line":10,"column":3,"nodeType":"209","messageId":"210","endLine":10,"endColumn":7},{"ruleId":"207","severity":1,"message":"248","line":14,"column":8,"nodeType":"209","messageId":"210","endLine":14,"endColumn":17},{"ruleId":"207","severity":1,"message":"249","line":22,"column":10,"nodeType":"209","messageId":"210","endLine":22,"endColumn":17},{"ruleId":"250","severity":1,"message":"251","line":103,"column":11,"nodeType":"252","messageId":"253","endLine":103,"endColumn":39},{"ruleId":"207","severity":1,"message":"254","line":115,"column":10,"nodeType":"209","messageId":"210","endLine":115,"endColumn":18},{"ruleId":"207","severity":1,"message":"255","line":115,"column":20,"nodeType":"209","messageId":"210","endLine":115,"endColumn":31},{"ruleId":"207","severity":1,"message":"256","line":117,"column":10,"nodeType":"209","messageId":"210","endLine":117,"endColumn":20},{"ruleId":"207","severity":1,"message":"257","line":117,"column":22,"nodeType":"209","messageId":"210","endLine":117,"endColumn":35},{"ruleId":"214","severity":1,"message":"258","line":157,"column":6,"nodeType":"216","endLine":157,"endColumn":22,"suggestions":"259"},{"ruleId":"207","severity":1,"message":"260","line":256,"column":9,"nodeType":"209","messageId":"210","endLine":256,"endColumn":18},{"ruleId":"207","severity":1,"message":"261","line":257,"column":9,"nodeType":"209","messageId":"210","endLine":257,"endColumn":16},{"ruleId":"207","severity":1,"message":"262","line":258,"column":9,"nodeType":"209","messageId":"210","endLine":258,"endColumn":17},{"ruleId":"207","severity":1,"message":"263","line":259,"column":9,"nodeType":"209","messageId":"210","endLine":259,"endColumn":19},{"ruleId":"207","severity":1,"message":"264","line":260,"column":7,"nodeType":"209","messageId":"210","endLine":260,"endColumn":16},{"ruleId":"207","severity":1,"message":"265","line":261,"column":7,"nodeType":"209","messageId":"210","endLine":261,"endColumn":15},{"ruleId":"207","severity":1,"message":"266","line":262,"column":7,"nodeType":"209","messageId":"210","endLine":262,"endColumn":19},{"ruleId":"207","severity":1,"message":"267","line":263,"column":7,"nodeType":"209","messageId":"210","endLine":263,"endColumn":14},{"ruleId":"207","severity":1,"message":"268","line":264,"column":7,"nodeType":"209","messageId":"210","endLine":264,"endColumn":18},{"ruleId":"218","severity":1,"message":"219","line":295,"column":21,"nodeType":"220","endLine":295,"endColumn":55},{"ruleId":"218","severity":1,"message":"219","line":298,"column":21,"nodeType":"220","endLine":298,"endColumn":58},{"ruleId":"218","severity":1,"message":"219","line":301,"column":21,"nodeType":"220","endLine":301,"endColumn":55},{"ruleId":"218","severity":1,"message":"219","line":304,"column":21,"nodeType":"220","endLine":304,"endColumn":57},{"ruleId":"207","severity":1,"message":"269","line":1,"column":20,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"207","severity":1,"message":"234","line":4,"column":3,"nodeType":"209","messageId":"210","endLine":4,"endColumn":7},{"ruleId":"207","severity":1,"message":"235","line":15,"column":3,"nodeType":"209","messageId":"210","endLine":15,"endColumn":12},{"ruleId":"207","severity":1,"message":"236","line":21,"column":8,"nodeType":"209","messageId":"210","endLine":21,"endColumn":14},{"ruleId":"207","severity":1,"message":"270","line":22,"column":8,"nodeType":"209","messageId":"210","endLine":22,"endColumn":18},{"ruleId":"214","severity":1,"message":"221","line":741,"column":6,"nodeType":"216","endLine":741,"endColumn":8,"suggestions":"271"},{"ruleId":"230","severity":1,"message":"231","line":757,"column":33,"nodeType":"232","messageId":"233","endLine":757,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":763,"column":33,"nodeType":"232","messageId":"233","endLine":763,"endColumn":35},{"ruleId":"230","severity":1,"message":"231","line":769,"column":32,"nodeType":"232","messageId":"233","endLine":769,"endColumn":34},{"ruleId":"214","severity":1,"message":"272","line":378,"column":6,"nodeType":"216","endLine":378,"endColumn":8,"suggestions":"273"},{"ruleId":"207","severity":1,"message":"274","line":394,"column":9,"nodeType":"209","messageId":"210","endLine":394,"endColumn":18},{"ruleId":"214","severity":1,"message":"221","line":717,"column":6,"nodeType":"216","endLine":717,"endColumn":8,"suggestions":"275"},{"ruleId":"207","severity":1,"message":"246","line":8,"column":3,"nodeType":"209","messageId":"210","endLine":8,"endColumn":8},{"ruleId":"207","severity":1,"message":"211","line":9,"column":3,"nodeType":"209","messageId":"210","endLine":9,"endColumn":12},{"ruleId":"207","severity":1,"message":"234","line":10,"column":3,"nodeType":"209","messageId":"210","endLine":10,"endColumn":7},{"ruleId":"207","severity":1,"message":"276","line":11,"column":3,"nodeType":"209","messageId":"210","endLine":11,"endColumn":18},{"ruleId":"207","severity":1,"message":"226","line":12,"column":3,"nodeType":"209","messageId":"210","endLine":12,"endColumn":18},{"ruleId":"207","severity":1,"message":"277","line":18,"column":10,"nodeType":"209","messageId":"210","endLine":18,"endColumn":21},{"ruleId":"207","severity":1,"message":"278","line":27,"column":10,"nodeType":"209","messageId":"210","endLine":27,"endColumn":14},{"ruleId":"207","severity":1,"message":"227","line":28,"column":9,"nodeType":"209","messageId":"210","endLine":28,"endColumn":16},{"ruleId":"207","severity":1,"message":"279","line":47,"column":9,"nodeType":"209","messageId":"210","endLine":47,"endColumn":20},{"ruleId":"214","severity":1,"message":"221","line":56,"column":6,"nodeType":"216","endLine":56,"endColumn":8,"suggestions":"280"},{"ruleId":"207","severity":1,"message":"281","line":80,"column":9,"nodeType":"209","messageId":"210","endLine":80,"endColumn":21},{"ruleId":"207","severity":1,"message":"282","line":7,"column":3,"nodeType":"209","messageId":"210","endLine":7,"endColumn":17},{"ruleId":"207","severity":1,"message":"211","line":10,"column":3,"nodeType":"209","messageId":"210","endLine":10,"endColumn":12},{"ruleId":"207","severity":1,"message":"283","line":13,"column":3,"nodeType":"209","messageId":"210","endLine":13,"endColumn":9},{"ruleId":"207","severity":1,"message":"284","line":14,"column":3,"nodeType":"209","messageId":"210","endLine":14,"endColumn":19},{"ruleId":"207","severity":1,"message":"235","line":15,"column":3,"nodeType":"209","messageId":"210","endLine":15,"endColumn":12},{"ruleId":"207","severity":1,"message":"285","line":16,"column":3,"nodeType":"209","messageId":"210","endLine":16,"endColumn":11},{"ruleId":"207","severity":1,"message":"286","line":20,"column":10,"nodeType":"209","messageId":"210","endLine":20,"endColumn":19},{"ruleId":"207","severity":1,"message":"287","line":465,"column":9,"nodeType":"209","messageId":"210","endLine":465,"endColumn":17},{"ruleId":"207","severity":1,"message":"274","line":475,"column":9,"nodeType":"209","messageId":"210","endLine":475,"endColumn":18},{"ruleId":"214","severity":1,"message":"221","line":745,"column":6,"nodeType":"216","endLine":745,"endColumn":8,"suggestions":"288"},{"ruleId":"289","severity":2,"message":"290","line":33,"column":27,"nodeType":"209","messageId":"291","endLine":33,"endColumn":32},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'TextField' is defined but never used.","'styled' is defined but never used.","'blue' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.","ArrayExpression",["294"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["295"],"'Input' is defined but never used.","'DescriptionIcon' is defined but never used.","'FaceIcon' is defined but never used.","'FileUploadInput' is defined but never used.","'classes' is assigned a value but never used.","'education' is assigned a value but never used.","'setEducation' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'Chip' is defined but never used.","'FormGroup' is defined but never used.","'Rating' is defined but never used.","'deadline' is assigned a value but never used.","'cName' is assigned a value but never used.","'cEducation' is assigned a value but never used.",["296"],"React Hook useEffect has a missing dependency: 'fetchCourseSuggestions'. Either include it or remove the dependency array.",["297"],"React Hook useEffect has a missing dependency: 'fetchImages'. Either include it or remove the dependency array.",["298"],"'useEffect' is defined but never used.","'Modal' is defined but never used.","'List' is defined but never used.","'ChipInput' is defined but never used.","'GridOff' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'experience' is assigned a value but never used.","'setExperience' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getResumeAnalysis'. Either include it or remove the dependency array.",["299"],"'startDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'jobTitle' is assigned a value but never used.","'department' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'emailAddress' is assigned a value but never used.","'phoneNo' is assigned a value but never used.","'profileLink' is assigned a value but never used.","'Slide' is defined but never used.","'Pagination' is defined but never used.",["300"],"React Hook useEffect has missing dependencies: 'application?.jobApplicant?.resume' and 'getResumeAnalysis'. Either include them or remove the dependency array.",["301"],"'getResume' is assigned a value but never used.",["302"],"'MultifieldInput' is defined but never used.","'CiFaceSmile' is defined but never used.","'open' is assigned a value but never used.","'handleInput' is assigned a value but never used.",["303"],"'handleUpdate' is assigned a value but never used.","'InputAdornment' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'MenuItem' is defined but never used.","'useParams' is defined but never used.","'colorSet' is assigned a value but never used.",["304"],"no-undef","'React' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"desc":"307","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},{"desc":"314","fix":"315"},{"desc":"307","fix":"316"},{"desc":"317","fix":"318"},{"desc":"307","fix":"319"},{"desc":"307","fix":"320"},{"desc":"307","fix":"321"},"Update the dependencies array to be: [setPopup]",{"range":"322","text":"323"},"Update the dependencies array to be: [getData]",{"range":"324","text":"325"},{"range":"326","text":"325"},"Update the dependencies array to be: [fetchCourseSuggestions, profileDetails]",{"range":"327","text":"328"},"Update the dependencies array to be: [courses, fetchImages]",{"range":"329","text":"330"},"Update the dependencies array to be: [getResumeAnalysis, profileDetails]",{"range":"331","text":"332"},{"range":"333","text":"325"},"Update the dependencies array to be: [application?.jobApplicant?.resume, getResumeAnalysis]",{"range":"334","text":"335"},{"range":"336","text":"325"},{"range":"337","text":"325"},{"range":"338","text":"325"},[437,439],"[setPopup]",[6546,6548],"[getData]",[19081,19083],[2299,2315],"[fetchCourseSuggestions, profileDetails]",[2697,2706],"[courses, fetchImages]",[4194,4210],"[getResumeAnalysis, profileDetails]",[22889,22891],[12581,12583],"[application?.jobApplicant?.resume, getResumeAnalysis]",[21361,21363],[1199,1201],[23070,23072]]