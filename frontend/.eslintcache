[{"/Users/avinashprajapati/Documents/github/Worko/frontend/src/index.js":"1","/Users/avinashprajapati/Documents/github/Worko/frontend/src/App.js":"2","/Users/avinashprajapati/Documents/github/Worko/frontend/src/reportWebVitals.js":"3","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Applications.js":"4","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Login.js":"5","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Home.js":"6","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Logout.js":"7","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Profile.js":"8","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Signup.js":"9","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Welcome.js":"10","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Navbar.js":"11","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/AcceptedApplicants.js":"12","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/Profile.js":"13","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/MyJobs.js":"14","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/JobApplications.js":"15","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/MessagePopup.js":"16","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/CreateJobs.js":"17","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/isAuth.js":"18","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/apiList.js":"19","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/PasswordInput.js":"20","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/EmailInput.js":"21","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/FileUploadInput.js":"22","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Course.js":"23"},{"size":500,"mtime":1706292857057,"results":"24","hashOfConfig":"25"},{"size":3622,"mtime":1706441510848,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1706292857060,"results":"27","hashOfConfig":"25"},{"size":7577,"mtime":1706292857048,"results":"28","hashOfConfig":"25"},{"size":3836,"mtime":1706292857049,"results":"29","hashOfConfig":"25"},{"size":22810,"mtime":1706883450740,"results":"30","hashOfConfig":"25"},{"size":489,"mtime":1706292857049,"results":"31","hashOfConfig":"25"},{"size":18695,"mtime":1706884612579,"results":"32","hashOfConfig":"25"},{"size":15691,"mtime":1706292857051,"results":"33","hashOfConfig":"25"},{"size":29588,"mtime":1706882512395,"results":"34","hashOfConfig":"25"},{"size":3836,"mtime":1706441299806,"results":"35","hashOfConfig":"25"},{"size":24947,"mtime":1706292857054,"results":"36","hashOfConfig":"25"},{"size":7849,"mtime":1706883813334,"results":"37","hashOfConfig":"25"},{"size":26733,"mtime":1706292857055,"results":"38","hashOfConfig":"25"},{"size":35873,"mtime":1706292857055,"results":"39","hashOfConfig":"25"},{"size":503,"mtime":1706292857058,"results":"40","hashOfConfig":"25"},{"size":10398,"mtime":1706292857054,"results":"41","hashOfConfig":"25"},{"size":165,"mtime":1706292857059,"results":"42","hashOfConfig":"25"},{"size":555,"mtime":1706448339775,"results":"43","hashOfConfig":"25"},{"size":1666,"mtime":1706292857059,"results":"44","hashOfConfig":"25"},{"size":1167,"mtime":1706292857058,"results":"45","hashOfConfig":"25"},{"size":4480,"mtime":1706292857058,"results":"46","hashOfConfig":"25"},{"size":9739,"mtime":1706884866094,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"rnckb5",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},"/Users/avinashprajapati/Documents/github/Worko/frontend/src/index.js",[],["110","111"],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/App.js",["112"],"import { createContext, useState } from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport { Grid, makeStyles } from \"@material-ui/core\";\n\nimport Welcome, { ErrorPage } from \"./component/Welcome\";\nimport Navbar from \"./component/Navbar\";\nimport Login from \"./component/Login\";\nimport Logout from \"./component/Logout\";\nimport Signup from \"./component/Signup\";\nimport Home from \"./component/Home\";\nimport Applications from \"./component/Applications\";\nimport Profile from \"./component/Profile\";\nimport CreateJobs from \"./component/recruiter/CreateJobs\";\nimport MyJobs from \"./component/recruiter/MyJobs\";\nimport JobApplications from \"./component/recruiter/JobApplications\";\nimport AcceptedApplicants from \"./component/recruiter/AcceptedApplicants\";\nimport RecruiterProfile from \"./component/recruiter/Profile\";\nimport MessagePopup from \"./lib/MessagePopup\";\nimport isAuth, { userType } from \"./lib/isAuth\";\nimport Course from \"./component/Course\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    minHeight: \"98vh\",\n    paddingTop: \"64px\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n}));\n\nexport const SetPopupContext = createContext();\n\nfunction App() {\n  const classes = useStyles();\n  const [popup, setPopup] = useState({\n    open: false,\n    severity: \"\",\n    message: \"\",\n  });\n  return (\n    <BrowserRouter>\n      <SetPopupContext.Provider value={setPopup}>\n        <Grid container direction=\"column\">\n          <Grid item xs>\n            <Navbar />\n          </Grid>\n          <Grid item className={classes.body}>\n            <Switch>\n              <Route exact path=\"/\">\n                {userType() === \"recruiter\" ? (\n                  <Welcome type=\"recruiter\" />\n                ) : (\n                  <Welcome type=\"applicant\" />\n                )}\n              </Route>\n              <Route exact path=\"/login\">\n                <Login />\n              </Route>\n              <Route exact path=\"/signup\">\n                <Signup />\n              </Route>\n              <Route exact path=\"/logout\">\n                <Logout />\n              </Route>\n              <Route exact path=\"/home\">\n                <Home />\n              </Route>\n              <Route exact path=\"/applications\">\n                <Applications />\n              </Route>\n              <Route exact path=\"/profile\">\n                {userType() === \"recruiter\" ? (\n                  <RecruiterProfile />\n                ) : (\n                  <Profile />\n                )}\n              </Route>\n              <Route exact path=\"/courses\">\n                <Course />\n              </Route>\n              <Route exact path=\"/addjob\">\n                <CreateJobs />\n              </Route>\n              <Route exact path=\"/myjobs\">\n                <MyJobs />\n              </Route>\n              <Route exact path=\"/job/applications/:jobId\">\n                <JobApplications />\n              </Route>\n              <Route exact path=\"/employees\">\n                <AcceptedApplicants />\n              </Route>\n              <Route>\n                <ErrorPage />\n              </Route>\n            </Switch>\n          </Grid>\n        </Grid>\n        <MessagePopup\n          open={popup.open}\n          setOpen={(status) =>\n            setPopup({\n              ...popup,\n              open: status,\n            })\n          }\n          severity={popup.severity}\n          message={popup.message}\n        />\n      </SetPopupContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/reportWebVitals.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Applications.js",["113","114","115","116","117","118","119","120","121","122","123"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [rating, setRating] = useState(application.job.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n  const joinedOn = new Date(application.dateOfJoining);\n\n  const fetchRating = () => {\n    axios\n      .get(`${apiList.rating}?id=${application.job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setRating(response.data.rating);\n        console.log(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        { rating: rating, jobId: application.job._id },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        fetchRating();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        fetchRating();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  return (\n    \n    <Paper class=\"border-2 rounded-md px-5 py-5 w-6/12\" className={classes.jobTileOuter} >\n      <Grid  class=\"job-card-container\" className=\"flex flex-col\">\n        <Grid  direction=\"column\">\n          <Grid item>\n            <Typography class=\"cardTitle\">{application.job.title} </Typography>\n            <Typography class=\"cardSubTitle\"> Company Name </Typography>\n          </Grid>\n          <Grid class=\"cardSubTitle\">\n          <span item>Posted By: {application.recruiter.name}</span>\n          <span item>Role : {application.job.jobType}</span>\n          <span item>Salary : &#8377; {application.job.salary} per month</span>\n          </Grid>\n         \n          <Grid class=\"cardSubTitle\">\n          <span>\n            Duration :{\" \"}\n            {application.job.duration !== 0\n              ? `${application.job.duration} month`\n              : `Flexible`} {' '}\n          </span>\n          <span> {' '} Applied On: {appliedOn.toLocaleDateString()}</span>\n          </Grid>\n          {/* <Grid item>\n            {application.job.skillsets.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid> */}\n          \n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item >Joined On: {joinedOn.toLocaleDateString()}</Grid>\n          ) : null}\n        </Grid>\n        <Grid item container direction=\"column\" class=\"w-full\" xs={3}>\n          <Grid item class=\"flex my-4 py-2 w-6/12\">\n            <Grid item class=\"primaryButton  my-4\">Status: {application.status.toUpperCase()}</Grid>\n            <Grid item class=\"secondaryButton\" href=\"#\"> View More </Grid>\n          </Grid>\n          {application.status === \"accepted\" ||\n          application.status === \"finished\" ? (\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.statusBlock}\n                onClick={() => {\n                  fetchRating();\n                  setOpen(true);\n                }}\n              >\n                Rate Job\n              </Button>\n            </Grid>\n          ) : null}\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            class=\"primaryButton\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  \n  );\n};\n\nconst Applications = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.applications, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      {/* <Grid item>\n        <Typography variant=\"h2\">Applications</Typography>\n      </Grid> */}\n      <Grid\n        container\n        item\n        xs\n        direction=\"column\"\n        style={{ width: \"100%\" }}\n        alignItems=\"stretch\"\n        justify=\"center\"\n      >\n        {applications.length > 0 ? (\n          applications.map((obj) => (\n            <Grid item>\n              <ApplicationTile application={obj} />\n            </Grid>\n          ))\n        ) : (\n          <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n            No Applications Found\n          </Typography>\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Applications;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Login.js",["124","125","126"],"import { useContext, useState } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  makeStyles,\n  Paper,\n  styled,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\nimport { blue } from \"@material-ui/core/colors\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  h2: {\n    color: \"blue\",\n  },\n  inputBox: {\n    width: \"300px\",\n    height: \"50px\"\n  },\n  submitButton: {\n    width: \"100px\",\n  },\n  Pallete:{\n    primary: {\n      main: \"#fefefe\"\n    }\n  }\n}));\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n\n  const [loginDetails, setLoginDetails] = useState({\n    email: \"\",\n    password: \"\",\n  });\n\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      error: false,\n      message: \"\",\n    },\n    password: {\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setLoginDetails({\n      ...loginDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const verified = !Object.keys(inputErrorHandler).some((obj) => {\n      return inputErrorHandler[obj].error;\n    });\n    if (verified) {\n      axios\n        .post(apiList.login, loginDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Paper class=\"loginSection\" elevation={4} rounded-md className={classes.body}>\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n        <Grid item>\n          <Typography class=\"loginHeading\" variant=\"h2\" component=\"h2\">\n            Login\n          </Typography>\n        </Grid>\n        <Grid item>\n          <EmailInput class=\"userinput\"\n            label=\"Email\"\n            value={loginDetails.email}\n            onChange={(event) => handleInput(\"email\", event.target.value)}\n            inputErrorHandler={inputErrorHandler}\n            handleInputError={handleInputError}\n            className={classes.inputBox}\n          />\n        </Grid>\n        <Grid item>\n          <PasswordInput class=\"userinput\"\n            label=\"Password\"\n            value={loginDetails.password}\n            onChange={(event) => handleInput(\"password\", event.target.value)}\n            className={classes.inputBox}\n          />\n        </Grid>\n        <Grid item>\n          <Button class=\"userbutton\"\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => handleLogin()}\n            className={classes.submitButton}\n          >\n            Login\n          </Button>\n        </Grid>\n      </Grid>\n     \n      \n    </Paper>\n   \n  );\n};\n\nexport default Login;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Home.js",["127","128","129","130","131","132","133","134","135","136","137"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n} from \"@material-ui/core\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { userType } from \"../lib/isAuth\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  const { job } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [sop, setSop] = useState(\"\");\n\n  const handleClose = () => {\n    setOpen(false);\n    setSop(\"\");\n  };\n\n  const handleApply = () => {\n    console.log(job._id);\n    console.log(sop);\n    console.log(\"Working\");\n    axios\n      .post(\n        `${apiList.jobs}/${job._id}/applications`,\n        {\n          sop: sop,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleClose();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const deadline = new Date(job.deadline).toLocaleDateString();\n  const cAddress = \"Mumbai, Maharashtra, India\";\n  const cName = \"Company Name\";\n  const cEducation = \" Bachelor's degree in Computer Science\";\n  console.log(\"🚀 ~ JobTile ~ job:\", job);\n  // const\n  return (\n    <Paper className={classes.jobTileOuter} class=\" shadow my-2 py-5 px-5\">\n      <Grid container class=\"flex flex-col\">\n        <Grid container item xs={9} spacing={1} direction=\"column\">\n          <Grid item>\n            <Grid item>\n              <Typography class=\"font-medium text-xl my-2 text-black\">\n                {job.title}\n              </Typography>\n            </Grid>\n            <Grid item class=\"cardSubTitle mb-2 flex flex-col\">\n              {/* <span class=\"\">{cName}</span> */}\n              <span>Posted By : {job.recruiter.name}</span>\n            </Grid>\n          </Grid>\n\n          <Grid></Grid>\n\n          <Grid class=\"cardSubTitle w-screen my-2\">\n            <span>\n              {\" \"}\n              <i class=\"fa-solid fa-briefcase\"></i> {job.jobType}{\" \"}\n            </span>\n            <span>\n              <i class=\"fa-solid fa-indian-rupee-sign\"></i> {job.salary} PA\n            </span>{\" \"}\n            <span>\n              <i class=\"fa-solid fa-location-dot \"> </i> {cAddress}{\" \"}\n            </span>\n          </Grid>\n          <Grid item class=\"cardSubTitle\">\n            {\" \"}\n            <span>\n              {\" \"}\n              <i class=\"fa-solid fa-user-graduate\"></i> {job.jobType}{\" \"}\n            </span>\n          </Grid>\n        </Grid>\n        {/* Button of Card  */}\n        <Grid item className=\"flex align-middle justify-evenly \">\n          {/* Typography Section */}\n          <Grid item class=\"cardSubTitle flex w-full my-5 justify-start\">\n            {job?.skillsets.map((skill) => {\n              return <span style={{ marginRight: \"10px\" }}> {skill}</span>;\n            })}\n            {/* // <span> {\"None None None\"}</span> */}\n          </Grid>\n          {/* Button Section */}\n          <Grid item class=\"flex p-4\">\n            <Button\n              class=\"middle none center mr-3 rounded-lg bg-gradient-to-tr bg-blue-500 py-3 px-6 font-sans text-xs font-bold uppercase text-white shadow-md shadow-pink-500/20 transition-all hover:shadow-lg hover:shadow-pink-500/40 active:opacity-[0.85] disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none\"\n              data-ripple-light=\"true\"\n              variant=\"outlined\"\n              // class=\"primaryButton\"\n              // className={classes.button}\n              onClick={() => {\n                setOpen(true);\n              }}\n              disabled={userType() === \"recruiter\"}\n            >\n              Apply\n            </Button>\n            <Button\n              variant=\"contained\"\n              class=\"middle none center mr-3 rounded-lg border borderblue-500 py-3 px-6 font-sans text-xs font-bold uppercase text-blue-500 transition-all hover:opacity-75 focus:ring focus:ring-pink-200 active:opacity-[0.85] disabled:pointer-events-none disabled:opacity-50 disabled:shadow-none\"\n              data-ripple-dark=\"true\"\n            >\n              {\" \"}\n              View{\" \"}\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"50%\",\n            alignItems: \"center\",\n          }}\n        >\n          <TextField\n            label=\"Write SOP (upto 250 words)\"\n            multiline\n            rows={8}\n            style={{ width: \"100%\", marginBottom: \"30px\" }}\n            variant=\"outlined\"\n            value={sop}\n            onChange={(event) => {\n              if (\n                event.target.value.split(\" \").filter(function (n) {\n                  return n != \"\";\n                }).length <= 250\n              ) {\n                setSop(event.target.value);\n              }\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => handleApply()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration\n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst Home = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(\n          response.data.filter((obj) => {\n            const today = new Date();\n            const deadline = new Date(obj.deadline);\n            return deadline > today;\n          })\n        );\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        class=\"mainGridContainer\"\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\" }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <TextField\n            label=\"Search Jobs\"\n            value={searchOptions.query}\n            onChange={(event) =>\n              setSearchOptions({\n                ...searchOptions,\n                query: event.target.value,\n              })\n            }\n            onKeyPress={(ev) => {\n              if (ev.key === \"Enter\") {\n                getData();\n              }\n            }}\n            InputProps={{\n              endAdornment: (\n                <InputAdornment>\n                  <IconButton onClick={() => getData()}>\n                    <SearchIcon />\n                  </IconButton>\n                </InputAdornment>\n              ),\n            }}\n            style={{ width: \"100vw\" }}\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid item className=\"flex justify-between  w-full items-center mx-8\">\n          <Typography>Results</Typography>\n\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid container item class=\"boxOfContent\">\n          {jobs.length > 0 ? (\n            jobs.map((job) => {\n              return <JobTile job={job} />;\n            })\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No jobs found\n            </Typography>\n          )}\n        </Grid>\n        <Grid item>\n          <Pagination count={10} color=\"primary\" />\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default Home;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Logout.js",["138"],"import { useEffect, useContext } from \"react\";\nimport { Redirect } from \"react-router-dom\";\n\nimport { SetPopupContext } from \"../App\";\n\nconst Logout = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"type\");\n    setPopup({\n      open: true,\n      severity: \"success\",\n      message: \"Logged out successfully\",\n    });\n  }, []);\n  return <Redirect to=\"/login\" />;\n};\n\nexport default Logout;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Profile.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  List,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\n\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport { GridOff } from \"@material-ui/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n  box1: {\n    background: \"Red\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {education.map((obj, key) => (\n        <Grid item container className={classes.inputBox} key={key}>\n          <Grid item xs={6}>\n            <TextField\n              label={`Institution Name #${key + 1}`}\n              value={education[key].institutionName}\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].institutionName = event.target.value;\n                setEducation(newEdu);\n              }}\n              variant=\"outlined\"\n              fullWidth\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"Start Year\"\n              value={obj.startYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].startYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n          <Grid item xs={3}>\n            <TextField\n              label=\"End Year\"\n              value={obj.endYear}\n              variant=\"outlined\"\n              type=\"number\"\n              onChange={(event) => {\n                const newEdu = [...education];\n                newEdu[key].endYear = event.target.value;\n                setEducation(newEdu);\n              }}\n            />\n          </Grid>\n        </Grid>\n      ))}\n      <Grid item style={{ alignSelf: \"center\" }}>\n        <Button\n          variant=\"contained\"\n          class=\"primaryButton\"\n          onClick={() =>\n            setEducation([\n              ...education,\n              {\n                institutionName: \"\",\n                startYear: \"\",\n                endYear: \"\",\n              },\n            ])\n          }\n          className={classes.inputBox}\n        >\n          Add\n        </Button>\n      </Grid>\n    </>\n  );\n};\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n  const [userData, setUserData] = useState();\n  const [open, setOpen] = useState(false);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n  });\n\n  console.log(\"🚀 ~ Profile ~ profileDetails:\", profileDetails);\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        if (response.data.education.length > 0) {\n          setEducation(\n            response.data.education.map((edu) => ({\n              institutionName: edu.institutionName ? edu.institutionName : \"\",\n              startYear: edu.startYear ? edu.startYear : \"\",\n              endYear: edu.endYear ? edu.endYear : \"\",\n            }))\n          );\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        // setPopup({\n        //   open: true,\n        //   severity: \"error\",\n        //   message: \"Error\",\n        // });\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const editDetails = () => {\n    setOpen(true);\n  };\n\n  const handleUpdate = () => {\n    console.log(education);\n\n    let updatedDetails = {\n      ...profileDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        // setPopup({\n        //     open: true,\n        //     severity: \"error\",\n        //     message: err.response.data.message,\n        // });\n        console.log(err.response);\n      });\n    setOpen(false);\n  };\n  const companyName = \"Open to Work\";\n  const startDate = \"11/11/2022\";\n  const endDate = \"30/12/2023\";\n  const jobTitle = \"Frontend Developer\";\n  const department = \"Designer Department\";\n  let firstName = \"Junaid\";\n  let lastName = \"Shaikh\";\n  let emailAddress = \"junaid@gmail.com\";\n  let phoneNo = 9859438294;\n  let profileLink =\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Google_%22G%22_logo.svg/1024px-Google_%22G%22_logo.svg.png\";\n\n  // Projects Details\n  const projectDetails = {\n    projectName: \"Worko\",\n    projectClientName: \"Google\",\n    projectStartDate: \"Dec 2023\",\n    projectEndDate: \"Present\",\n    projectDescription:\n      \"Welcome to the Todoster Web Application! This simple and user-friendly application helps you manage your tasks and stay organized. This README will provide you with all the information you need to get started, including features and more\",\n  };\n\n  return (\n    <>\n      <Grid container class=\"w-9/12 my-5\">\n        <Grid>\n          <Paper item elevation={0} style={{ background: \"transparent\" }}>\n            <Grid className=\"flex justify-between bg-transparent\">\n              <Grid item class=\"flex flex-cols py-10\">\n                <div className=\"w-40 flex justify-items-center mr-5\">\n                  <img\n                    className=\"w-40 h-40 p-1 rounded-full ring-2 ring-gray-300 dark:ring-gray-500 object-cover\"\n                    src={profileDetails.profile}\n                    alt=\"Bordered avatar\"\n                  />\n                </div>\n                <div className=\"flex flex-col mt-5\">\n                  <h1 className=\"cardTitle\">{profileDetails.name}</h1>\n                  <h3 className=\"cardSubTitle\">{companyName}</h3>\n                  <div>\n                    <a href=\"\" class=\"text-black\">\n                      <i class=\"fa-solid fa-globe m-1\"></i>\n                    </a>\n                    <a href=\"\" class=\"text-blue-600\">\n                      <i class=\"fa-brands fa-linkedin m-1\"></i>\n                    </a>\n                    <a href=\"\" class=\"text-black\">\n                      <i class=\"fa-brands fa-x-twitter m-1\"></i>\n                    </a>\n                    <a href=\"\" class=\"text-red-400\">\n                      <i class=\"fa-brands fa-instagram m-1\"></i>\n                    </a>\n                  </div>\n                </div>\n              </Grid>\n              <Grid item class=\"grid content-center\">\n                <Button class=\"primaryButton h-10\" onClick={editDetails}>\n                  {\" \"}\n                  Edit Profile\n                </Button>\n              </Grid>\n            </Grid>\n            <Grid className=\"w-full bg-white py-5 px-10 rounded-lg\">\n              {/* About Card */}\n              <Grid className=\"profileCards\">\n                <Grid item className=\"profileCardsHeader\">\n                  <Typography class=\"profileCardsHeading\">About Me</Typography>\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\n                    {/* <i class=\"fa-solid fa-pen\"></i> */}\n                  </Grid>\n                </Grid>\n\n                <Grid xs class=\"profileCardsFooter\">\n                  {\" \"}\n                  I am a person who is positive about every aspect of life.\n                  There are many things I like to do, to see, and to experience.\n                  I like to read, I like to write; I like to think, I like to\n                  dream; I like to talk, I like to listen. I like to see the\n                  sunrise in the morning, I like to see the moonlight at night;\n                  I like to feel the music flowing on my face, I like to smell\n                  the wind coming from the ocean. I like to look at the clouds\n                  in the sky with a blank mind, I like to do thought experiment\n                  when I cannot sleep in the middle of the night. I like flowers\n                  in spring, rain in summer, leaves in autumn, and snow in\n                  winter. I like to sleep early, I like to get up late;\n                </Grid>\n              </Grid>\n              {/* Personal Card */}\n              <Grid className=\"profileCards\">\n                <Grid item className=\"profileCardsHeader\">\n                  <Typography class=\"profileCardsHeading\">\n                    {\" \"}\n                    Personal Information{\" \"}\n                  </Typography>\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\n                    {\" \"}\n                    {/* <i class=\"fa-solid fa-pen\"></i>{\" \"} */}\n                  </Grid>\n                </Grid>\n                <div className=\"flex my-5 \">\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      First Name\n                    </Typography>{\" \"}\n                    <Typography className=\"profileCardsFooter\">\n                      {profileDetails.name}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileCardsFooter\">\n                      Last Name\n                    </Typography>{\" \"}\n                    <Typography className=\"profileCardsFooter\">\n                      Payne\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Email Address\n                    </Typography>{\" \"}\n                    <Typography className=\"profileCardsFooter\">\n                      {emailAddress}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Phone\n                    </Typography>{\" \"}\n                    <Typography className=\"profileCardsFooter\">\n                      {phoneNo}\n                    </Typography>\n                  </Grid>\n                </div>\n              </Grid>\n              {/* Skills Card */}\n              <Grid className=\"profileCards\">\n                <Grid item className=\"profileCardsHeader\">\n                  <Typography class=\"profileCardsHeading\">Skills</Typography>\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\n                    {/* <i class=\"fa-solid fa-pen\"></i> */}\n                  </Grid>\n                </Grid>\n                <Grid item className=\"flex\">\n                  {profileDetails.skills.map((skillList) => (\n                    <span className=\" profileCardsSkills\"> {skillList} </span>\n                  ))}\n                </Grid>\n              </Grid>\n              {/* Eduction Card */}\n              <Grid className=\"profileCards\">\n                {/* Header of the card */}\n                <Grid item className=\"profileCardsHeader\">\n                  <Typography class=\"profileCardsHeading\">Education</Typography>\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\n                    {/* <i class=\"fa-solid fa-pen\"></i> */}\n                  </Grid>\n                </Grid>\n                {/* Main body of the card */}\n                <Grid item>\n                  <Grid item sm className=\"profileCardsSubHeading\">\n                    <span>{education.institutionName}</span>\n                    {/* <span> Information Technology</span> */}\n                  </Grid>\n                  <Grid item sm className=\"profileCardsSubHeading\">\n                    <span>St. Xaviers College, Mumbai</span>\n                  </Grid>\n                  <Grid item sm className=\"profileCardsSubPara\">\n                    <span>{education.startDate}</span>\n                    <span>{education.endDate}</span>\n                  </Grid>\n                </Grid>\n              </Grid>\n              {/* Project Card */}\n              <Grid item className=\"profileCards\">\n                {/* Header of the card */}\n                <Grid item sm className=\"profileCardsHeader\">\n                  <Typography class=\"profileCardsHeading\">Projects</Typography>\n                  <Grid item sm className=\"profileCardsHeaderIcons\">\n                    {/* <i class=\"fa-solid fa-pen\"></i> */}\n                  </Grid>\n                </Grid>\n                {/* Main body of the card */}\n                {/* <Grid item>\n                  <Grid\n                    item\n                    sm\n                    class=\"profileCardsSubHeading\"\n                    style={{ margin: \"0px\", fontSize: \"17px\" }}\n                  >\n                    <span>{projectDetails.projectName}</span>\n                  </Grid>\n                  <Grid item sm className=\"profileCardsSubHeading\">\n                    <span>{projectDetails.projectClientName}</span>\n                  </Grid>\n                  <Grid item sm className=\"profileCardsSubPara\">\n                    <span>{projectDetails.projectStartDate}</span>\n                    {\" to \"}\n                    <span>{projectDetails.projectEndDate}</span>\n                  </Grid>\n                  <Grid\n                    item\n                    sm\n                    className=\"profileCardsSubHeading\"\n                    style={{ marginTop: \"5px\" }}\n                  >\n                    <span>{projectDetails.projectDescription}</span>\n                  </Grid>\n                </Grid> */}\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Grid\n          container\n          item\n          direction=\"column\"\n          alignItems=\"center\"\n          style={{ padding: \"30px\", minHeight: \"93vh\" }}\n        >\n          <Grid item>\n            <Typography variant=\"h2\">Profile</Typography>\n          </Grid>\n          <Grid item xs>\n            <Paper\n              style={{\n                padding: \"20px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <TextField\n                    label=\"Name\"\n                    value={profileDetails.name}\n                    onChange={(event) =>\n                      handleInput(\"name\", event.target.value)\n                    }\n                    className={classes.inputBox}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                <MultifieldInput\n                  education={education}\n                  setEducation={setEducation}\n                />\n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Skills\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={profileDetails.skills}\n                    onAdd={(chip) =>\n                      setProfileDetails({\n                        ...profileDetails,\n                        skills: [...profileDetails.skills, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let skills = profileDetails.skills;\n                      skills.splice(index, 1);\n                      setProfileDetails({\n                        ...profileDetails,\n                        skills: skills,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n                <Grid item>\n                  <FileUploadInput\n                    className={classes.inputBox}\n                    label=\"Resume (.pdf)\"\n                    icon={<DescriptionIcon />}\n                    uploadTo={apiList.uploadResume}\n                    handleInput={handleInput}\n                    identifier={\"resume\"}\n                    profileDetails={profileDetails}\n                  />\n                </Grid>\n                <Grid item>\n                  <FileUploadInput\n                    className={classes.inputBox}\n                    label=\"Profile Photo (.jpg/.png)\"\n                    icon={<FaceIcon />}\n                    uploadTo={apiList.uploadProfileImage}\n                    handleInput={handleInput}\n                    identifier={\"profile\"}\n                    profileDetails={profileDetails}\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\", marginTop: \"30px\" }}\n                onClick={() => handleUpdate()}\n              >\n                Update Details\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Modal>\n    </>\n  );\n};\n\nexport default Profile;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Signup.js",["155","156","157","158","159","160","161","162"],"import { useState, useContext } from \"react\";\nimport {\n  Grid,\n  TextField,\n  Button,\n  Typography,\n  makeStyles,\n  Paper,\n  MenuItem,\n  Input,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { Redirect } from \"react-router-dom\";\nimport ChipInput from \"material-ui-chip-input\";\nimport DescriptionIcon from \"@material-ui/icons/Description\";\nimport FaceIcon from \"@material-ui/icons/Face\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport PasswordInput from \"../lib/PasswordInput\";\nimport EmailInput from \"../lib/EmailInput\";\nimport FileUploadInput from \"../lib/FileUploadInput\";\nimport { SetPopupContext } from \"../App\";\n\nimport apiList from \"../lib/apiList\";\nimport isAuth from \"../lib/isAuth\";\n\n// Radio Button\n// import Radio from '@mui/material/Radio';\n// import RadioGroup from '@mui/material/RadioGroup';\n// // import FormControlLabel from '@mui/material/FormControlLabel';\n// // import FormControl from '@mui/material/FormControl';\n// // import FormLabel from '@mui/material/FormLabel';\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    padding: \"60px 60px\",\n  },\n  inputBox: {\n    width: \"400px\",\n  },\n  submitButton: {\n    width: \"400px\",\n  },\n}));\n\nconst MultifieldInput = (props) => {\n  const classes = useStyles();\n  const { education, setEducation } = props;\n\n  return (\n    <>\n      {/* {education.map((obj, key) => (\n                <Grid\n                    item\n                    container\n                    className={classes.inputBox}\n                    key={key}\n                    style={{ paddingLeft: 0, paddingRight: 0 }}\n                >\n                    <Grid item xs={6}>\n                        <TextField\n                            label={`Institution Name #${key + 1}`}\n                            value={education[key].institutionName}\n                            onChange={(event) => {\n                                const newEdu = [...education];\n                                newEdu[key].institutionName =\n                                    event.target.value;\n                                setEducation(newEdu);\n                            }}\n                            variant=\"outlined\"\n                        />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <TextField\n                            label=\"Start Year\"\n                            value={obj.startYear}\n                            variant=\"outlined\"\n                            type=\"number\"\n                            onChange={(event) => {\n                                const newEdu = [...education];\n                                newEdu[key].startYear = event.target.value;\n                                setEducation(newEdu);\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={3}>\n                        <TextField\n                            label=\"End Year\"\n                            value={obj.endYear}\n                            variant=\"outlined\"\n                            type=\"number\"\n                            onChange={(event) => {\n                                const newEdu = [...education];\n                                newEdu[key].endYear = event.target.value;\n                                setEducation(newEdu);\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            ))} */}\n      {/* <Grid item>\n                <Button class=\"userButton\"\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    onClick={() =>\n                        setEducation([\n                            ...education,\n                            {\n                                institutionName: \"\",\n                                startYear: \"\",\n                                endYear: \"\",\n                            },\n                        ])\n                    }\n                    className={classes.inputBox}\n                >\n                    Add another institution details\n                </Button>\n            </Grid> */}\n    </>\n  );\n};\n\nconst Login = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [loggedin, setLoggedin] = useState(isAuth());\n\n  const [signupDetails, setSignupDetails] = useState({\n    type: \"applicant\",\n    email: \"\",\n    password: \"\",\n    name: \"\",\n    education: [],\n    skills: [],\n    resume: \"\",\n    profile: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n\n  const [education, setEducation] = useState([\n    {\n      institutionName: \"\",\n      startYear: \"\",\n      endYear: \"\",\n    },\n  ]);\n\n  const [inputErrorHandler, setInputErrorHandler] = useState({\n    email: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    password: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n    name: {\n      untouched: true,\n      required: true,\n      error: false,\n      message: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setSignupDetails({\n      ...signupDetails,\n      [key]: value,\n    });\n  };\n\n  const handleInputError = (key, status, message) => {\n    setInputErrorHandler({\n      ...inputErrorHandler,\n      [key]: {\n        required: true,\n        untouched: false,\n        error: status,\n        message: message,\n      },\n    });\n  };\n\n  const handleLogin = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    console.log(education);\n\n    let updatedDetails = {\n      ...signupDetails,\n      education: education\n        .filter((obj) => obj.institutionName.trim() !== \"\")\n        .map((obj) => {\n          if (obj[\"endYear\"] === \"\") {\n            delete obj[\"endYear\"];\n          }\n          return obj;\n        }),\n    };\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  const handleLoginRecruiter = () => {\n    const tmpErrorHandler = {};\n    Object.keys(inputErrorHandler).forEach((obj) => {\n      if (inputErrorHandler[obj].required && inputErrorHandler[obj].untouched) {\n        tmpErrorHandler[obj] = {\n          required: true,\n          untouched: false,\n          error: true,\n          message: `${obj[0].toUpperCase() + obj.substr(1)} is required`,\n        };\n      } else {\n        tmpErrorHandler[obj] = inputErrorHandler[obj];\n      }\n    });\n\n    let updatedDetails = {\n      ...signupDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...signupDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    setSignupDetails(updatedDetails);\n\n    const verified = !Object.keys(tmpErrorHandler).some((obj) => {\n      return tmpErrorHandler[obj].error;\n    });\n\n    console.log(updatedDetails);\n\n    if (verified) {\n      axios\n        .post(apiList.signup, updatedDetails)\n        .then((response) => {\n          localStorage.setItem(\"token\", response.data.token);\n          localStorage.setItem(\"type\", response.data.type);\n          setLoggedin(isAuth());\n          setPopup({\n            open: true,\n            severity: \"success\",\n            message: \"Logged in successfully\",\n          });\n          console.log(response);\n        })\n        .catch((err) => {\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: err.response.data.message,\n          });\n          console.log(err.response);\n        });\n    } else {\n      setInputErrorHandler(tmpErrorHandler);\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"Incorrect Input\",\n      });\n    }\n  };\n\n  return loggedin ? (\n    <Redirect to=\"/\" />\n  ) : (\n    <Paper elevation={3} className={classes.body}>\n      <Grid container direction=\"column\" spacing={4} alignItems=\"center\">\n        <Grid item>\n          <Typography class=\"loginHeading\"  variant=\"h3\" component=\"h2\">\n            Signup\n          </Typography>\n        </Grid>\n        <Grid item>\n          <TextField\n            select\n            label=\"Category\"\n            variant=\"outlined\"\n            className={classes.inputBox}\n            value={signupDetails.type}\n            onChange={(event) => {\n              handleInput(\"type\", event.target.value);\n            }}\n          >\n            <MenuItem value=\"applicant\">Applicant</MenuItem>\n            <MenuItem value=\"recruiter\">Recruiter</MenuItem>\n          </TextField>\n\n          \n\n        </Grid>\n        <Grid item>\n          <TextField\n            label=\"Name\"\n            value={signupDetails.name}\n            onChange={(event) => handleInput(\"name\", event.target.value)}\n            className={classes.inputBox}\n            error={inputErrorHandler.name.error}\n            helperText={inputErrorHandler.name.message}\n            onBlur={(event) => {\n              if (event.target.value === \"\") {\n                handleInputError(\"name\", true, \"Name is required\");\n              } else {\n                handleInputError(\"name\", false, \"\");\n              }\n            }}\n            variant=\"outlined\"\n          />\n        </Grid>\n        <Grid item>\n          <EmailInput\n            class=\"userinput\"\n            label=\"Email\"\n            value={signupDetails.email}\n            onChange={(event) => handleInput(\"email\", event.target.value)}\n            inputErrorHandler={inputErrorHandler}\n            handleInputError={handleInputError}\n            className={classes.inputBox}\n            required={true}\n          />\n        </Grid>\n        <Grid item>\n          <PasswordInput\n            class=\"userinput\"\n            label=\"Password\"\n            value={signupDetails.password}\n            onChange={(event) => handleInput(\"password\", event.target.value)}\n            className={classes.inputBox}\n            error={inputErrorHandler.password.error}\n            helperText={inputErrorHandler.password.message}\n            onBlur={(event) => {\n              if (event.target.value === \"\") {\n                handleInputError(\"password\", true, \"Password is required\");\n              } else {\n                handleInputError(\"password\", false, \"\");\n              }\n            }}\n          />\n        </Grid>\n        {signupDetails.type === \"applicant\" ? (\n          <>\n            <MultifieldInput\n              education={education}\n              setEducation={setEducation}\n            />\n            <Grid item>\n              <ChipInput\n                className={classes.inputBox}\n                label=\"Skills\"\n                variant=\"outlined\"\n                helperText=\"Press enter to add skills\"\n                onChange={(chips) =>\n                  setSignupDetails({\n                    ...signupDetails,\n                    skills: chips,\n                  })\n                }\n              />\n            </Grid>\n            {/* <Grid item>\n              <FileUploadInput\n                className={classes.inputBox}\n                label=\"Resume (.pdf)\"\n                icon={<DescriptionIcon />}\n                // value={files.resume}\n                // onChange={(event) =>\n                //   setFiles({\n                //     ...files,\n                //     resume: event.target.files[0],\n                //   })\n                // }\n                uploadTo={apiList.uploadResume}\n                handleInput={handleInput}\n                identifier={\"resume\"}\n              />\n            </Grid>\n            <Grid item>\n              <FileUploadInput\n                className={classes.inputBox}\n                label=\"Profile Photo (.jpg/.png)\"\n                icon={<FaceIcon />}\n                // value={files.profileImage}\n                // onChange={(event) =>\n                //   setFiles({\n                //     ...files,\n                //     profileImage: event.target.files[0],\n                //   })\n                // }\n                uploadTo={apiList.uploadProfileImage}\n                handleInput={handleInput}\n                identifier={\"profile\"}\n              />\n            </Grid> */}\n          </>\n        ) : (\n          <>\n            <Grid item style={{ width: \"100%\" }}>\n              <TextField\n                label=\"Bio (upto 250 words)\"\n                multiline\n                rows={8}\n                style={{ width: \"100%\" }}\n                variant=\"outlined\"\n                value={signupDetails.bio}\n                onChange={(event) => {\n                  if (\n                    event.target.value.split(\" \").filter(function (n) {\n                      return n != \"\";\n                    }).length <= 250\n                  ) {\n                    handleInput(\"bio\", event.target.value);\n                  }\n                }}\n              />\n            </Grid>\n            <Grid item>\n              <PhoneInput\n                class=\"userinput\"\n                country={\"in\"}\n                value={phone}\n                onChange={(phone) => setPhone(phone)}\n              />\n            </Grid>\n          </>\n        )}\n\n        <Grid item>\n          <Button\n            class=\"userbutton\"\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              signupDetails.type === \"applicant\"\n                ? handleLogin()\n                : handleLoginRecruiter();\n            }}\n            className={classes.submitButton}\n          >\n            Signup\n          </Button>\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Login;\n\n// {/* <Grid item>\n//           <PasswordInput\n//             label=\"Re-enter Password\"\n//             value={signupDetails.tmpPassword}\n//             onChange={(event) => handleInput(\"tmpPassword\", event.target.value)}\n//             className={classes.inputBox}\n//             labelWidth={140}\n//             helperText={inputErrorHandler.tmpPassword.message}\n//             error={inputErrorHandler.tmpPassword.error}\n//             onBlur={(event) => {\n//               if (event.target.value !== signupDetails.password) {\n//                 handleInputError(\n//                   \"tmpPassword\",\n//                   true,\n//                   \"Passwords are not same.\"\n//                 );\n//               }\n//             }}\n//           />\n//         </Grid> */}\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Welcome.js",["163","164","165"],"import { Grid, Typography } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\nconst Welcome = (props) => {\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ minHeight: \"93vh\" }}\n    >\n      <div className=\"py-2 bg-gray-100 text-gray-900 min-h-screen\">\n        <main>\n          <div id=\"hero\" className=\"px-10 py-20 my-5 lg:flex items-center\">\n            <div className=\" sm:px-10 md:px-10 md:flex flex-col lg:block lg:w-1/2 lg:max-w-3xl lg:mr-8 lg:px-20\">\n              <div className=\"md:w-1/2 md:mr-10 lg:w-full lg:mr-0\">\n                <h1 className=\"text-3xl xl:text-5xl font-black md:leading-none xl:leading-tight\">\n                  {props.type === \"recruiter\"\n                    ? \"Hire a Talent Near You\"\n                    : \"Find high paying jobs with Worko\"}\n                </h1>\n                <p className=\"py-5 mt-4 xl:mt-2\">\n                  World Class Talent, just for you on contract, full-time or\n                  part-time, whatever you need.\n                </p>\n              </div>\n              <div className=\"flex-1\">\n                <div>\n                  <Link\n                    style={{ width: \"150%\" }}\n                    to=\"home\"\n                    className=\"homeBtn transition-all duration-300 bg-#4f89f1 w-40 border border-transparent rounded font-semibold tracking-wide text-sm px-5 py-4 focus:outline-none focus:shadow-outline bg-indigo-500 text-gray-100 hover:bg-indigo-600 hover:text-gray-200\"\n                  >\n                    {/* <button> */}\n                    {props.type === \"recruiter\" ? \"Find Talent\" : \"Find Job\"}\n                    {/* </button> */}\n                  </Link>\n                </div>\n              </div>\n            </div>\n            <div className=\"mt-6 w-full flex-1 lg:mt-0\">\n              <div />\n              <img\n                className\n                src=\"https://images.unsplash.com/photo-1524749292158-7540c2494485?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1950&q=85\"\n                alt=\"main\"\n              />\n            </div>\n          </div>\n          <div className=\"p-5 sm:px-10 md:px-20\" id=\"companies\">\n            <div className=\"max-w-screen-xl mx-auto\">\n              <img\n                className=\"mx-auto\"\n                src=\"https://storage.googleapis.com/devitary-image-host.appspot.com/15846471026680582071-Strip-Payment-Logos.png\"\n                alt=\"main\"\n              />\n            </div>\n          </div>\n          <div\n            className=\"px-5 sm:px-10 md:px-20 lg:px-10 xl:px-20 py-8 bg-indigo-100\"\n            id=\"features\"\n          >\n            <div className=\"py-10 max-w-screen-xl mx-auto\">\n              <h3 className=\"leading-none font-black text-3xl\">Features</h3>\n              <div className=\"flex flex-col justify-center flex-wrap lg:flex-row lg:items-stretch lg:flex-no-wrap lg:justify-between\">\n                <div className=\"w-full max-w-sm mt-6 lg:mt-8 bg-gray-100 rounded-2xl shadow-md p-12 lg:p-8 lg:mx-0 xl:p-12\">\n                  <div className=\"p-4 inline-block bg-indigo-200 rounded-lg\">\n                    <svg\n                      className=\"text-indigo-500 w-8\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth={2}\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <circle cx={12} cy={12} r={10} />\n                      <path d=\"M8 14s1.5 2 4 2 4-2 4-2\" />\n                      <line x1={9} y1={9} x2=\"9.01\" y2={9} />\n                      <line x1={15} y1={9} x2=\"15.01\" y2={9} />\n                    </svg>\n                  </div>\n                  <div className=\"mt-4 font-extrabold text-2xl tracking-wide\">\n                    Amazing People\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    We guarantee that every designer you ever work with will be\n                    an awesome member for your team. We conduct personal\n                    interview with every designer to ensure that we only get the\n                    best.\n                  </div>\n                </div>\n                <div className=\"w-full max-w-sm mt-8 bg-gray-100 rounded-2xl shadow-md p-12 lg:p-8 lg:mx-4 xl:p-12\">\n                  <div className=\"p-4 inline-block bg-green-200 rounded-lg\">\n                    <svg\n                      className=\"text-green-500 w-8\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth={2}\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <line x1={12} y1={1} x2={12} y2={23} />\n                      <path d=\"M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6\" />\n                    </svg>\n                  </div>\n                  <div className=\"mt-4 font-extrabold text-2xl tracking-wide\">\n                    Best Rates\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    Be assured that you will always get the best rates. We\n                    continously monitor global freelance wage trends to ensure\n                    that no one is under or overpaid.\n                  </div>\n                </div>\n                <div className=\"w-full max-w-sm mt-8 bg-gray-100 rounded-2xl shadow-md p-12 lg:p-8 lg:mx-4 xl:p-12\">\n                  <div className=\"p-4 inline-block bg-red-200 rounded-lg\">\n                    <svg\n                      className=\"text-red-500 w-8\"\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      viewBox=\"0 0 24 24\"\n                      fill=\"none\"\n                      stroke=\"currentColor\"\n                      strokeWidth={2}\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                    >\n                      <path\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"\n                      />\n                      <line\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        x1={12}\n                        y1={9}\n                        x2={12}\n                        y2={13}\n                      />\n                      <line\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        x1={12}\n                        y1={17}\n                        x2=\"12.01\"\n                        y2={17}\n                      />\n                    </svg>\n                  </div>\n                  <div className=\"mt-4 font-extrabold text-2xl tracking-wide\">\n                    Abuse Protection\n                  </div>\n                  <div className=\"text-sm text-gray-600\">\n                    Money is held by us in escrow subject to project completion.\n                    If there is any dispute, a customer service representative\n                    will manually review the case and take appropriate action.\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"px-5 sm:px-10 md:px-20 lg:px-10 xl:px-20 py-8 bg-gray-100\"\n            id=\"cards\"\n          >\n            {/* Popular Designer Section */}\n            <div className=\"max-w-screen-xl mx-auto\">\n              <h3 className=\"leading-none font-black text-3xl\">\n                Popular Designers\n              </h3>\n              <div className=\"lg:flex justify-between lg:mt-8\">\n                {/* Hired Card*/}\n                <div className=\" flex-col  items-center\">\n                  <div className=\"flex-1 flex w-full max-w-sm pt-5 lg:pt-0\">\n                    <div className=\"w-full p-2 sm:p-10 lg:px-8 xl:px-12 shadow-md rounded bg-gray-100 relative\">\n                      <div className=\"my-5 flex items-center\">\n                        <div\n                          className=\"w-16 h-16 bg-cover rounded-full border-2 border-gray-700\"\n                          alt=\"\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://res.cloudinary.com/difvkvxuy/image/upload/v1697566818/Latest%20Portfolio%20Images/photo_2023-10-17_23-49-54_rd8ord.jpg\")',\n                          }}\n                        />\n                        <div className=\"ml-5\">\n                          <div className=\"font-bold text-gray-800\">\n                            Junaid Ahmed Shaikh\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            Hired 3 Hours ago\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-lg font-bold  leading-tight\">\n                        Frontend Dev\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between mt-3 text-xs font-bold\">\n                          <div className=\"flex items-start\">\n                            <svg\n                              className=\"text-gray-600 w-4\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth={2}\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" />\n                              <circle cx={12} cy={10} r={3} />\n                            </svg>\n                            <span className=\"ml-1 text-gray-600\">\n                              New York City\n                            </span>\n                          </div>\n                          <div className=\"flex items-start ml-4\">\n                            <svg\n                              className=\"text-gray-600 w-4\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth={2}\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <rect\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                x={2}\n                                y={7}\n                                width={20}\n                                height={14}\n                                rx={2}\n                                ry={2}\n                              />\n                              <path\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"\n                              />\n                            </svg>\n                            <span className=\"ml-1 text-gray-600\">\n                              Google (3 Years)\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"text-center flex flex-nowrap  text-xs\">\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            Full Time\n                          </span>\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            Remote\n                          </span>\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            $30/Hr\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                {/* Hired Card*/}\n                <div className=\" flex-col  items-center\">\n                  <div className=\"flex-1 flex w-full max-w-sm pt-5 lg:pt-0\">\n                    <div className=\"w-full p-2 sm:p-10 lg:px-8 xl:px-12 shadow-md rounded bg-gray-100 relative\">\n                      <div className=\"my-5 flex items-center\">\n                        <div\n                          className=\"w-16 h-16 bg-cover rounded-full border-2 border-gray-700\"\n                          alt=\"\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://i.pinimg.com/136x136/fb/73/38/fb733864f9b1dd8f77629a71d7bccd04.jpg\")',\n                          }}\n                        />\n                        <div className=\"ml-5\">\n                          <div className=\"font-bold text-gray-800\">\n                            Akansha Kumar\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            Hired 3 Hours ago\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-lg font-bold  leading-tight\">\n                        SDE 1\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between mt-3 text-xs font-bold\">\n                          <div className=\"flex items-start\">\n                            <svg\n                              className=\"text-gray-600 w-4\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth={2}\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" />\n                              <circle cx={12} cy={10} r={3} />\n                            </svg>\n                            <span className=\"ml-1 text-gray-600\">India</span>\n                          </div>\n                          <div className=\"flex items-start ml-4\">\n                            <svg\n                              className=\"text-gray-600 w-4\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth={2}\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <rect\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                x={2}\n                                y={7}\n                                width={20}\n                                height={14}\n                                rx={2}\n                                ry={2}\n                              />\n                              <path\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"\n                              />\n                            </svg>\n                            <span className=\"ml-1 text-gray-600\">\n                              Google (1 Years)\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"text-center flex flex-nowrap  text-xs\">\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            Full Time\n                          </span>\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            Remote\n                          </span>\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            $80/Hr\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                {/* Hired Card*/}\n                <div className=\" flex-col  items-center\">\n                  <div className=\"flex-1 flex w-full max-w-sm pt-5 lg:pt-0\">\n                    <div className=\"w-full p-2 sm:p-10 lg:px-8 xl:px-12 shadow-md rounded bg-gray-100 relative\">\n                      <div className=\"my-5 flex items-center\">\n                        <div\n                          className=\"w-16 h-16 bg-cover rounded-full border-2 border-gray-700\"\n                          alt=\"\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://i.pinimg.com/736x/9d/7a/ef/9d7aefbc7d3f2a883f2fceae82964e8a.jpg\")',\n                          }}\n                        />\n                        <div className=\"ml-5\">\n                          <div className=\"font-bold text-gray-800\">Avi</div>\n                          <div className=\"text-xs text-gray-500\">\n                            Hired 9 Hours ago\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"text-lg font-bold  leading-tight\">\n                        Flutter Developer\n                      </div>\n                      <div>\n                        <div className=\"flex justify-between mt-3 text-xs font-bold\">\n                          <div className=\"flex items-start\">\n                            <svg\n                              className=\"text-gray-600 w-4\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth={2}\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <path d=\"M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z\" />\n                              <circle cx={12} cy={10} r={3} />\n                            </svg>\n                            <span className=\"ml-1 text-gray-600\">\n                              India | Mumbai\n                            </span>\n                          </div>\n                          <div className=\"flex items-start ml-4\">\n                            <svg\n                              className=\"text-gray-600 w-4\"\n                              xmlns=\"http://www.w3.org/2000/svg\"\n                              viewBox=\"0 0 24 24\"\n                              fill=\"none\"\n                              stroke=\"currentColor\"\n                              strokeWidth={2}\n                              strokeLinecap=\"round\"\n                              strokeLinejoin=\"round\"\n                            >\n                              <rect\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                x={2}\n                                y={7}\n                                width={20}\n                                height={14}\n                                rx={2}\n                                ry={2}\n                              />\n                              <path\n                                xmlns=\"http://www.w3.org/2000/svg\"\n                                d=\"M16 21V5a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16\"\n                              />\n                            </svg>\n                            <span className=\"ml-1 text-gray-600\">\n                              Google (3 Years)\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"text-center flex flex-nowrap  text-xs\">\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            Full Time\n                          </span>\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            Remote\n                          </span>\n                          <span className=\" grid place-items-center font-semibold w-4/12 mt-6 mx-1 p-1 rounded bg-gray-200 text-gray-600\">\n                            $30/Hr\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div\n            className=\"px-5 sm:px-10 md:px-20 lg:px-10 xl:px-20 py-8 bg-indigo-100\"\n            id=\"blog-posts\"\n          >\n            {/* Popular Post Section */}\n            <div className=\"max-w-screen-xl mx-auto\">\n              <div className=\"xl:flex\">\n                <div>\n                  <h3 className=\"leading-none font-black text-3xl\">\n                    Popular Posts\n                  </h3>\n                  <div className=\"flex flex-col items-center lg:flex-row lg:items-stretch lg:justify-around\">\n                    <a\n                      href=\"https://owaiskhan.me\"\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8 xl:mr-8\"\n                    >\n                      <div className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg bg-gray-100 relative\">\n                        <div\n                          className=\"w-full h-48 bg-cover rounded-t-lg\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://images.unsplash.com/3/doctype-hi-res.jpg?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=768&q=80\")',\n                          }}\n                        />\n                        <div className=\"p-6\">\n                          <div className=\"text-lg font-bold\">\n                            Tips for creating an amazing design system\n                          </div>\n                          <div className=\"mt-2 text-gray-900 text-sm\">\n                            Learn how to create a new design system that is\n                            beautiful and efficient for creating your UI\n                            components.\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    <a\n                      href=\"https://timerse.com\"\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8 xl:mr-8\"\n                    >\n                      <div className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg bg-gray-100 relative\">\n                        <div\n                          className=\"w-full h-48 bg-cover rounded-t-lg\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://images.unsplash.com/photo-1572044162444-ad60f128bdea?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=768&q=80\")',\n                          }}\n                        />\n                        <div className=\"p-6\">\n                          <div className=\"text-lg font-bold\">\n                            Using a drawing tablet to create beautiful icons\n                          </div>\n                          <div className=\"mt-2 text-gray-900 text-sm\">\n                            Good Icons are hard to come by. This article guides\n                            you on how to create beautiful sketched icons using\n                            a drawing pad.\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n                <div className=\"mt-12 xl:mt-0 xl:ml-8\">\n                  <h3 className=\"leading-none font-black text-3xl\">\n                    Recent Posts\n                  </h3>\n                  <div className=\"flex flex-col items-center lg:flex-row lg:items-stretch lg:justify-around xl:flex-col\">\n                    <a\n                      href=\"https://owaiskhan.me\"\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8\"\n                    >\n                      <div\n                        className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg\n                    bg-gray-100 relative xl:flex xl:flex-row-reverse xl:items-center xl:px-6 xl:py-8\"\n                      >\n                        <div\n                          className=\"w-full h-48 bg-cover rounded-t-lg xl:w-32 xl:h-20 xl:rounded-lg xl:ml-2\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://images.unsplash.com/photo-1452830978618-d6feae7d0ffa?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=512&q=80\")',\n                          }}\n                        />\n                        <div className=\"p-6 xl:p-0\">\n                          <div className=\"text-lg font-bold\">\n                            How to work effectively with freelancers\n                          </div>\n                          <div className=\"mt-2 text-gray-900 text-sm xl:hidden\">\n                            Hiring a freelancer for your new project can be\n                            challenging if you've never done before. Learn some\n                            tips that will allow you to have a better experience\n                            working with freelancers\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                    <a\n                      href=\"https://owaiskhan.me\"\n                      className=\"flex w-full max-w-sm mt-6 lg:mt-8\"\n                    >\n                      <div\n                        className=\"transition-all duration-300 cursor-pointer w-full shadow-lg hover:shadow-xl rounded-lg\n                    bg-gray-100 relative xl:flex xl:flex-row-reverse xl:items-center xl:px-6 xl:py-8\"\n                      >\n                        <div\n                          className=\"w-full h-48 bg-cover rounded-t-lg xl:w-32 xl:h-20 xl:rounded-lg xl:ml-2\"\n                          style={{\n                            backgroundImage:\n                              'url(\"https://images.unsplash.com/photo-1581287053822-fd7bf4f4bfec?ixlib=rb-1.2.1&auto=format&fit=crop&w=512&q=80\")',\n                          }}\n                        />\n                        <div className=\"p-6 xl:p-0\">\n                          <div className=\"text-lg font-bold\">\n                            How to create smooth React Native animations\n                          </div>\n                          <div className=\"mt-2 text-gray-900 text-sm xl:hidden\">\n                            Animations play a vital role in user experience.\n                            This article describes how you can create butter\n                            smooth 60 FPS animations easily.\n                          </div>\n                        </div>\n                      </div>\n                    </a>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </main>\n        <footer className=\"px-5 sm:px-10 md:px-20 py-8\">\n          <div className=\"flex flex-col items-center lg:flex-row-reverse justify-between\">\n            <div className>\n              <a\n                className=\"mx-4 text-sm font-bold text-indigo-600 hover:text-indigo-800\"\n                href=\"#\"\n              >\n                Home\n              </a>\n              <a\n                className=\"mx-4 text-sm font-bold text-indigo-600 hover:text-indigo-800\"\n                href=\"#\"\n              >\n                About Us\n              </a>\n              <a\n                className=\"mx-4 text-sm font-bold text-indigo-600 hover:text-indigo-800\"\n                href=\"#\"\n              >\n                Careers\n              </a>\n            </div>\n\n            <div className=\"mt-4 text-xs font-bold text-gray-500\">\n              © 2023 Online Job Portal\n            </div>\n          </div>\n        </footer>\n      </div>\n    </Grid>\n  );\n};\n\nexport const ErrorPage = (props) => {\n  return (\n    <Grid\n      container\n      item\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      style={{ padding: \"30px\", minHeight: \"93vh\" }}\n    >\n      <Grid item>\n        <Typography variant=\"h2\">Error 404</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Welcome;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Navbar.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/AcceptedApplicants.js",["166","167","168","169","170","171","172","173","174","175"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n  Avatar,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  avatar: {\n    width: theme.spacing(17),\n    height: theme.spacing(17),\n  },\n}));\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          {/* <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Application Status\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"rejected\"\n                      checked={searchOptions.status.rejected}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Rejected\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"applied\"\n                      checked={searchOptions.status.applied}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Applied\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"shortlisted\"\n                      checked={searchOptions.status.shortlisted}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          status: {\n                            ...searchOptions.status,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Shortlisted\"\n                />\n              </Grid>\n            </Grid>\n          </Grid> */}\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{\n                  border: \"1px solid #D1D1D1\",\n                  borderRadius: \"5px\",\n                }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"name\"\n                    checked={searchOptions.sort[\"jobApplicant.name\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"name\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"name\">\n                    <Typography>Name</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.name\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.name\": {\n                            ...searchOptions.sort[\"jobApplicant.name\"],\n                            desc: !searchOptions.sort[\"jobApplicant.name\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.name\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{\n                  border: \"1px solid #D1D1D1\",\n                  borderRadius: \"5px\",\n                }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"jobTitle\"\n                    checked={searchOptions.sort[\"job.title\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"job.title\": {\n                            ...searchOptions.sort[\"job.title\"],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"jobTitle\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"jobTitle\">\n                    <Typography>Job Title</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"job.title\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"job.title\": {\n                            ...searchOptions.sort[\"job.title\"],\n                            desc: !searchOptions.sort[\"job.title\"].desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"job.title\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{\n                  border: \"1px solid #D1D1D1\",\n                  borderRadius: \"5px\",\n                }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"dateOfJoining\"\n                    checked={searchOptions.sort.dateOfJoining.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfJoining: {\n                            ...searchOptions.sort.dateOfJoining,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"dateOfJoining\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"dateOfJoining\">\n                    <Typography>Date of Joining</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.dateOfJoining.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          dateOfJoining: {\n                            ...searchOptions.sort.dateOfJoining,\n                            desc: !searchOptions.sort.dateOfJoining.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.dateOfJoining.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={6}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{\n                  border: \"1px solid #D1D1D1\",\n                  borderRadius: \"5px\",\n                }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[[\"jobApplicant.rating\"]],\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort[\"jobApplicant.rating\"].status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          \"jobApplicant.rating\": {\n                            ...searchOptions.sort[\"jobApplicant.rating\"],\n                            desc: !searchOptions.sort[\"jobApplicant.rating\"]\n                              .desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort[\"jobApplicant.rating\"].desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst ApplicationTile = (props) => {\n  const classes = useStyles();\n  const { application, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n  const [open, setOpen] = useState(false);\n  const [openEndJob, setOpenEndJob] = useState(false);\n  const [rating, setRating] = useState(application.jobApplicant.rating);\n\n  const appliedOn = new Date(application.dateOfApplication);\n\n  const changeRating = () => {\n    axios\n      .put(\n        apiList.rating,\n        {\n          rating: rating,\n          applicantId: application.jobApplicant.userId,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n          },\n        }\n      )\n      .then((response) => {\n        console.log(response.data);\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: \"Rating updated successfully\",\n        });\n        // fetchRating();\n        getData();\n        setOpen(false);\n      })\n      .catch((err) => {\n        // console.log(err.response);\n        console.log(err);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        // fetchRating();\n        getData();\n        setOpen(false);\n      });\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseEndJob = () => {\n    setOpenEndJob(false);\n  };\n\n  const colorSet = {\n    applied: \"#3454D1\",\n    shortlisted: \"#DC851F\",\n    accepted: \"#09BC8A\",\n    rejected: \"#D1345B\",\n    deleted: \"#B49A67\",\n    cancelled: \"#FF8484\",\n    finished: \"#4EA5D9\",\n  };\n\n  const getResume = () => {\n    if (\n      application.jobApplicant.resume &&\n      application.jobApplicant.resume !== \"\"\n    ) {\n      const address = `${server}${application.jobApplicant.resume}`;\n      console.log(address);\n      axios(address, {\n        method: \"GET\",\n        responseType: \"blob\",\n      })\n        .then((response) => {\n          const file = new Blob([response.data], {\n            type: \"application/pdf\",\n          });\n          const fileURL = URL.createObjectURL(file);\n          window.open(fileURL);\n        })\n        .catch((error) => {\n          console.log(error);\n          setPopup({\n            open: true,\n            severity: \"error\",\n            message: \"Error\",\n          });\n        });\n    } else {\n      setPopup({\n        open: true,\n        severity: \"error\",\n        message: \"No resume found\",\n      });\n    }\n  };\n\n  const updateStatus = (status) => {\n    const address = `${apiList.applications}/${application._id}`;\n    const statusData = {\n      status: status,\n      dateOfJoining: new Date().toISOString(),\n    };\n    axios\n      .put(address, statusData, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        handleCloseEndJob();\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n        handleCloseEndJob();\n      });\n  };\n  console.log(application.jobApplicant, \"aasdfassfassf\");\n\n  return (\n    <Paper className={classes.jobTileOuter} elevation={3}>\n      <Grid container>\n        <Grid\n          item\n          xs={2}\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n          }}\n        >\n          <Avatar\n            src={`${application.jobApplicant.profile}`}\n            className={classes.avatar}\n          />\n        </Grid>\n        <Grid container item xs={7} spacing={1} direction=\"column\">\n          <Grid item>\n            <Typography variant=\"h5\">\n              {application.jobApplicant.name}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <Rating\n              value={\n                application.jobApplicant.rating !== -1\n                  ? application.jobApplicant.rating\n                  : null\n              }\n              readOnly\n            />\n          </Grid>\n          <Grid item>Job Title: {application.job.title}</Grid>\n          <Grid item>Role: {application.job.jobType}</Grid>\n          <Grid item>Applied On: {appliedOn.toLocaleDateString()}</Grid>\n          <Grid item>\n            SOP: {application.sop !== \"\" ? application.sop : \"Not Submitted\"}\n          </Grid>\n          <Grid item>\n            {application.jobApplicant.skills.map((skill) => (\n              <Chip label={skill} style={{ marginRight: \"2px\" }} />\n            ))}\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" xs={3}>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              className={classes.statusBlock}\n              color=\"primary\"\n              // onClick={() => getResume()}\n            >\n              <a\n                style={{\n                  textDecoration: \"none\",\n                  color: \"white\",\n                }}\n                className={classes.statusBlock}\n                href={application.jobApplicant.resume}\n                download\n              >\n                Download Resume\n              </a>\n            </Button>\n          </Grid>\n          <Grid item container xs>\n            {/* {buttonSet[application.status]} */}\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              style={{\n                background: \"#09BC8A\",\n              }}\n              onClick={() => {\n                setOpenEndJob(true);\n              }}\n            >\n              End Job\n            </Button>\n          </Grid>\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.statusBlock}\n              onClick={() => {\n                setOpen(true);\n              }}\n            >\n              Rate Applicant\n            </Button>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Rating\n            name=\"simple-controlled\"\n            style={{ marginBottom: \"30px\" }}\n            value={rating === -1 ? null : rating}\n            onChange={(event, newValue) => {\n              setRating(newValue);\n            }}\n          />\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ padding: \"10px 50px\" }}\n            onClick={() => changeRating()}\n          >\n            Submit\n          </Button>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openEndJob}\n        onClose={handleCloseEndJob}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => {\n                  updateStatus(\"finished\");\n                }}\n              >\n                Yes\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseEndJob()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst AcceptedApplicants = (props) => {\n  const setPopup = useContext(SetPopupContext);\n  const [applications, setApplications] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    sort: {\n      \"jobApplicant.name\": {\n        status: false,\n        desc: false,\n      },\n      \"job.title\": {\n        status: false,\n        desc: false,\n      },\n      dateOfJoining: {\n        status: true,\n        desc: true,\n      },\n      \"jobApplicant.rating\": {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [];\n    searchParams = [...searchParams, `status=accepted`];\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = `${apiList.applicants}`;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setApplications(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response);\n        // console.log(err.response.data);\n        setApplications([]);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid item style={{width: \"93vw\"}}>\n        <Grid\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            width: \"100%\",\n            alignItems: \"center\",\n            margin: \"2rem 0\",\n          }}\n        >\n          <Grid item>\n            <Typography >All Applicants</Typography>\n          </Grid>\n          <Grid item>\n            <IconButton onClick={() => setFilterOpen(true)}>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Grid\n          class=\"boxOfContent\"\n        >\n          {applications.length > 0 ? (\n            applications.map((obj) => (\n              <Grid item>\n                {/* {console.log(obj)} */}\n                <ApplicationTile application={obj} getData={getData} />\n              </Grid>\n            ))\n          ) : (\n            <Typography variant=\"h5\" style={{ textAlign: \"center\" }}>\n              No Applications Found\n            </Typography>\n          )}\n        </Grid>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default AcceptedApplicants;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/Profile.js",["176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  List,\n  ListItem,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport PhoneInput from \"react-phone-input-2\";\nimport \"react-phone-input-2/lib/material.css\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst Profile = (props) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  const [profileDetails, setProfileDetails] = useState({\n    name: \"\",\n    bio: \"\",\n    contactNumber: \"\",\n    companyName: \"\",\n    emailID: \"\",\n  });\n\n  const [phone, setPhone] = useState(\"\");\n  console.log(\"🚀 ~ Profile ~ profileDetails:\", profileDetails);\n\n  const handleInput = (key, value) => {\n    setProfileDetails({\n      ...profileDetails,\n      [key]: value,\n    });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    axios\n      .get(apiList.user, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setProfileDetails(response.data);\n        setPhone(response.data.contactNumber);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  const handleUpdate = () => {\n    let updatedDetails = {\n      ...profileDetails,\n    };\n    if (phone !== \"\") {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: `+${phone}`,\n      };\n    } else {\n      updatedDetails = {\n        ...profileDetails,\n        contactNumber: \"\",\n      };\n    }\n\n    axios\n      .put(apiList.user, updatedDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  // For Testing Purpose\n  const companyName = \"companyName\";\n  const startDate = \"11/11/2022\";\n  const endDate = \"30/12/2023\";\n  const jobTitle = \"Frontend Developer\";\n  const department = \"Designer Department\";\n  let firstName = profileDetails.name;\n  let lastName = \"Shaikh\";\n  let emailAddress = \"junaid@gmail.com\";\n  let phoneNo = 9859438294;\n  let profileLink =\n    \"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c1/Google_%22G%22_logo.svg/1024px-Google_%22G%22_logo.svg.png\";\n  return (\n    <>\n      <Grid container className=\"mainGridContainer\">\n        <Grid style={{ width: \"100%\", padding: \"10px 100px\" }}>\n          <Paper className=\"w-full \">\n            <Grid className=\"flex flex-cols bg-slate-400 py-10 dssss\">\n              <div className=\"w-20 flex justify-items-center mr-5 ml-10\">\n                <img\n                  className=\"w-12/12 h-6/12 rounded-full\"\n                  src={profileLink}\n                ></img>\n              </div>\n              <div className=\"flex flex-col\">\n                <h1 className=\"cardTitle\">{profileDetails.name}</h1>\n                <h3 className=\"cardSubTitle\">Recruitor</h3>\n              </div>\n            </Grid>\n            <Grid className=\"w-full bg-white py-5 px-10 rounded-lg\">\n              <Grid className=\"personalSection\">\n                <Typography> Personal Information </Typography>\n                <div className=\"flex my-5 \">\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Full Name\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {profileDetails.name}\n                    </Typography>\n                  </Grid>\n                  {/* <Grid xs className=\"flex flex-col mr-10\"> <Typography className=\"profileSectionHeaderList\"></Typography> <Typography className=\"profileSectionUserDetail\">{lastName}</Typography></Grid>  */}\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Email Address\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {profileDetails.emailID}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Phone\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {profileDetails.contactNumber}\n                    </Typography>\n                  </Grid>\n                </div>\n              </Grid>\n              <Grid className=\"personalSection\">\n                <Typography> Employment Details </Typography>\n                <div className=\"flex my-5\">\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Job Title\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {jobTitle}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Department\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {department}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Start Date\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {startDate}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      End Date\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      {endDate}\n                    </Typography>\n                  </Grid>\n                  <Grid xs className=\"flex flex-col mr-10\">\n                    {\" \"}\n                    <Typography className=\"profileSectionHeaderList\">\n                      Employment Status\n                    </Typography>{\" \"}\n                    <Typography className=\"profileSectionUserDetail\">\n                      <span className=\"profileSectionUserDetail bg-green-200 p-1 text-green-600 rounded-lg\">\n                        Active\n                      </span>\n                    </Typography>\n                  </Grid>\n                </div>\n              </Grid>\n            </Grid>\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Profile;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/MyJobs.js",["192","193","194","195","196","197","198","199"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n  Button,\n  Chip,\n  Grid,\n  IconButton,\n  InputAdornment,\n  makeStyles,\n  Paper,\n  TextField,\n  Typography,\n  Modal,\n  Slider,\n  FormControlLabel,\n  FormGroup,\n  MenuItem,\n  Checkbox,\n  Box,\n} from \"@material-ui/core\";\nimport { useHistory } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport axios from \"axios\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  button: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  jobTileOuter: {\n    padding: \"30px\",\n    margin: \"20px 0\",\n    boxSizing: \"border-box\",\n    width: \"100%\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  statusBlock: {\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    textTransform: \"uppercase\",\n  },\n}));\n\nconst JobTile = (props) => {\n  const classes = useStyles();\n  let history = useHistory();\n  const { job, getData } = props;\n  const setPopup = useContext(SetPopupContext);\n\n  const [open, setOpen] = useState(false);\n  const [openUpdate, setOpenUpdate] = useState(false);\n  const [jobDetails, setJobDetails] = useState(job);\n\n  console.log(jobDetails);\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleClick = (location) => {\n    history.push(location);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleCloseUpdate = () => {\n    setOpenUpdate(false);\n  };\n\n  const handleDelete = () => {\n    \n    console.log(job._id);\n    axios\n      .delete(`${apiList.jobs}/${job._id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleClose();\n      })\n      .catch((err) => {\n  \n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleClose();\n      });\n  };\n\n  const handleJobUpdate = () => {\n    axios\n      .put(`${apiList.jobs}/${job._id}`, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        getData();\n        handleCloseUpdate();\n      })\n      .catch((err) => {\n        console.log(err.response);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        handleCloseUpdate();\n      });\n  };\n\n  const postedOn = new Date(job.dateOfPosting);\n  // console.log(\"Workiiiiiing\");\n  // console.log(jobTileOuter);\n  // const cname = handleJobUpdate;\n   \n  console.log(\"Company Name \"+ job.companyName)\n  return (\n    <Paper\n      class=\"w-6/12 shadow-md my-2 py-5 px-3 rounded-md\"\n      className={classes.jobTileOuter}\n    >\n      <Grid >\n        <Grid>\n          <Grid item>\n            <Typography class=\"font-medium text-xl text-black\">\n              {job.title} \n            </Typography>\n          </Grid>\n\n          <Grid class=\"cardSubTitle\">\n            <span class=\"\">\n              {\" \"}\n              <i class=\"fa-solid fa-location-dot \"> </i> {job.address}{\" \"}\n            </span>\n            <span class=\"\">\n              <i class=\"fa-solid fa-building\"></i> {job.companyName}\n            </span>\n          </Grid>\n          \n          {/* <Grid item>\n            <Rating value={job.rating !== -1 ? job.rating : null} readOnly />\n          </Grid> */}\n\n          <Grid class=\"cardSubTitle\">\n            <span>  <i class=\"fa-solid fa-child\"></i> {job.jobType}  </span>\n            <span>  <i class=\"fa-solid fa-indian-rupee-sign\"></i>  {job.salary}{\" \"}\n            per month </span>\n            <span  item>\n              <i class=\"fa-solid fa-timeline\"></i>{\" \"}\n              {job.duration !== 0 ? `${job.duration} month` : `Flexible`} <i class=\"fa-solid fa-timer\"></i>\n            </span>\n          </Grid>\n         \n\n          <Grid class=\"cardSubTitle my-5\" >\n            <span> Number of Applicants: {job.maxApplicants} </span>  {\"       \"}  \n          <span item> Remaining Number of Positions:{\" \"}  {job.maxPositions - job.acceptedCandidates} </span></Grid>\n          <Grid class=\"cardSubTitle\" item>Date Of Posting: {postedOn.toLocaleDateString()}</Grid>\n          \n            <Grid item xs class=\"flex my-5\">\n              <Grid class=\"flex justify-items-start w-6/12\">\n                <Button \n                  class=\"w-auto\"\n                  className={classes.statusBlock}\n                  onClick={() => handleClick(`/job/applications/${job._id}`)}\n                >\n                  View Applications\n                </Button>\n              </Grid>\n              <Grid item xs class=\"flex w-6/12 justify-evenly\">\n              <Button\n                class=\"\"\n                className={classes.statusBlock}\n                onClick={() => {\n                  setOpenUpdate(true);\n                }}\n              >\n                Edit\n              </Button>\n              <Button\n                class=\"\"\n                className={classes.statusBlock}\n                onClick={() => {\n                  setOpen(true);\n                }}\n              >\n                Delete\n              </Button>\n              </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Are you sure?\n          </Typography>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleDelete()}\n              >\n                Delete\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleClose()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n      <Modal\n        open={openUpdate}\n        onClose={handleCloseUpdate}\n        className={classes.popupDialog}\n      >\n        <Paper\n          style={{\n            padding: \"20px\",\n            outline: \"none\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            minWidth: \"30%\",\n            alignItems: \"center\",\n          }}\n        >\n          <Typography variant=\"h4\" style={{ marginBottom: \"10px\" }}>\n            Update Details\n          </Typography>\n          <Grid\n            container\n            direction=\"column\"\n            spacing={3}\n            style={{ margin: \"10px\" }}\n          >\n            <Grid item>\n              <TextField\n                label=\"Application Deadline\"\n                type=\"datetime-local\"\n                value={jobDetails.deadline.substr(0, 16)}\n                onChange={(event) => {\n                  handleInput(\"deadline\", event.target.value);\n                }}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                variant=\"outlined\"\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Maximum Number Of Applicants\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxApplicants}\n                onChange={(event) => {\n                  handleInput(\"maxApplicants\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n            <Grid item>\n              <TextField\n                label=\"Positions Available\"\n                type=\"number\"\n                variant=\"outlined\"\n                value={jobDetails.maxPositions}\n                onChange={(event) => {\n                  handleInput(\"maxPositions\", event.target.value);\n                }}\n                InputProps={{ inputProps: { min: 1 } }}\n                fullWidth\n              />\n            </Grid>\n          </Grid>\n          <Grid container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleJobUpdate()}\n              >\n                Update\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ padding: \"10px 50px\" }}\n                onClick={() => handleCloseUpdate()}\n              >\n                Cancel\n              </Button>\n            </Grid>\n          </Grid>\n        </Paper>\n      </Modal>\n    </Paper>\n  );\n};\n\nconst FilterPopup = (props) => {\n  const classes = useStyles();\n  const { open, handleClose, searchOptions, setSearchOptions, getData } = props;\n  return (\n    <Modal open={open} onClose={handleClose} className={classes.popupDialog}>\n      <Paper\n        style={{\n          padding: \"50px\",\n          outline: \"none\",\n          minWidth: \"50%\",\n        }}\n      >\n        <Grid container direction=\"column\" alignItems=\"center\" spacing={3}>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Job Type\n            </Grid>\n            <Grid\n              container\n              item\n              xs={9}\n              justify=\"space-around\"\n              // alignItems=\"center\"\n            >\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"fullTime\"\n                      checked={searchOptions.jobType.fullTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Full Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"partTime\"\n                      checked={searchOptions.jobType.partTime}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Part Time\"\n                />\n              </Grid>\n              <Grid item>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      name=\"wfh\"\n                      checked={searchOptions.jobType.wfh}\n                      onChange={(event) => {\n                        setSearchOptions({\n                          ...searchOptions,\n                          jobType: {\n                            ...searchOptions.jobType,\n                            [event.target.name]: event.target.checked,\n                          },\n                        });\n                      }}\n                    />\n                  }\n                  label=\"Work From Home\"\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Salary\n            </Grid>\n            <Grid item xs={9}>\n              <Slider\n                valueLabelDisplay=\"auto\"\n                valueLabelFormat={(value) => {\n                  return value * (100000 / 100);\n                }}\n                marks={[\n                  { value: 0, label: \"0\" },\n                  { value: 100, label: \"100000\" },\n                ]}\n                value={searchOptions.salary}\n                onChange={(event, value) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    salary: value,\n                  })\n                }\n              />\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Duration \n            </Grid>\n            <Grid item xs={9}>\n              <TextField\n                select\n                label=\"Duration\"\n                variant=\"outlined\"\n                fullWidth\n                value={searchOptions.duration}\n                onChange={(event) =>\n                  setSearchOptions({\n                    ...searchOptions,\n                    duration: event.target.value,\n                  })\n                }\n              >\n                <MenuItem value=\"0\">All</MenuItem>\n                <MenuItem value=\"1\">1</MenuItem>\n                <MenuItem value=\"2\">2</MenuItem>\n                <MenuItem value=\"3\">3</MenuItem>\n                <MenuItem value=\"4\">4</MenuItem>\n                <MenuItem value=\"5\">5</MenuItem>\n                <MenuItem value=\"6\">6</MenuItem>\n                <MenuItem value=\"7\">7</MenuItem>\n              </TextField>\n            </Grid>\n          </Grid>\n          <Grid container item alignItems=\"center\">\n            <Grid item xs={3}>\n              Sort\n            </Grid>\n            <Grid item container direction=\"row\" xs={9}>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"salary\"\n                    checked={searchOptions.sort.salary.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"salary\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"salary\">\n                    <Typography>Salary</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.salary.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          salary: {\n                            ...searchOptions.sort.salary,\n                            desc: !searchOptions.sort.salary.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.salary.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"duration\"\n                    checked={searchOptions.sort.duration.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"duration\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"duration\">\n                    <Typography>Duration </Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.duration.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          duration: {\n                            ...searchOptions.sort.duration,\n                            desc: !searchOptions.sort.duration.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.duration.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n              <Grid\n                item\n                container\n                xs={4}\n                justify=\"space-around\"\n                alignItems=\"center\"\n                style={{ border: \"1px solid #D1D1D1\", borderRadius: \"5px\" }}\n              >\n                <Grid item>\n                  <Checkbox\n                    name=\"rating\"\n                    checked={searchOptions.sort.rating.status}\n                    onChange={(event) =>\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            status: event.target.checked,\n                          },\n                        },\n                      })\n                    }\n                    id=\"rating\"\n                  />\n                </Grid>\n                <Grid item>\n                  <label for=\"rating\">\n                    <Typography>Rating</Typography>\n                  </label>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    disabled={!searchOptions.sort.rating.status}\n                    onClick={() => {\n                      setSearchOptions({\n                        ...searchOptions,\n                        sort: {\n                          ...searchOptions.sort,\n                          rating: {\n                            ...searchOptions.sort.rating,\n                            desc: !searchOptions.sort.rating.desc,\n                          },\n                        },\n                      });\n                    }}\n                  >\n                    {searchOptions.sort.rating.desc ? (\n                      <ArrowDownwardIcon />\n                    ) : (\n                      <ArrowUpwardIcon />\n                    )}\n                  </IconButton>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Grid item>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ padding: \"10px 50px\" }}\n              onClick={() => getData()}\n            >\n              Apply\n            </Button>\n          </Grid>\n        </Grid>\n      </Paper>\n    </Modal>\n  );\n};\n\nconst MyJobs = (props) => {\n  const [jobs, setJobs] = useState([]);\n  const [filterOpen, setFilterOpen] = useState(false);\n  const [searchOptions, setSearchOptions] = useState({\n    query: \"\",\n    jobType: {\n      fullTime: false,\n      partTime: false,\n      wfh: false,\n    },\n    salary: [0, 100],\n    duration: \"0\",\n    sort: {\n      salary: {\n        status: false,\n        desc: false,\n      },\n      duration: {\n        status: false,\n        desc: false,\n      },\n      rating: {\n        status: false,\n        desc: false,\n      },\n    },\n  });\n\n  const setPopup = useContext(SetPopupContext);\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const getData = () => {\n    let searchParams = [`myjobs=1`];\n    if (searchOptions.query !== \"\") {\n      searchParams = [...searchParams, `q=${searchOptions.query}`];\n    }\n    if (searchOptions.jobType.fullTime) {\n      searchParams = [...searchParams, `jobType=Full%20Time`];\n    }\n    if (searchOptions.jobType.partTime) {\n      searchParams = [...searchParams, `jobType=Part%20Time`];\n    }\n    if (searchOptions.jobType.wfh) {\n      searchParams = [...searchParams, `jobType=Work%20From%20Home`];\n    }\n    if (searchOptions.salary[0] != 0) {\n      searchParams = [\n        ...searchParams,\n        `salaryMin=${searchOptions.salary[0] * 1000}`,\n      ];\n    }\n    if (searchOptions.salary[1] != 100) {\n      searchParams = [\n        ...searchParams,\n        `salaryMax=${searchOptions.salary[1] * 1000}`,\n      ];\n    }\n    if (searchOptions.duration != \"0\") {\n      searchParams = [...searchParams, `duration=${searchOptions.duration}`];\n    }\n\n    let asc = [],\n      desc = [];\n\n    Object.keys(searchOptions.sort).forEach((obj) => {\n      const item = searchOptions.sort[obj];\n      if (item.status) {\n        if (item.desc) {\n          desc = [...desc, `desc=${obj}`];\n        } else {\n          asc = [...asc, `asc=${obj}`];\n        }\n      }\n    });\n    searchParams = [...searchParams, ...asc, ...desc];\n    const queryString = searchParams.join(\"&\");\n    console.log(queryString);\n    let address = apiList.jobs;\n    if (queryString !== \"\") {\n      address = `${address}?${queryString}`;\n    }\n\n    console.log(address);\n    axios\n      .get(address, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        console.log(response.data);\n        setJobs(response.data);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        class=\"mainGridContainer\"\n        direction=\"column\"\n        alignItems=\"center\"\n        style={{ padding: \"30px\", minHeight: \"93vh\"  }}\n      >\n        <Grid\n          item\n          container\n          direction=\"column\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          {/* <Grid item xs>\n           \n          </Grid> */}\n          <Grid item xs>\n            <TextField\n              label=\"Search Jobs\"\n              value={searchOptions.query}\n              onChange={(event) =>\n                setSearchOptions({\n                  ...searchOptions,\n                  query: event.target.value,\n                })\n              }\n              onKeyPress={(ev) => {\n                if (ev.key === \"Enter\") {\n                  getData();\n                }\n              }}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment>\n                    <IconButton onClick={() => getData()}>\n                      <SearchIcon />\n                    </IconButton>\n                  </InputAdornment>\n                ),\n              }}\n              style={{ width: \"100vw\" }}\n              variant=\"outlined\"\n            />\n          </Grid>\n          <Grid\n            item\n            // style={{\n            //   display: \"flex\",\n            //   justifyContent: \"space-between\",\n            //   width: \"100%\",\n            //   alignItems: \"center\",\n            //   margin: \"2rem 0\",\n            // }}\n           className=\"flex justify-between  w-full items-center mx-8\">\n            <Typography>Manage Postings </Typography>\n            <IconButton class=\"p-1\" onClick={() => setFilterOpen(true)}>\n              <Typography>Filter</Typography>\n              <FilterListIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n\n        <Box class=\"boxOfContent\">\n          <Grid direction=\"column\" alignItems=\"stretch\" justify=\"center\">\n            {jobs.length > 0 ? (\n              jobs.map((job) => {\n                return <JobTile job={job} getData={getData} class=\"Hello\" />;\n              })\n            ) : (\n              <Typography\n                variant=\"h5\"\n                style={{ textAlign: \"center\", justifyContent: \"center\" }}\n              >\n                No jobs found\n              </Typography>\n            )}\n          </Grid>\n        </Box>\n      </Grid>\n      <FilterPopup\n        open={filterOpen}\n        searchOptions={searchOptions}\n        setSearchOptions={setSearchOptions}\n        handleClose={() => setFilterOpen(false)}\n        getData={() => {\n          getData();\n          setFilterOpen(false);\n        }}\n      />\n    </>\n  );\n};\n\nexport default MyJobs;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/JobApplications.js",["200","201","202","203","204","205","206"],"import { useState, useEffect, useContext } from \"react\";\nimport {\n    Button,\n    Chip,\n    Grid,\n    IconButton,\n    InputAdornment,\n    makeStyles,\n    Paper,\n    TextField,\n    Typography,\n    Modal,\n    Slider,\n    FormControlLabel,\n    FormGroup,\n    MenuItem,\n    Checkbox,\n    Avatar,\n} from \"@material-ui/core\";\nimport { useParams } from \"react-router-dom\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport axios from \"axios\";\nimport FilterListIcon from \"@material-ui/icons/FilterList\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList, { server } from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n    body: {\n        height: \"inherit\",\n    },\n    statusBlock: {\n        width: \"100%\",\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        textTransform: \"uppercase\",\n    },\n    jobTileOuter: {\n        padding: \"30px\",\n        margin: \"20px 0\",\n        boxSizing: \"border-box\",\n        width: \"100%\",\n    },\n    popupDialog: {\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    avatar: {\n        width: theme.spacing(17),\n        height: theme.spacing(17),\n    },\n}));\n\nconst FilterPopup = (props) => {\n    const classes = useStyles();\n    const { open, handleClose, searchOptions, setSearchOptions, getData } =\n        props;\n    return (\n        <Modal\n            open={open}\n            onClose={handleClose}\n            className={classes.popupDialog}\n        >\n            <Paper\n                style={{\n                    padding: \"50px\",\n                    outline: \"none\",\n                    minWidth: \"50%\",\n                }}\n            >\n                <Grid\n                    container\n                    direction=\"column\"\n                    alignItems=\"center\"\n                    spacing={3}\n                >\n                    <Grid container item alignItems=\"center\">\n                        <Grid item xs={3}>\n                            Application Status\n                        </Grid>\n                        <Grid\n                            container\n                            item\n                            xs={9}\n                            justify=\"space-around\"\n                            // alignItems=\"center\"\n                        >\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            name=\"rejected\"\n                                            checked={\n                                                searchOptions.status.rejected\n                                            }\n                                            onChange={(event) => {\n                                                setSearchOptions({\n                                                    ...searchOptions,\n                                                    status: {\n                                                        ...searchOptions.status,\n                                                        [event.target.name]:\n                                                            event.target\n                                                                .checked,\n                                                    },\n                                                });\n                                            }}\n                                        />\n                                    }\n                                    label=\"Rejected\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            name=\"applied\"\n                                            checked={\n                                                searchOptions.status.applied\n                                            }\n                                            onChange={(event) => {\n                                                setSearchOptions({\n                                                    ...searchOptions,\n                                                    status: {\n                                                        ...searchOptions.status,\n                                                        [event.target.name]:\n                                                            event.target\n                                                                .checked,\n                                                    },\n                                                });\n                                            }}\n                                        />\n                                    }\n                                    label=\"Applied\"\n                                />\n                            </Grid>\n                            <Grid item>\n                                <FormControlLabel\n                                    control={\n                                        <Checkbox\n                                            name=\"shortlisted\"\n                                            checked={\n                                                searchOptions.status.shortlisted\n                                            }\n                                            onChange={(event) => {\n                                                setSearchOptions({\n                                                    ...searchOptions,\n                                                    status: {\n                                                        ...searchOptions.status,\n                                                        [event.target.name]:\n                                                            event.target\n                                                                .checked,\n                                                    },\n                                                });\n                                            }}\n                                        />\n                                    }\n                                    label=\"Shortlisted\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid container item alignItems=\"center\">\n                        <Grid item xs={3}>\n                            Sort\n                        </Grid>\n                        <Grid item container direction=\"row\" xs={9}>\n                            <Grid\n                                item\n                                container\n                                xs={4}\n                                justify=\"space-around\"\n                                alignItems=\"center\"\n                                style={{\n                                    border: \"1px solid #D1D1D1\",\n                                    borderRadius: \"5px\",\n                                }}\n                            >\n                                <Grid item>\n                                    <Checkbox\n                                        name=\"name\"\n                                        checked={\n                                            searchOptions.sort[\n                                                \"jobApplicant.name\"\n                                            ].status\n                                        }\n                                        onChange={(event) =>\n                                            setSearchOptions({\n                                                ...searchOptions,\n                                                sort: {\n                                                    ...searchOptions.sort,\n                                                    \"jobApplicant.name\": {\n                                                        ...searchOptions.sort[\n                                                            \"jobApplicant.name\"\n                                                        ],\n                                                        status: event.target\n                                                            .checked,\n                                                    },\n                                                },\n                                            })\n                                        }\n                                        id=\"name\"\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <label for=\"name\">\n                                        <Typography>Name</Typography>\n                                    </label>\n                                </Grid>\n                                <Grid item>\n                                    <IconButton\n                                        disabled={\n                                            !searchOptions.sort[\n                                                \"jobApplicant.name\"\n                                            ].status\n                                        }\n                                        onClick={() => {\n                                            setSearchOptions({\n                                                ...searchOptions,\n                                                sort: {\n                                                    ...searchOptions.sort,\n                                                    \"jobApplicant.name\": {\n                                                        ...searchOptions.sort[\n                                                            \"jobApplicant.name\"\n                                                        ],\n                                                        desc: !searchOptions\n                                                            .sort[\n                                                            \"jobApplicant.name\"\n                                                        ].desc,\n                                                    },\n                                                },\n                                            });\n                                        }}\n                                    >\n                                        {searchOptions.sort[\"jobApplicant.name\"]\n                                            .desc ? (\n                                            <ArrowDownwardIcon />\n                                        ) : (\n                                            <ArrowUpwardIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                item\n                                container\n                                xs={4}\n                                justify=\"space-around\"\n                                alignItems=\"center\"\n                                style={{\n                                    border: \"1px solid #D1D1D1\",\n                                    borderRadius: \"5px\",\n                                }}\n                            >\n                                <Grid item>\n                                    <Checkbox\n                                        name=\"dateOfApplication\"\n                                        checked={\n                                            searchOptions.sort.dateOfApplication\n                                                .status\n                                        }\n                                        onChange={(event) =>\n                                            setSearchOptions({\n                                                ...searchOptions,\n                                                sort: {\n                                                    ...searchOptions.sort,\n                                                    dateOfApplication: {\n                                                        ...searchOptions.sort\n                                                            .dateOfApplication,\n                                                        status: event.target\n                                                            .checked,\n                                                    },\n                                                },\n                                            })\n                                        }\n                                        id=\"dateOfApplication\"\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <label for=\"dateOfApplication\">\n                                        <Typography>\n                                            Date of Application\n                                        </Typography>\n                                    </label>\n                                </Grid>\n                                <Grid item>\n                                    <IconButton\n                                        disabled={\n                                            !searchOptions.sort\n                                                .dateOfApplication.status\n                                        }\n                                        onClick={() => {\n                                            setSearchOptions({\n                                                ...searchOptions,\n                                                sort: {\n                                                    ...searchOptions.sort,\n                                                    dateOfApplication: {\n                                                        ...searchOptions.sort\n                                                            .dateOfApplication,\n                                                        desc: !searchOptions\n                                                            .sort\n                                                            .dateOfApplication\n                                                            .desc,\n                                                    },\n                                                },\n                                            });\n                                        }}\n                                    >\n                                        {searchOptions.sort.dateOfApplication\n                                            .desc ? (\n                                            <ArrowDownwardIcon />\n                                        ) : (\n                                            <ArrowUpwardIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            </Grid>\n                            <Grid\n                                item\n                                container\n                                xs={4}\n                                justify=\"space-around\"\n                                alignItems=\"center\"\n                                style={{\n                                    border: \"1px solid #D1D1D1\",\n                                    borderRadius: \"5px\",\n                                }}\n                            >\n                                <Grid item>\n                                    <Checkbox\n                                        name=\"rating\"\n                                        checked={\n                                            searchOptions.sort[\n                                                \"jobApplicant.rating\"\n                                            ].status\n                                        }\n                                        onChange={(event) =>\n                                            setSearchOptions({\n                                                ...searchOptions,\n                                                sort: {\n                                                    ...searchOptions.sort,\n                                                    \"jobApplicant.rating\": {\n                                                        ...searchOptions.sort[\n                                                            [\n                                                                \"jobApplicant.rating\",\n                                                            ]\n                                                        ],\n                                                        status: event.target\n                                                            .checked,\n                                                    },\n                                                },\n                                            })\n                                        }\n                                        id=\"rating\"\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <label for=\"rating\">\n                                        <Typography>Rating</Typography>\n                                    </label>\n                                </Grid>\n                                <Grid item>\n                                    <IconButton\n                                        disabled={\n                                            !searchOptions.sort[\n                                                \"jobApplicant.rating\"\n                                            ].status\n                                        }\n                                        onClick={() => {\n                                            setSearchOptions({\n                                                ...searchOptions,\n                                                sort: {\n                                                    ...searchOptions.sort,\n                                                    \"jobApplicant.rating\": {\n                                                        ...searchOptions.sort[\n                                                            \"jobApplicant.rating\"\n                                                        ],\n                                                        desc: !searchOptions\n                                                            .sort[\n                                                            \"jobApplicant.rating\"\n                                                        ].desc,\n                                                    },\n                                                },\n                                            });\n                                        }}\n                                    >\n                                        {searchOptions.sort[\n                                            \"jobApplicant.rating\"\n                                        ].desc ? (\n                                            <ArrowDownwardIcon />\n                                        ) : (\n                                            <ArrowUpwardIcon />\n                                        )}\n                                    </IconButton>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                    <Grid item>\n                        <Button\n                            variant=\"contained\"\n                           class=\"applyBtn\"\n                            // style={{ }}\n                            onClick={() => getData()}\n                        >\n                            Apply\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n        </Modal>\n    );\n};\n\nconst ApplicationTile = (props) => {\n    const classes = useStyles();\n    const { application, getData } = props;\n\n    const setPopup = useContext(SetPopupContext);\n    const [open, setOpen] = useState(false);\n    const appliedOn = new Date(application.dateOfApplication);\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const colorSet = {\n        applied: \"#3454D1\",\n        shortlisted: \"#DC851F\",\n        accepted: \"#09BC8A\",\n        rejected: \"#D1345B\",\n        deleted: \"#B49A67\",\n        cancelled: \"#FF8484\",\n        finished: \"#4EA5D9\",\n    };\n\n    const getResume = () => {\n        if (\n            application.jobApplicant.resume &&\n            application.jobApplicant.resume !== \"\"\n        ) {\n            const address = `${server}${application.jobApplicant.resume}`;\n            console.log(address);\n            axios(address, {\n                method: \"GET\",\n                responseType: \"blob\",\n            })\n                .then((response) => {\n                    const file = new Blob([response.data], {\n                        type: \"application/pdf\",\n                    });\n                    const fileURL = URL.createObjectURL(file);\n                    window.open(fileURL);\n                })\n                .catch((error) => {\n                    console.log(error);\n                    setPopup({\n                        open: true,\n                        severity: \"error\",\n                        message: \"Error\",\n                    });\n                });\n        } else {\n            setPopup({\n                open: true,\n                severity: \"error\",\n                message: \"No resume found\",\n            });\n        }\n    };\n\n    const updateStatus = (status) => {\n        const address = `${apiList.applications}/${application._id}`;\n        const statusData = {\n            status: status,\n            dateOfJoining: new Date().toISOString(),\n            userId: application.jobApplicant.userId,\n        };\n        axios\n            .put(address, statusData, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                },\n            })\n            .then((response) => {\n                setPopup({\n                    open: true,\n                    severity: \"success\",\n                    message: response.data.message,\n                });\n                getData();\n            })\n            .catch((err) => {\n                setPopup({\n                    open: true,\n                    severity: \"error\",\n                    message: err.response.data.message,\n                });\n                console.log(err.response);\n            });\n    };\n\n    const buttonSet = {\n        applied: (\n            <>\n                <Grid item xs>\n                    <Button\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"shortlisted\"],\n                            color: \"#ffffff\",\n                        }}\n                        onClick={() => updateStatus(\"shortlisted\")}\n                    >\n                        Shortlist\n                    </Button>\n                </Grid>\n                <Grid item xs>\n                    <Button\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"rejected\"],\n                            color: \"#ffffff\",\n                        }}\n                        onClick={() => updateStatus(\"rejected\")}\n                    >\n                        Reject\n                    </Button>\n                </Grid>\n            </>\n        ),\n        shortlisted: (\n            <>\n                <Grid item xs>\n                    <Button\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"accepted\"],\n                            color: \"#ffffff\",\n                        }}\n                        onClick={() => updateStatus(\"accepted\")}\n                    >\n                        Accept\n                    </Button>\n                </Grid>\n                <Grid item xs>\n                    <Button\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"rejected\"],\n                            color: \"#ffffff\",\n                        }}\n                        onClick={() => updateStatus(\"rejected\")}\n                    >\n                        Reject\n                    </Button>\n                </Grid>\n            </>\n        ),\n        rejected: (\n            <>\n                <Grid item xs>\n                    <Paper\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"rejected\"],\n                            color: \"#ffffff\",\n                        }}\n                    >\n                        Rejected\n                    </Paper>\n                </Grid>\n            </>\n        ),\n        accepted: (\n            <>\n                <Grid item xs>\n                    <Paper\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"accepted\"],\n                            color: \"#ffffff\",\n                        }}\n                    >\n                        Accepted\n                    </Paper>\n                </Grid>\n            </>\n        ),\n        cancelled: (\n            <>\n                <Grid item xs>\n                    <Paper\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"cancelled\"],\n                            color: \"#ffffff\",\n                        }}\n                    >\n                        Cancelled\n                    </Paper>\n                </Grid>\n            </>\n        ),\n        finished: (\n            <>\n                <Grid item xs>\n                    <Paper\n                        className={classes.statusBlock}\n                        style={{\n                            background: colorSet[\"finished\"],\n                            color: \"#ffffff\",\n                        }}\n                    >\n                        Finished\n                    </Paper>\n                </Grid>\n            </>\n        ),\n    };\n\n    return (\n        <Paper className={classes.jobTileOuter} elevation={3}>\n            <Grid container>\n                <Grid\n                    item\n                    xs={2}\n                    style={{\n                        display: \"flex\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Avatar\n                        src={`${application.jobApplicant.profile}`}\n                        className={classes.avatar}\n                    />\n                </Grid>\n                <Grid container item xs={7} spacing={1} direction=\"column\">\n                    <Grid item>\n                        <Typography variant=\"h5\">\n                            {application.jobApplicant.name} \n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Rating\n                            value={\n                                application.jobApplicant.rating !== -1\n                                    ? application.jobApplicant.rating\n                                    : null\n                            }\n                            readOnly\n                        />\n                    </Grid>\n                    <Grid item>\n                        Applied On: {appliedOn.toLocaleDateString()}\n                    </Grid>\n                    <Grid item>\n                        Education:{\" \"}\n                        {application.jobApplicant.education\n                            .map((edu) => {\n                                return `${edu.institutionName} (${\n                                    edu.startYear\n                                }-${edu.endYear ? edu.endYear : \"Ongoing\"})`;\n                            })\n                            .join(\", \")}\n                    </Grid>\n                    <Grid item>\n                        SOP:{\" \"}\n                        {application.sop !== \"\"\n                            ? application.sop\n                            : \"Not Submitted\"}\n                    </Grid>\n                    <Grid item>\n                        {application.jobApplicant.skills.map((skill) => (\n                            <Chip\n                                label={skill}\n                                style={{ marginRight: \"2px\" }}\n                            />\n                        ))}\n                    </Grid>\n                </Grid>\n                <Grid item container direction=\"column\" xs={3}>\n                    <Grid item>\n                        <Button\n                            variant=\"contained\"\n                            className={classes.statusBlock}\n                            color=\"primary\"\n                            // onClick={() => getResume()}\n                        >\n                            <a\n                                style={{\n                                    textDecoration: \"none\",\n                                    color: \"white\",\n                                }}\n                                className={classes.statusBlock}\n                                href={application.jobApplicant.resume}\n                                download\n                            >\n                                Download Resume\n                            </a>\n                        </Button>\n                    </Grid>\n                    <Grid item container xs>\n                        {buttonSet[application.status]}\n                    </Grid>\n                </Grid>\n            </Grid>\n            <Modal\n                open={open}\n                onClose={handleClose}\n                className={classes.popupDialog}\n            >\n                <Paper\n                    style={{\n                        padding: \"20px\",\n                        outline: \"none\",\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        minWidth: \"30%\",\n                        alignItems: \"center\",\n                    }}\n                >\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        style={{ padding: \"10px 50px\" }}\n                        // onClick={() => changeRating()}\n                    >\n                        Submit\n                    </Button>\n                </Paper>\n            </Modal>\n        </Paper>\n    );\n};\n\nconst JobApplications = (props) => {\n    const setPopup = useContext(SetPopupContext);\n    const [applications, setApplications] = useState([]);\n    const { jobId } = useParams();\n    const [filterOpen, setFilterOpen] = useState(false);\n    const [searchOptions, setSearchOptions] = useState({\n        status: {\n            all: false,\n            applied: false,\n            shortlisted: false,\n        },\n        sort: {\n            \"jobApplicant.name\": {\n                status: false,\n                desc: false,\n            },\n            dateOfApplication: {\n                status: true,\n                desc: true,\n            },\n            \"jobApplicant.rating\": {\n                status: false,\n                desc: false,\n            },\n        },\n    });\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    const getData = () => {\n        let searchParams = [];\n\n        if (searchOptions.status.rejected) {\n            searchParams = [...searchParams, `status=rejected`];\n        }\n        if (searchOptions.status.applied) {\n            searchParams = [...searchParams, `status=applied`];\n        }\n        if (searchOptions.status.shortlisted) {\n            searchParams = [...searchParams, `status=shortlisted`];\n        }\n\n        let asc = [],\n            desc = [];\n\n        Object.keys(searchOptions.sort).forEach((obj) => {\n            const item = searchOptions.sort[obj];\n            if (item.status) {\n                if (item.desc) {\n                    desc = [...desc, `desc=${obj}`];\n                } else {\n                    asc = [...asc, `asc=${obj}`];\n                }\n            }\n        });\n        searchParams = [...searchParams, ...asc, ...desc];\n        const queryString = searchParams.join(\"&\");\n        console.log(queryString);\n        let address = `${apiList.applicants}?jobId=${jobId}`;\n        if (queryString !== \"\") {\n            address = `${address}&${queryString}`;\n        }\n\n        console.log(address);\n\n        axios\n            .get(address, {\n                headers: {\n                    Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n                },\n            })\n            .then((response) => {\n                console.log(response.data);\n                setApplications(response.data);\n            })\n            .catch((err) => {\n                console.log(err.response);\n                // console.log(err.response.data);\n                setApplications([]);\n                setPopup({\n                    open: true,\n                    severity: \"error\",\n                    message: err.response.data.message,\n                });\n            });\n    };\n\n    return (\n        <>\n            <Grid\n                container\n                item\n                direction=\"column\"\n                alignItems=\"center\"\n                style={{ padding: \"30px\", minHeight: \"93vh\" }}\n            >\n                <Grid item>\n                    <Typography variant=\"h2\">Applications </Typography>\n                </Grid>\n                <Grid item>\n                    <IconButton onClick={() => setFilterOpen(true)}>\n                        <FilterListIcon />\n                    </IconButton>\n                </Grid>\n                <Grid\n                    container\n                    item\n                    xs\n                    direction=\"column\"\n                    style={{ width: \"100%\" }}\n                    alignItems=\"stretch\"\n                    justify=\"center\"\n                >\n                    {applications.length > 0 ? (\n                        applications.map((obj) => (\n                            <Grid item>\n                                {/* {console.log(obj)} */}\n                                <ApplicationTile\n                                    application={obj}\n                                    getData={getData}\n                                />\n                            </Grid>\n                        ))\n                    ) : (\n                        <Typography\n                            variant=\"h5\"\n                            style={{ textAlign: \"center\" }}\n                        >\n                            No Applications Found\n                        </Typography>\n                    )}\n                </Grid>\n            </Grid>\n            <FilterPopup\n                open={filterOpen}\n                searchOptions={searchOptions}\n                setSearchOptions={setSearchOptions}\n                handleClose={() => setFilterOpen(false)}\n                getData={() => {\n                    getData();\n                    setFilterOpen(false);\n                }}\n            />\n        </>\n    );\n};\n\nexport default JobApplications;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/MessagePopup.js",["207"],"import { Snackbar, Slide } from \"@material-ui/core\";\nimport { Alert } from \"@material-ui/lab\";\n\nconst MessagePopup = (props) => {\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    props.setOpen(false);\n  };\n  return (\n    <Snackbar open={props.open} onClose={handleClose} autoHideDuration={2000}>\n      <Alert onClose={handleClose} severity={props.severity}>\n        {props.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default MessagePopup;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/recruiter/CreateJobs.js",["208","209"],"import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Grid,\n  Typography,\n  Modal,\n  Paper,\n  makeStyles,\n  TextField,\n  MenuItem,\n} from \"@material-ui/core\";\nimport axios from \"axios\";\nimport ChipInput from \"material-ui-chip-input\";\n\nimport { SetPopupContext } from \"../../App\";\n\nimport apiList from \"../../lib/apiList\";\n\nconst useStyles = makeStyles((theme) => ({\n  body: {\n    height: \"inherit\",\n  },\n  popupDialog: {\n    height: \"100%\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    // padding: \"30px\",\n  },\n}));\n\nconst CreateJobs = (props ) => {\n  const classes = useStyles();\n  const setPopup = useContext(SetPopupContext);\n\n  \n  const [jobDetails, setJobDetails] = useState({\n    title: \"\",\n    maxApplicants: 100,\n    maxPositions: 30,\n    deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n      .toISOString()\n      .substr(0, 16),\n    skillsets: [],\n    jobType: \"Full Time\",\n    duration: 0,\n    salary: 0,\n    roll: \"\",\n    address: \"\",\n    companyName: \"\",\n    jobDescription: {\n      description: \"\",\n      requirements: [],\n      technicalKnowledge: \"\",\n    },\n  });\n\n  const handleInput = (key, value) => {\n    setJobDetails({\n      ...jobDetails,\n      [key]: value,\n    });\n  };\n\n  const handleUpdate = () => {\n    console.log(jobDetails);\n    axios\n      .post(apiList.jobs, jobDetails, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\n        },\n      })\n      .then((response) => {\n        setPopup({\n          open: true,\n          severity: \"success\",\n          message: response.data.message,\n        });\n        setJobDetails({\n          title: \"\",\n          maxApplicants: 100,\n          maxPositions: 30,\n          deadline: new Date(new Date().getTime() + 10 * 24 * 60 * 60 * 1000)\n            .toISOString()\n            .substr(0, 16),\n          skillsets: [],\n          jobType: \"Full Time\",\n          duration: 0,\n          salary: 0,\n        });\n      })\n      .catch((err) => {\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: err.response.data.message,\n        });\n        console.log(err.response);\n      });\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        item\n        direction=\"column\"\n        alignItems=\"center\"\n        class=\"createJobsGrid\"\n        style={{ padding: \"30px\", minHeight: \"93vh\", width: \"\" }}\n      >\n        <Grid item>\n          {/* <Typography variant=\"h2\">Add Job</Typography> */}\n          <Typography class=\"mainHeading\"> Unlock Opportunities: Post Jobs Today!</Typography>\n        </Grid>\n        <Grid item container xs direction=\"column\" justify=\"center\">\n          <Grid item>\n            <Paper\n              style={{\n                padding: \"20px\",\n                outline: \"none\",\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n              }}\n            >\n              <Grid\n                container\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={3}\n              >\n                <Grid item>\n                  <TextField\n                    label=\"Title\"\n                    value={jobDetails.title}\n                    onChange={(event) =>\n                      handleInput(\"title\", event.target.value)\n                    }\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n                \n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Skills\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={jobDetails.skillsets}\n                    onAdd={(chip) =>\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: [...jobDetails.skillsets, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let skillsets = jobDetails.skillsets;\n                      skillsets.splice(index, 1);\n                      setJobDetails({\n                        ...jobDetails,\n                        skillsets: skillsets,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n                \n                <Grid item>\n                  <TextField\n                    label=\"Salary\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.salary}\n                    onChange={(event) => {\n                      handleInput(\"salary\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 0 } }}\n                    fullWidth\n                  />\n                </Grid>\n\n                {/* Company Details */}\n                <Grid item>\n                  <TextField\n                    label=\"Company Name\"\n                    value={jobDetails.companyName}\n                    onChange={(event) =>\n                      handleInput(\"companyName\", event.target.value)\n                    }\n                    variant=\"outlined\"\n                    fullWidth\n                  /> </Grid>\n                <Grid item>\n                  <TextField\n                    label=\"Address\"\n                    value={jobDetails.address}\n                    onChange={(event) =>\n                      handleInput(\"address\", event.target.value)\n                    }\n                    variant=\"outlined\"\n                    fullWidth\n                    placeholder=\"City, State, Country\"\n                  />\n                </Grid>\n                \n                <Grid item>\n                  <ChipInput\n                    className={classes.inputBox}\n                    label=\"Requirements\"\n                    variant=\"outlined\"\n                    helperText=\"Press enter to add skills\"\n                    value={jobDetails.requirements}\n                    onAdd={(chip) =>\n                      setJobDetails({\n                        ...jobDetails,\n                        requirements: [...jobDetails.requirements, chip],\n                      })\n                    }\n                    onDelete={(chip, index) => {\n                      let requirements = jobDetails.requirements;\n                      requirements.splice(index, 1);\n                      setJobDetails({\n                        ...jobDetails,\n                        requirements: requirements,\n                      });\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item>\n                  <TextField\n                    label=\"Application Deadline\"\n                    type=\"datetime-local\"\n                    value={jobDetails.deadline}\n                    onChange={(event) => {\n                      handleInput(\"deadline\", event.target.value);\n                    }}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    variant=\"outlined\"\n                    fullWidth\n                  />\n                </Grid>\n\n\n\n                <Grid item style={{display: \"flex\", flexDirection: \"row\"}}>\n                  {/* Job Type Input */}\n                  <TextField \n                    select\n                    label=\"Job Type\"\n                    variant=\"outlined\"\n                    value={jobDetails.jobType}\n                    onChange={(event) => {\n                      handleInput(\"jobType\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value=\"Full Time\">Full Time</MenuItem>\n                    <MenuItem value=\"Part Time\">Part Time</MenuItem>\n                    <MenuItem value=\"Work From Home\">Work From Home</MenuItem>\n                  </TextField>\n                  {/* Job Duration */}\n                  <TextField style={{marginLeft: \".5rem\"}}\n                    select\n                    label=\"Duration\"\n                    variant=\"outlined\"\n                    value={jobDetails.duration}\n                    onChange={(event) => {\n                      handleInput(\"duration\", event.target.value);\n                    }}\n                    fullWidth\n                  >\n                    <MenuItem value={0}>Flexible</MenuItem>\n                    <MenuItem value={1}>1 Month</MenuItem>\n                    <MenuItem value={2}>2 Months</MenuItem>\n                    <MenuItem value={3}>3 Months</MenuItem>\n                    <MenuItem value={4}>4 Months</MenuItem>\n                    <MenuItem value={5}>5 Months</MenuItem>\n                    <MenuItem value={6}>6 Months</MenuItem>\n                  </TextField>\n                </Grid>\n               \n                \n                \n               \n                <Grid item style={{display: \"flex\", flexDirection: \"row\"}}>\n                  <TextField \n                    label=\"Positions Available\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxPositions}\n                    onChange={(event) => {\n                      handleInput(\"maxPositions\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                <TextField style={{marginLeft: \".5rem\"}}\n                    label=\"Maximum Number Of Applicants\"\n                    type=\"number\"\n                    variant=\"outlined\"\n                    value={jobDetails.maxApplicants}\n                    onChange={(event) => {\n                      handleInput(\"maxApplicants\", event.target.value);\n                    }}\n                    InputProps={{ inputProps: { min: 1 } }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n              <Button\n                class=\"primaryButton\"\n                onClick={() => handleUpdate()}\n              >\n               Post a Job\n              </Button>\n            </Paper>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default CreateJobs;\n","/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/isAuth.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/apiList.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/PasswordInput.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/EmailInput.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/lib/FileUploadInput.js",[],"/Users/avinashprajapati/Documents/github/Worko/frontend/src/component/Course.js",["210","211","212","213","214","215","216","217","218"],"import React, { useContext, useEffect, useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Link,\n  Chip,\n  Button,\n  CircularProgress,\n  Box,\n} from \"@material-ui/core\";\nimport StarRateIcon from \"@material-ui/icons/StarRate\";\nimport axios from \"axios\";\nimport apiList from \"../lib/apiList\";\nimport { SetPopupContext } from \"../App\";\nimport { FaStar, FaStarHalfAlt } from \"react-icons/fa\";\n\nconst staticCourses = [\n  {\n    desc: \"In this course you will learn three key website programming and design languages: HTML, CSS and JavaScript. You will create a web page using basic elements to control layout and style.  Additionally, your web page will support interactivity.   At the end of the course, you will be able to:  1. Define the purpose of HTML, CSS and JavaScript 2. Make a simple web page using HTML 3. Use CSS to control text styles and layout 4. Use CSS libraries such as Bootstrap to create responsive layouts 5. Use JavaScript variables and functions 6. Manipulate web page content using JavaScript 7. Respond to user input using JavaScript  In this course, you will complete:  2 assignments writing HTML, CSS and JavaScript, each taking ~1 hour to complete 4 quizzes, each taking ~20 minutes to complete 1 programming exercise~30 minutes to complete multiple practice quizzes, each taking ~5 minutes to complete  Participation in or completion of this online course will not confer academic credit for University of London programmes.\",\n    difficulty: \"Intermediate\",\n    name: \"Responsive Website Basics: Code with HTML, CSS, and JavaScript\",\n    rating: \"4.5\",\n    score: 0.5000000000000001,\n    url: \"https://www.coursera.org/learn/website-coding\",\n  },\n  {\n    desc: \"Learn foundational programming concepts (e.g., functions, for loops, conditional statements) and how to solve problems like a programmer. In addition, learn basic web development as you build web pages using HTML, CSS, JavaScript. By the end of the course, will create a web page where others can upload their images and apply image filters that you create.  After completing this course, you will be able to: 1. Think critically about how to solve a problem using programming; 2. Write JavaScript programs using functions, for loops, and conditional statements; 3. Use HTML to construct a web page with paragraphs, divs, images, links, and lists; 4. Add styles to a web page with CSS IDs and classes; and 5. Make a web page interactive with JavaScript commands like alert, onClick, onChange, adding input features like an image canvas, button, and slider.\",\n    difficulty: \"Beginner\",\n    name: \"Programming Foundations with JavaScript, HTML and CSS\",\n    rating: \"4.5\",\n    score: 0.4803844614152615,\n    url: \"https://www.coursera.org/learn/duke-programming-web\",\n  },\n  {\n    desc: \"In this intermediate-level course you will explore how CSS (Cascading Stylesheets) can be used to alter the appearance of a table on your web page. HTML is used to add a table to a website to organize content. CSS is used to make that table easier to read and more visually appealing to website visitors. You will use the Notepad++ editor to write CSS rules with a variety of selectors and properties that are applied to table components to change their appearance. The Chrome browser is used to display the page to test the results of your work. CSS is a very powerful tool and using it to enhance the look of a table is a valuable skill for a web developer.  Note: This course works best for learners who are based in the North America region. We�re currently working on providing the same experience in other regions.\",\n    difficulty: \"Beginner\",\n    name: \"Style Tables with CSS\",\n    rating: \"4.8\",\n    score: 0.4803844614152615,\n    url: \"https://www.coursera.org/learn/style-html-tables-css\",\n  },\n  {\n    desc: \"This course is designed to start you on a path toward future studies in web development and design, no matter how little experience or technical knowledge you currently have. The web is a very big place, and if you are the typical internet user, you probably visit several websites every day, whether for business, entertainment or education. But have you ever wondered how these websites actually work? How are they built? How do browsers, computers, and mobile devices interact with the web? What skills are necessary to build a website? With almost 1 billion websites now on the internet, the answers to these questions could be your first step toward a better understanding of the internet and developing a new set of internet skills.    By the end of this course you�ll be able to describe the structure and functionality of the world wide web, create dynamic web pages using a combination of HTML, CSS, and JavaScript, apply essential programming language concepts when creating HTML forms, select an appropriate web hosting service, and publish your webpages for the world to see. Finally, you�ll be able to develop a working model for creating your own personal or business websites in the future and be fully prepared to take the next step in a more Advanced web development or design course or specialization.\",\n    difficulty: \"Conversant\",\n    name: \"Introduction to Web Development\",\n    rating: \"4.6\",\n    score: 0.4803844614152615,\n    url: \"https://www.coursera.org/learn/web-development\",\n  },\n  {\n    desc: \"The capstone will develop a professional-quality web portfolio.  Students will demonstrate the ability to design and implement a responsive site for a minimum of three platforms.  Adherence to validation and accessibility standards will be required. The evolving student implementations will be reviewed each week by capstone peers and teaching assistants to make sure that the student keeps up with the agenda of the course.   Upon completion of this course students will feel comfortable creating and/or updating existing front-end sites, utilizing existing frameworks, and testing sites for accessibility compliance.  This course is only open to students who have completed the first four courses in the Web Design for Everybody specialization: Introduction to HTML5, Introduction to CSS3, Interactivity with JavaScript, and Advanced Styling with Responsive Design.\",\n    difficulty: \"Beginner\",\n    name: \"Web Design for Everybody Capstone\",\n    rating: \"4.4\",\n    score: 0.4803844614152615,\n    url: \"https://www.coursera.org/learn/web-design-project\",\n  },\n];\n\nconst Course = () => {\n  const [courses, setCourses] = useState(() => staticCourses);\n  const [loading, setLoading] = useState(true); // Added loading state\n  console.log(\"🚀 ~ Course ~ courses:\", courses);\n  const setPopup = useContext(SetPopupContext);\n\n  const getCourseSuggestions = () => {\n    setLoading(true); // Set loading to true before making the API call\n    axios\n      .post(apiList.coursesuggestions, {\n        user_skills: [\"html\", \"css\", \"javascript\"],\n      })\n      .then((response) => {\n        console.log(response.data);\n        setCourses(response.data?.recommendations);\n      })\n      .catch((err) => {\n        console.log(err.response.data);\n        setPopup({\n          open: true,\n          severity: \"error\",\n          message: \"Error\",\n        });\n      })\n      .finally(() => {\n        setLoading(false); // Set loading to false after the API call is completed\n      });\n  };\n\n  useEffect(() => {\n    getCourseSuggestions();\n  }, []);\n\n  const truncate = (input) =>\n    input?.length > 300 ? `${input.substring(0, 400)}...` : input;\n\n  const renderRating = (rating) => {\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    return (\n      <>\n        {[...Array(fullStars)].map((_, index) => (\n          <span className=\"flex px-1 py-1 text-xs font-semibold text-gray-700\">\n            <FaStar key={index} />\n          </span>\n        ))}\n        {hasHalfStar && (\n          <span className=\"flex px-1 py-1 text-xs font-semibold text-gray-700 \">\n            <FaStarHalfAlt />\n          </span>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <>\n      {loading ? (\n        <Box sx={{ display: \"flex\" }}>\n          <CircularProgress />\n        </Box> // Display loading state\n      ) : (\n        courses?.map((course) => (\n          <div className=\"max-w-md mx-auto bg-white rounded-xl shadow-md overflow-hidden md:max-w-4xl m-8 mt-10\">\n            <div className=\"md:flex\">\n              <div className=\"md:flex-shrink-0\">\n                <img\n                  className=\"h-full w-full object-cover md:w-48\"\n                  src=\"https://source.unsplash.com/random?courses,programming\"\n                  alt=\"Course Image\"\n                />\n              </div>\n              <div className=\"p-8 w-full\">\n                <div className=\"uppercase tracking-wide text-xs text-indigo-500 font-semibold\">\n                  {course.difficulty}\n                </div>\n                <h2 className=\"block mt-1 text-lg leading-tight font-medium text-black\">\n                  {course.name}\n                </h2>\n                <p className=\"mt-2 text-gray-500\">{truncate(course.desc)}</p>\n                <div className=\"inline-flex mt-4 bg-gray-200 rounded-full w-max pb-1 pt-1 pl-2 pr-2\">\n                  {renderRating(course.rating)}\n                </div>\n                <div className=\"mt-6\">\n                  <a\n                    href={course.url}\n                    class=\"text-indigo-500 hover:text-indigo-600 font-semibold text-sm\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    Explore Course\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))\n      )}\n    </>\n  );\n};\n// </Box>\n\nexport default Course;\n",{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"223","severity":1,"message":"224","line":19,"column":8,"nodeType":"225","messageId":"226","endLine":19,"endColumn":14},{"ruleId":"223","severity":1,"message":"227","line":4,"column":3,"nodeType":"225","messageId":"226","endLine":4,"endColumn":7},{"ruleId":"223","severity":1,"message":"228","line":6,"column":3,"nodeType":"225","messageId":"226","endLine":6,"endColumn":13},{"ruleId":"223","severity":1,"message":"229","line":7,"column":3,"nodeType":"225","messageId":"226","endLine":7,"endColumn":17},{"ruleId":"223","severity":1,"message":"230","line":10,"column":3,"nodeType":"225","messageId":"226","endLine":10,"endColumn":12},{"ruleId":"223","severity":1,"message":"231","line":13,"column":3,"nodeType":"225","messageId":"226","endLine":13,"endColumn":9},{"ruleId":"223","severity":1,"message":"232","line":14,"column":3,"nodeType":"225","messageId":"226","endLine":14,"endColumn":19},{"ruleId":"223","severity":1,"message":"233","line":15,"column":3,"nodeType":"225","messageId":"226","endLine":15,"endColumn":12},{"ruleId":"223","severity":1,"message":"234","line":16,"column":3,"nodeType":"225","messageId":"226","endLine":16,"endColumn":11},{"ruleId":"223","severity":1,"message":"235","line":17,"column":3,"nodeType":"225","messageId":"226","endLine":17,"endColumn":11},{"ruleId":"223","severity":1,"message":"236","line":122,"column":9,"nodeType":"225","messageId":"226","endLine":122,"endColumn":17},{"ruleId":"237","severity":1,"message":"238","line":231,"column":6,"nodeType":"239","endLine":231,"endColumn":8,"suggestions":"240"},{"ruleId":"223","severity":1,"message":"230","line":4,"column":3,"nodeType":"225","messageId":"226","endLine":4,"endColumn":12},{"ruleId":"223","severity":1,"message":"241","line":9,"column":3,"nodeType":"225","messageId":"226","endLine":9,"endColumn":9},{"ruleId":"223","severity":1,"message":"242","line":20,"column":10,"nodeType":"225","messageId":"226","endLine":20,"endColumn":14},{"ruleId":"223","severity":1,"message":"227","line":4,"column":3,"nodeType":"225","messageId":"226","endLine":4,"endColumn":7},{"ruleId":"223","severity":1,"message":"233","line":15,"column":3,"nodeType":"225","messageId":"226","endLine":15,"endColumn":12},{"ruleId":"223","severity":1,"message":"243","line":19,"column":8,"nodeType":"225","messageId":"226","endLine":19,"endColumn":14},{"ruleId":"223","severity":1,"message":"244","line":102,"column":9,"nodeType":"225","messageId":"226","endLine":102,"endColumn":17},{"ruleId":"223","severity":1,"message":"245","line":104,"column":9,"nodeType":"225","messageId":"226","endLine":104,"endColumn":14},{"ruleId":"223","severity":1,"message":"246","line":105,"column":9,"nodeType":"225","messageId":"226","endLine":105,"endColumn":19},{"ruleId":"247","severity":1,"message":"248","line":203,"column":28,"nodeType":"249","messageId":"250","endLine":203,"endColumn":30},{"ruleId":"237","severity":1,"message":"238","line":586,"column":6,"nodeType":"239","endLine":586,"endColumn":8,"suggestions":"251"},{"ruleId":"247","severity":1,"message":"248","line":602,"column":33,"nodeType":"249","messageId":"250","endLine":602,"endColumn":35},{"ruleId":"247","severity":1,"message":"248","line":608,"column":33,"nodeType":"249","messageId":"250","endLine":608,"endColumn":35},{"ruleId":"247","severity":1,"message":"248","line":614,"column":32,"nodeType":"249","messageId":"250","endLine":614,"endColumn":34},{"ruleId":"237","severity":1,"message":"252","line":16,"column":6,"nodeType":"239","endLine":16,"endColumn":8,"suggestions":"253"},{"ruleId":"223","severity":1,"message":"254","line":10,"column":3,"nodeType":"225","messageId":"226","endLine":10,"endColumn":7},{"ruleId":"223","severity":1,"message":"255","line":21,"column":10,"nodeType":"225","messageId":"226","endLine":21,"endColumn":17},{"ruleId":"223","severity":1,"message":"256","line":114,"column":10,"nodeType":"225","messageId":"226","endLine":114,"endColumn":18},{"ruleId":"223","severity":1,"message":"257","line":114,"column":20,"nodeType":"225","messageId":"226","endLine":114,"endColumn":31},{"ruleId":"223","severity":1,"message":"258","line":223,"column":9,"nodeType":"225","messageId":"226","endLine":223,"endColumn":18},{"ruleId":"223","severity":1,"message":"259","line":224,"column":9,"nodeType":"225","messageId":"226","endLine":224,"endColumn":16},{"ruleId":"223","severity":1,"message":"260","line":225,"column":9,"nodeType":"225","messageId":"226","endLine":225,"endColumn":17},{"ruleId":"223","severity":1,"message":"261","line":226,"column":9,"nodeType":"225","messageId":"226","endLine":226,"endColumn":19},{"ruleId":"223","severity":1,"message":"262","line":227,"column":7,"nodeType":"225","messageId":"226","endLine":227,"endColumn":16},{"ruleId":"223","severity":1,"message":"263","line":228,"column":7,"nodeType":"225","messageId":"226","endLine":228,"endColumn":15},{"ruleId":"223","severity":1,"message":"264","line":231,"column":7,"nodeType":"225","messageId":"226","endLine":231,"endColumn":18},{"ruleId":"223","severity":1,"message":"265","line":235,"column":9,"nodeType":"225","messageId":"226","endLine":235,"endColumn":23},{"ruleId":"266","severity":1,"message":"267","line":262,"column":21,"nodeType":"268","endLine":262,"endColumn":51},{"ruleId":"266","severity":1,"message":"267","line":265,"column":21,"nodeType":"268","endLine":265,"endColumn":54},{"ruleId":"266","severity":1,"message":"267","line":268,"column":21,"nodeType":"268","endLine":268,"endColumn":51},{"ruleId":"266","severity":1,"message":"267","line":271,"column":21,"nodeType":"268","endLine":271,"endColumn":53},{"ruleId":"223","severity":1,"message":"269","line":10,"column":3,"nodeType":"225","messageId":"226","endLine":10,"endColumn":8},{"ruleId":"223","severity":1,"message":"270","line":15,"column":8,"nodeType":"225","messageId":"226","endLine":15,"endColumn":23},{"ruleId":"223","severity":1,"message":"271","line":16,"column":8,"nodeType":"225","messageId":"226","endLine":16,"endColumn":16},{"ruleId":"223","severity":1,"message":"272","line":22,"column":8,"nodeType":"225","messageId":"226","endLine":22,"endColumn":23},{"ruleId":"223","severity":1,"message":"273","line":48,"column":9,"nodeType":"225","messageId":"226","endLine":48,"endColumn":16},{"ruleId":"223","severity":1,"message":"274","line":49,"column":11,"nodeType":"225","messageId":"226","endLine":49,"endColumn":20},{"ruleId":"223","severity":1,"message":"275","line":49,"column":22,"nodeType":"225","messageId":"226","endLine":49,"endColumn":34},{"ruleId":"247","severity":1,"message":"248","line":475,"column":32,"nodeType":"249","messageId":"250","endLine":475,"endColumn":34},{"ruleId":"266","severity":1,"message":"267","line":574,"column":15,"nodeType":"268","endLine":577,"endColumn":16},{"ruleId":"266","severity":1,"message":"267","line":580,"column":15,"nodeType":"268","endLine":583,"endColumn":16},{"ruleId":"266","severity":1,"message":"267","line":586,"column":15,"nodeType":"268","endLine":589,"endColumn":16},{"ruleId":"223","severity":1,"message":"229","line":7,"column":3,"nodeType":"225","messageId":"226","endLine":7,"endColumn":17},{"ruleId":"223","severity":1,"message":"230","line":10,"column":3,"nodeType":"225","messageId":"226","endLine":10,"endColumn":12},{"ruleId":"223","severity":1,"message":"231","line":13,"column":3,"nodeType":"225","messageId":"226","endLine":13,"endColumn":9},{"ruleId":"223","severity":1,"message":"232","line":14,"column":3,"nodeType":"225","messageId":"226","endLine":14,"endColumn":19},{"ruleId":"223","severity":1,"message":"233","line":15,"column":3,"nodeType":"225","messageId":"226","endLine":15,"endColumn":12},{"ruleId":"223","severity":1,"message":"234","line":16,"column":3,"nodeType":"225","messageId":"226","endLine":16,"endColumn":11},{"ruleId":"223","severity":1,"message":"276","line":20,"column":10,"nodeType":"225","messageId":"226","endLine":20,"endColumn":19},{"ruleId":"223","severity":1,"message":"236","line":465,"column":9,"nodeType":"225","messageId":"226","endLine":465,"endColumn":17},{"ruleId":"223","severity":1,"message":"277","line":475,"column":9,"nodeType":"225","messageId":"226","endLine":475,"endColumn":18},{"ruleId":"237","severity":1,"message":"238","line":745,"column":6,"nodeType":"239","endLine":745,"endColumn":8,"suggestions":"278"},{"ruleId":"223","severity":1,"message":"279","line":3,"column":3,"nodeType":"225","messageId":"226","endLine":3,"endColumn":9},{"ruleId":"223","severity":1,"message":"280","line":6,"column":3,"nodeType":"225","messageId":"226","endLine":6,"endColumn":8},{"ruleId":"223","severity":1,"message":"230","line":9,"column":3,"nodeType":"225","messageId":"226","endLine":9,"endColumn":12},{"ruleId":"223","severity":1,"message":"254","line":10,"column":3,"nodeType":"225","messageId":"226","endLine":10,"endColumn":7},{"ruleId":"223","severity":1,"message":"281","line":11,"column":3,"nodeType":"225","messageId":"226","endLine":11,"endColumn":11},{"ruleId":"223","severity":1,"message":"282","line":14,"column":8,"nodeType":"225","messageId":"226","endLine":14,"endColumn":18},{"ruleId":"223","severity":1,"message":"273","line":35,"column":9,"nodeType":"225","messageId":"226","endLine":35,"endColumn":16},{"ruleId":"223","severity":1,"message":"283","line":49,"column":9,"nodeType":"225","messageId":"226","endLine":49,"endColumn":20},{"ruleId":"237","severity":1,"message":"238","line":58,"column":6,"nodeType":"239","endLine":58,"endColumn":8,"suggestions":"284"},{"ruleId":"223","severity":1,"message":"285","line":82,"column":9,"nodeType":"225","messageId":"226","endLine":82,"endColumn":21},{"ruleId":"223","severity":1,"message":"286","line":123,"column":9,"nodeType":"225","messageId":"226","endLine":123,"endColumn":20},{"ruleId":"223","severity":1,"message":"262","line":128,"column":7,"nodeType":"225","messageId":"226","endLine":128,"endColumn":16},{"ruleId":"223","severity":1,"message":"263","line":129,"column":7,"nodeType":"225","messageId":"226","endLine":129,"endColumn":15},{"ruleId":"223","severity":1,"message":"287","line":130,"column":7,"nodeType":"225","messageId":"226","endLine":130,"endColumn":19},{"ruleId":"223","severity":1,"message":"288","line":131,"column":7,"nodeType":"225","messageId":"226","endLine":131,"endColumn":14},{"ruleId":"289","severity":1,"message":"290","line":141,"column":17,"nodeType":"268","endLine":144,"endColumn":18},{"ruleId":"223","severity":1,"message":"227","line":4,"column":3,"nodeType":"225","messageId":"226","endLine":4,"endColumn":7},{"ruleId":"223","severity":1,"message":"233","line":15,"column":3,"nodeType":"225","messageId":"226","endLine":15,"endColumn":12},{"ruleId":"223","severity":1,"message":"243","line":21,"column":8,"nodeType":"225","messageId":"226","endLine":21,"endColumn":14},{"ruleId":"223","severity":1,"message":"291","line":22,"column":8,"nodeType":"225","messageId":"226","endLine":22,"endColumn":18},{"ruleId":"237","severity":1,"message":"238","line":730,"column":6,"nodeType":"239","endLine":730,"endColumn":8,"suggestions":"292"},{"ruleId":"247","severity":1,"message":"248","line":746,"column":33,"nodeType":"249","messageId":"250","endLine":746,"endColumn":35},{"ruleId":"247","severity":1,"message":"248","line":752,"column":33,"nodeType":"249","messageId":"250","endLine":752,"endColumn":35},{"ruleId":"247","severity":1,"message":"248","line":758,"column":32,"nodeType":"249","messageId":"250","endLine":758,"endColumn":34},{"ruleId":"223","severity":1,"message":"229","line":7,"column":5,"nodeType":"225","messageId":"226","endLine":7,"endColumn":19},{"ruleId":"223","severity":1,"message":"230","line":10,"column":5,"nodeType":"225","messageId":"226","endLine":10,"endColumn":14},{"ruleId":"223","severity":1,"message":"231","line":13,"column":5,"nodeType":"225","messageId":"226","endLine":13,"endColumn":11},{"ruleId":"223","severity":1,"message":"233","line":15,"column":5,"nodeType":"225","messageId":"226","endLine":15,"endColumn":14},{"ruleId":"223","severity":1,"message":"234","line":16,"column":5,"nodeType":"225","messageId":"226","endLine":16,"endColumn":13},{"ruleId":"223","severity":1,"message":"277","line":444,"column":11,"nodeType":"225","messageId":"226","endLine":444,"endColumn":20},{"ruleId":"237","severity":1,"message":"238","line":775,"column":8,"nodeType":"239","endLine":775,"endColumn":10,"suggestions":"293"},{"ruleId":"223","severity":1,"message":"294","line":1,"column":20,"nodeType":"225","messageId":"226","endLine":1,"endColumn":25},{"ruleId":"223","severity":1,"message":"295","line":1,"column":22,"nodeType":"225","messageId":"226","endLine":1,"endColumn":31},{"ruleId":"223","severity":1,"message":"280","line":6,"column":3,"nodeType":"225","messageId":"226","endLine":6,"endColumn":8},{"ruleId":"223","severity":1,"message":"296","line":3,"column":3,"nodeType":"225","messageId":"226","endLine":3,"endColumn":7},{"ruleId":"223","severity":1,"message":"297","line":4,"column":3,"nodeType":"225","messageId":"226","endLine":4,"endColumn":14},{"ruleId":"223","severity":1,"message":"298","line":5,"column":3,"nodeType":"225","messageId":"226","endLine":5,"endColumn":13},{"ruleId":"223","severity":1,"message":"299","line":6,"column":3,"nodeType":"225","messageId":"226","endLine":6,"endColumn":7},{"ruleId":"223","severity":1,"message":"227","line":7,"column":3,"nodeType":"225","messageId":"226","endLine":7,"endColumn":7},{"ruleId":"223","severity":1,"message":"279","line":8,"column":3,"nodeType":"225","messageId":"226","endLine":8,"endColumn":9},{"ruleId":"223","severity":1,"message":"300","line":12,"column":8,"nodeType":"225","messageId":"226","endLine":12,"endColumn":20},{"ruleId":"237","severity":1,"message":"301","line":92,"column":6,"nodeType":"239","endLine":92,"endColumn":8,"suggestions":"302"},{"ruleId":"303","severity":1,"message":"304","line":128,"column":17,"nodeType":"268","endLine":132,"endColumn":19},"no-native-reassign",["305"],"no-negated-in-lhs",["306"],"no-unused-vars","'isAuth' is defined but never used.","Identifier","unusedVar","'Chip' is defined but never used.","'IconButton' is defined but never used.","'InputAdornment' is defined but never used.","'TextField' is defined but never used.","'Slider' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","'MenuItem' is defined but never used.","'Checkbox' is defined but never used.","'colorSet' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.","ArrayExpression",["307"],"'styled' is defined but never used.","'blue' is defined but never used.","'Rating' is defined but never used.","'deadline' is assigned a value but never used.","'cName' is assigned a value but never used.","'cEducation' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["308"],"React Hook useEffect has a missing dependency: 'setPopup'. Either include it or remove the dependency array.",["309"],"'List' is defined but never used.","'GridOff' is defined but never used.","'userData' is assigned a value but never used.","'setUserData' is assigned a value but never used.","'startDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'jobTitle' is assigned a value but never used.","'department' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'profileLink' is assigned a value but never used.","'projectDetails' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Input' is defined but never used.","'DescriptionIcon' is defined but never used.","'FaceIcon' is defined but never used.","'FileUploadInput' is defined but never used.","'classes' is assigned a value but never used.","'education' is assigned a value but never used.","'setEducation' is assigned a value but never used.","'useParams' is defined but never used.","'getResume' is assigned a value but never used.",["310"],"'Button' is defined but never used.","'Modal' is defined but never used.","'ListItem' is defined but never used.","'PhoneInput' is defined but never used.","'handleInput' is assigned a value but never used.",["311"],"'handleUpdate' is assigned a value but never used.","'companyName' is assigned a value but never used.","'emailAddress' is assigned a value but never used.","'phoneNo' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Pagination' is defined but never used.",["312"],["313"],"'Slide' is defined but never used.","'useEffect' is defined but never used.","'Card' is defined but never used.","'CardContent' is defined but never used.","'Typography' is defined but never used.","'Link' is defined but never used.","'StarRateIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'getCourseSuggestions'. Either include it or remove the dependency array.",["314"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-global-assign","no-unsafe-negation",{"desc":"315","fix":"316"},{"desc":"315","fix":"317"},{"desc":"318","fix":"319"},{"desc":"315","fix":"320"},{"desc":"315","fix":"321"},{"desc":"315","fix":"322"},{"desc":"315","fix":"323"},{"desc":"324","fix":"325"},"Update the dependencies array to be: [getData]",{"range":"326","text":"327"},{"range":"328","text":"327"},"Update the dependencies array to be: [setPopup]",{"range":"329","text":"330"},{"range":"331","text":"327"},{"range":"332","text":"327"},{"range":"333","text":"327"},{"range":"334","text":"327"},"Update the dependencies array to be: [getCourseSuggestions]",{"range":"335","text":"336"},[6219,6221],"[getData]",[18496,18498],[422,424],"[setPopup]",[22326,22328],[1162,1164],[22006,22008],[31988,31990],[7371,7373],"[getCourseSuggestions]"]